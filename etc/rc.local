#!/bin/bash
#
#===============================================================================
# File: rc.local  (Fusion Version)
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
#-------------------------------------------------------------------------------
# REVISION HISTORY:
# 11-Apr-19 <jwa> - Modified to check for internal and external wireless assets
#       and use the internal asset as a NIC as necessary
# 03-Apr-18 <jwa> - Added host name to dns service and TCP Port redirect
#
#===============================================================================

export DEBUG="TRUE"
export LOGPATH="/usr/Fusion/etc/logs"
export BOOTLOG="${LOGPATH}/bootlog.txt"


#===============================================================================
# Local Function Definitions
#===============================================================================

#---[ lecho - Outputs argument(s) to the ${BOOTLOG} file. ]------
#
lecho() {

	sudo echo $* >> ${BOOTLOG}

} #---[ end lecho() ]------------------------


#---[ Mode_AccessPoint - configures the Internal WiFi as an Access Point ]------
#
Mode_AccessPoint() {

	lecho "Running with Internal Access Point"
    if [ ${DEBUG} == "TRUE" ]; then
		return 0
    fi
    
    sudo invoke-rc.d hostapd start 
    sudo invoke-rc.d dnsmasq start

    sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

    sudo iptables -t nat -A POSTROUTING -o wlan1 -j MASQUERADE
    sudo iptables -A FORWARD -i wlan1 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A FORWARD -i wlan0 -o wlan1 -j ACCEPT

    sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
    sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT

    sudo iptables -t nat -I PREROUTING --src 0/0 --dst 192.168.50.1 -p tcp --dport 80 -j REDIRECT --to-port 8080


    sudo python /usr/Fusion/etc/ssid_set.py -b -w ${WAPT}
    sudo dhcpcd 

} #---[ end Mode_AccessPoint() ]------------------------


#---[ Mode_NetworkInterface - configures the Internal WiFi as a Network Interface ]------
#
Mode_NetworkInterface() {

    lecho "Running with Internal Network Interface"
    if [ ${DEBUG} == "TRUE" ]; then
		return 0
    fi
    
    sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

    sudo iptables -t nat -A POSTROUTING -o wlan1 -j MASQUERADE
    sudo iptables -A FORWARD -i wlan1 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A FORWARD -i wlan0 -o wlan1 -j ACCEPT

    sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
    sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT

    sudo iptables -t nat -I PREROUTING --src 0/0 --dst 192.168.50.1 -p tcp --dport 80 -j REDIRECT --to-port 8080

    sudo dhcpcd 

} #---[ end Mode_NetworkInterface() ]------------------------


#---[ Launch_FusionServer - Starts the Fusion Server ]------
#
Launch_FusionServer() {

    lecho "Launching the Fusion Server:"
	lecho "     sudo NODE_ENV=production WIRE_NET=${ENET} WIFI_WAP=${WAPT} WIFI_NIC=${WIFI} forever start server.js"

	if [ ${DEBUG} == "TRUE" ]; then
		return 0
    fi
    
    
    # Switch to the application server directory
    cd /usr/Fusion/FusionServer/Build

    # Launch node.js and the Fusion Server
    sudo NODE_ENV=production WIRE_NET=${ENET} WIFI_WAP=${WAPT} WIFI_NIC=${WIFI} forever start server.js

    # Launch the VNC service
    cd /usr/Fusion/lib/noVNC
    sudo ./utils/launch.sh &

    # Print the IP address  (that really, no one ever sees....)
    _IP=$(hostname -I) || true
    if [ "$_IP" ]; then
        printf "My IP address is %s\n" "$_IP"
    fi

} #---[ end Launch_FusionServer() ]------------------------


#===============================================================================
#==========           S T A R T   O F   M A I N L I N E              ==========#
#===============================================================================

# Let's log this startup.....
#
sudo mkdir -p -m 777 ${LOGPATH}
lecho " " 
lecho " "
lecho " "
lecho `date`
lecho "System boot -- rc.local is active" 

# Start the MongoDB Service
sudo invoke-rc.d mongodb start 

# Scan and identify the networking assets
sudo chmod a+x /home/pi/play/ports.sh
sudo /home/pi/play/ports.sh

# Include the resulting variables
source /usr/Fusion/etc/portassigns
lecho "Port Assignments on Entry:"
sudo cat /usr/Fusion/etc/portassigns >> ${BOOTLOG}

# Did we find an external WiFi Asset?  If not, we need to figure out if we're
# going to connect to a Classroom Server before we convert the internal wireless
# asset to be an access point
if [[ ${WIFI} == "NULL" ]]; then
    
    # No external wireless asset found, see if there's a Classroom Server nearby
    MYBOT_SCAN=(`iwlist ${WAPT} scan | grep "MyBot_Community_WiFi"`)
    lecho ${MYBOT_SCAN}
    
    # Did our search return a hit?
    if [ -z ${MYBOT_SCAN} ]; then
    
        # No!  We can configure the Internal Wireless Asset as an Access Point  
        lecho "Configuring for Standalone Mode"
		        
        Mode_AccessPoint
        Launch_FusionServer
        
    else
    
        # Yes! That means we need to keep the Internal WiFi Asset as a NIC
        lecho "Configuring for Community Mode"

		# It also means that we need to swap the port assignments and rewrite the 
		# portassigns file...  We need these to tell the FusionServer what the parts
		# are being used for
		#
		WIFI=${WAPT}
		WAPT="NULL"

		# rewrite the portassigns file
		#
		sudo echo "export ENET=${ENET}"  > /usr/Fusion/etc/portassigns
		sudo echo "export WAPT=${WAPT}" >> /usr/Fusion/etc/portassigns
		sudo echo "export WIFI=${WIFI}" >> /usr/Fusion/etc/portassigns
		
		# Since we modified the port assignments, let's put something in the log file
		lecho "Port Assignments Modified. New assignments:"
		sudo cat /usr/Fusion/etc/portassigns >> ${BOOTLOG}

        Mode_NetworkInterface
        Launch_FusionServer

    fi
    
else

    # We have an external wireless asset so we'll come up in normal 2-port mode
    lecho "Configuring for Normal 2-Port Mode"

    Mode_AccessPoint
    Launch_FusionServer
    
fi

exit 0
