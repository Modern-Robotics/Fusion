#!/bin/bash -e

# File paths
HOSTAPD_CONF="/etc/hostapd/hostapd.conf"
ETH0_ADDRESS="/sys/class/net/eth0/address"

# Default values
DEFAULT_CHANNEL="1"
DEFAULT_SSID="RecruitAP"
DEFAULT_PASSPHRASE="bxlrecruit"

# Sets the default access point settings on a fresh MyBot system
setDefaultAccessPointSettings() {
    # Set default channel
    local channel="${1:-$DEFAULT_CHANNEL}"
    if [[ $(awk -F '=' '/^channel=/ { print $2 }' "$HOSTAPD_CONF") == "\${channel}" ]]; then
        echo 'Channel still set to default'
        channel=$((1 + $RANDOM % 11))
        sed -i '/^[^#]/s|^channel=.*$|channel='$channel'|g' "$HOSTAPD_CONF"
    fi

    # Set default ssid
    local ssid="${2:-$DEFAULT_SSID}"
    if [[ $(awk -F '=' '/^ssid=/ { print $2 }' "$HOSTAPD_CONF") == "\${ssid}" ]]; then
        echo 'SSID still set to default'
        ssid=RecruitAP_$(cat $ETH0_ADDRESS | sed 's|:||g' | grep -o '.\{6\}$')
        sed -i '/^[^#]/s|^ssid=.*$|ssid='$ssid'|g' "$HOSTAPD_CONF"
    fi

    # Set default passphrase
    local wpa_passphrase="${3:-$DEFAULT_PASSPHRASE}"
    if [[ $(awk -F '=' '/^wpa_passphrase=/ { print $2 }' "$HOSTAPD_CONF") == "\${wpa_passphrase}" ]]; then
        echo 'WPA Passphrase still set to default'
        wpa_passphrase=mrirecruit
        sed -i '/^[^#]/s|^wpa_passphrase=.*$|wpa_passphrase='$wpa_passphrase'|g' "$HOSTAPD_CONF"
    fi
}

# Starts the hostapd service and waits until the interface is assigned an IP address
start_hostapd_and_wait() {
    local service="hostapd"
    systemctl start ${service}
    local counter=0
    while ! ifconfig ap0 | grep -q "inet "
    do
        sleep 1
        counter=$((counter+1))
        if [ $counter -ge 15 ]; then
            echo "${service} service did not start within the expected time."
            exit 1
        fi
    done
    echo "${service} service is running"
}

# Starts the dnsmasq service and waits until my.bot is reachable
start_dnsmasq_and_wait() {
    local service="dnsmasq"
    systemctl start ${service}
    local counter=0
    while ! ping -c 1 my.bot &> /dev/null
    do
        sleep 1
        counter=$((counter+1))
        if [ $counter -ge 15 ]; then
            echo "${service} service did not start within the expected time."
            exit 1
        fi
    done
    echo "${service} service is running"
}


# Stop any running network services
systemctl stop hostapd.service dnsmasq.service

# Add uap0 interface if it does not exist
if ! iw dev | grep -q 'ap0'; then
    iw phy phy0 interface add ap0 type __ap
    #iw ap0 set power_save off
fi

# Set robot specific hostapd settings
setDefaultAccessPointSettings $1 $2 $3

# Start network services
start_hostapd_and_wait
start_dnsmasq_and_wait

# Set ipv4 forwarding
sysctl net.ipv4.ip_forward=1

# Forward traffic to a specific destination IP
if ! iptables -t nat -C PREROUTING -p tcp -d 192.168.50.1 --dport 80 -j REDIRECT --to-port 8080 2>/dev/null; then
    iptables -t nat -A PREROUTING -p tcp -d 192.168.50.1 --dport 80 -j REDIRECT --to-port 8080
fi

# Add eth0 ip tables rules if they don't exist
if ! iptables -t nat -C POSTROUTING -o eth0 -j MASQUERADE 2>/dev/null; then
    iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
fi

# Add wlan0 ip tables rules if they don't exist
if ! iptables -t nat -C POSTROUTING -o wlan0 -j MASQUERADE 2>/dev/null; then
    iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
fi

# Add rate limiting to ap0 interface if it does not exist
if ! tc qdisc show dev ap0 | grep -q "tbf.*rate 5Mbit"; then
    tc qdisc add dev ap0 root tbf rate 5mbit burst 32kbit latency 400ms
fi

echo "AP-STA mode STARTED"