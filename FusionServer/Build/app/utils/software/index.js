!function(){require("config");const t=require("./../logger"),e=require("os"),i=require("./../shell"),r=require("./../../socket"),n=require("semver"),s={isProductionRepo:null,gitBranch:null,isProductionMachine:null,currentSHA:null,currentVersion:null,latestVersion:null,updateAvailable:!1,getIsProductionRepo:async function(){if(!this.isProductionRepo){this.isProductionRepo=!1,"Fusion"==await i.execAsync("basename -s .git `git config --get remote.origin.url`",{silent:!0})&&(this.isProductionRepo=!0),t.debug(`Production Repo: ${this.isProductionRepo}`)}return this.isProductionRepo},getGitBranch:async function(){return this.gitBranch||(this.gitBranch=await i.execAsync("git rev-parse --abbrev-ref HEAD",{silent:!0}),t.debug(`Current Branch: ${this.gitBranch}`)),this.gitBranch},getIsProductionMachine:function(){return this.isProductionMachine||(this.isProductionMachine=!1,"raspberrypi"==e.hostname()&&(this.isProductionMachine=!0)),this.isProductionMachine},getCurrentSHA:async function(){return this.currentSHA||(this.currentSHA=await i.execAsync("git rev-parse HEAD",{silent:!0}),t.debug(`Current SHA: ${this.currentSHA}`)),this.currentSHA},getCurrentVersion:async function(){if(!this.currentVersion){let e=await this.getCurrentSHA();this.currentVersion=await i.execAsync(`git describe --tags ${e}`,{silent:!0}),t.debug(`Current Version: ${this.currentVersion}`)}return r.sockets.emit("version-number",this.currentVersion),this.currentVersion},getLatestVersion:async function(){this.latestVersion=await this.getCurrentVersion();try{if(this.getIsProductionMachine()&&await this.getIsProductionRepo()){await i.execAsync("git fetch --quiet",{silent:!0});let t=await this.getGitBranch();this.latestVersion=await i.execAsync(`git describe --tags --abbrev=0 $(git rev-parse refs/remotes/origin/${t})`,{silent:!0})}}catch(e){t.warn(`Error fetching latest version data: ${e}`)}return t.debug(`Latest Version: ${this.latestVersion}`),this.latestVersion},getUpdateAvailable:async function(){if(!this.updateAvailable){let t=n.coerce(await this.getLatestVersion()),e=n.coerce(await this.getCurrentVersion());n.gt(t,e)&&(this.updateAvailable=!0)}return t.debug(`Update available: ${this.updateAvailable}`),r.sockets.emit("update-available",this.updateAvailable),this.updateAvailable}};module.exports=s}();