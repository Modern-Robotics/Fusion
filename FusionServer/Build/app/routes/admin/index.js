!function(){var s=require("fs-extra"),e=(require("mkdirp"),require("os")),t=require("path"),n=require("shelljs"),i=require("wireless-tools/wpa_cli"),o=require("wireless-tools/iwlist"),r=(require("wireless-tools/wpa_supplicant"),require("child_process").spawn);const a=require("config"),u=require("../../models/autonomous"),c=require("../../utils/logger");let d=a.get("Wifi_NIC");const p=require("../../express"),l=require("../../models/user"),f=require("../../socket"),g=require("../../global/fusionSettings");module.exports=function(){p.post("/api/admin/users",(function(s,e,t){if(s.isAuthenticated())return t();e.status(401).send("User Unauthenticated")}),(function(s,e){l.findOne({username:s.body.username},(async function(t,n){if(t)return e.status(500).send(t);if(n)return e.status(500).send("Username already taken.");var i=new l(s.body);i.username=s.body.username,i.password=i.generateHash(s.body.password),i.filepath=await i.generateFileSystem(i.username),i.save((function(s){return s?e.status(500).send(s):e.status(200).json({serverMessage:"User created!"})}))}))})),p.get("/api/admin/powerOff",(function(s,e){e.status(200).json({serverMessage:"Shut Down Commencing"});(0,require("child_process").spawn)("sudo",["poweroff"])})),p.get("/api/admin/restart",(function(s,e){e.status(200).send("Restart Commencing");(0,require("child_process").spawn)("sudo",["reboot"])})),p.get("/api/admin/wirelessSettings",(function(t,n){var i,o,r,a=require("os").EOL,u={};"raspberrypi"!=e.hostname()?(i="../../etc/config-wap/hostapd.conf__npp.sh",s.readFile(i,"utf8",(function(s,e){s&&n.status(500).send("Wifi file not found"),o=e.split("\n");for(var t=0;t<o.length;t++)"ssid"==(r=o[t].split("="))[0]?u.SSID=r[1]:"wpa_passphrase"==r[0]&&(u.Password=r[1]);n.status(200).json({SSID:u.SSID,Password:u.Password})}))):(i="/etc/hostapd/hostapd.conf",s.readFile(i,"utf8",(function(s,e){s&&n.status(500).send("Wifi file not found"),o=e.split(a);for(var t=0;t<o.length;t++)"ssid"==(r=o[t].split("="))[0]?u.SSID=r[1]:"wpa_passphrase"==r[0]&&(u.Password=r[1]);u.SSID||(u.SSID="Not configured..",u.Password=""),n.status(200).json({SSID:u.SSID,Password:u.Password})})))})),p.post("/api/admin/wirelessSettings",(function(s,e){try{var n,i,o=t.join("..","..","etc","ssid_set.py");i=null==s.body.ssid&&null==s.body.password?["python",o,"-d"]:["python",o,"-s",s.body.ssid,"-p",s.body.password];var r=require("child_process").spawn;python_process=r("sudo",i,{stdio:"pipe"}),python_process.stderr.on("data",(function(s){c.info(String(s)),n=String(s)})),python_process.stdout.on("close",(function(s){return n?e.status(500).send(n):e.status(200).json({serverMessage:"Successfully changed wifi settings"})}))}catch(s){return c.info(s),e.status(500).send(s)}})),p.get("/api/admin/wirelessConnections",(function(s,t){if("raspberrypi"!=e.hostname())return t.status(200).send();o.scan(d,(function(s,e){return s?t.status(500).send("Wireless interface not found"):t.status(200).send({serverMessage:"Retreived wireless connections",data:e})}))})),p.post("/api/admin/wirelessConnections",(function(e,t){var o=void 0,r="ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=US\n\n",a='network={\n\tssid="'+e.body.ssid+'"\n\tscan_ssid=1\n\tpsk="'+e.body.password+'"\n\tkey_mgmt=WPA-PSK\n}\n\n';o=e.body.password?n.exec('wpa_passphrase "'+e.body.ssid+'" "'+e.body.password+'"',{silent:!0}).stdout:'network={\n    ssid="'+e.body.ssid+'"\n    key_mgmt=NONE\n}\n';let u="";u=e.body.hiddenNetwork?r+a:r+o,s.writeFile("/etc/wpa_supplicant/wpa_supplicant.conf",u,(function(s){if(s)return t.status(500).send(s);n.exec(`sudo wpa_cli -i ${d} reconfigure`,{silent:!0});var o=0,r=setInterval((function(){var s=["SCANNING","4WAY_HANDSHAKE","AUTHENTICATING","DISCONNECTED","ASSOCIATING"];i.status(d,(function(n,i){if(n)return t.status(500).send(n);if("COMPLETED"==i.wpa_state){if(i.ip)return c.info("Ip address: "+i.ip+" assigned"),clearInterval(r),g.SocketVariables.fusion_wifi_access=i,f.sockets.emit("wifi-connection",i),t.status(200).json({serverMessage:"Connected to "+e.body.ssid+" successfully"});if(o>15e3)return c.info("Took too long to connect. Something must be wrong."),clearInterval(r),t.status(500).send("Error connecting to "+e.body.ssid);o+=300}else if(-1==s.indexOf(i.wpa_state))return clearInterval(r),f.sockets.emit("wifi-connection",i),t.status(500).send("Error connecting to "+e.body.ssid)}))}),300)}))})),p.get("/api/admin/wirelessConnections/disconnect",(function(t,o){if("raspberrypi"!=e.hostname())o.status(500).send("Disconnect not available on Windows");else{s.writeFile("/etc/wpa_supplicant/wpa_supplicant.conf","ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=US\n\n",(function(s){if(s)return o.status(500).send(s);n.exec(`sudo wpa_cli -i ${d} reconfigure`,{silent:!0});var e=setInterval((function(){i.status(d,(function(s,t){return s?o.status(500).send(s):(g.SocketVariables.fusion_wifi_access=t,f.sockets.emit("wifi-connection",t),"DISCONNECTED"==t.wpa_state||"INACTIVE"==t.wpa_state?(clearInterval(e),f.sockets.emit("wifi-connection",t),o.status(200).json({serverMessage:"Disconnected successfully"})):-1==connectingStatuses.indexOf(t.wpa_state)?(clearInterval(e),f.sockets.emit("wifi-connection",t),o.status(500).send("Error disconnecting")):void 0)}))}),300)}))}})),p.get("/api/admin/crashReport",(function(e,t){var n=".crash";s.readdir(n,(function(e,i){return e?t.status(500).send(e):i.length>0?void s.readFile(n+"/"+i[0],"utf8",(function(s,e){return s?status(500).send("Error reading crash file"):(t.setHeader("Content-disposition","attachment; filename="+i[0]),t.status(200).download(n+"/"+i[0]))})):t.status(200).send("No crash files found")}))}));var a=null;p.post("/api/diagnostics/start",(function(s,t){if("raspberrypi"!=e.hostname())return t.status(200).json({serverMessage:"Diagnostic tool does not run on windows"});(a=r("sudo",["sh","../../diagnostics/runRemi.sh","../../diagnostics/diagnosticGUI.py"])).stdout.on("data",(function(s){c.info(String(s))})),a.stderr.on("data",(function(s){c.info(String(s))}));var i=1,o=setInterval((function(){if(!(i<=3))return clearInterval(o),t.status(500).send("Error starting diagnostic tool");var e=n.exec("ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}'",{silent:!0}).stdout;if(e)return clearInterval(o),g.SocketVariables.fusion_diagnostics_running={process:e,socket:s.body.socketId},f.sockets.emit("diagnostics_running",g.SocketVariables.fusion_diagnostics_running),t.status(200).json({serverMessage:"Diagnostic tool started successfully"});i++}),300)})),p.get("/api/diagnostics/stop",(function(s,t){if("raspberrypi"!=e.hostname())return t.status(200).json({serverMessage:"Diagnostic tool does not run on windows"});n.exec("sudo kill $(ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}')",{silent:!0}),n.exec("ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}'",{silent:!0},(function(s,e,n){e.trim().trim()?t.status(500).send("Unable to stop diagnostic tool"):(g.SocketVariables.fusion_diagnostics_running=null,f.sockets.emit("diagnostics_running",g.SocketVariables.fusion_diagnostics_running),a=null,t.status(200).json({serverMessage:"Diagnostic tool stopped successfully"}))}))})),p.get("/api/autonomous",(async function(s,e){try{const s=await u.findOne().exec();return e.json(s)}catch(s){return e.status(500).send(error.message)}})),p.post("/api/autonomous",(async function(s,e){try{await u.findOneAndUpdate({},s.body);return e.status(200).json({serverMessage:"Updated successfully"})}catch(s){return e.status(500).send(s.message)}})),p.post("/api/autonomousPrograms",(async function(e,t){try{const n=e.body.username,i=e.body.type,o=await s.readdir(`./app/filesystem/${n}/${i}`);return t.status(200).json({files:o})}catch(s){return t.status(500).send(s.message)}}))}()}();