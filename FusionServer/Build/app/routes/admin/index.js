!function(){var s=require("fs-extra"),e=(require("mkdirp"),require("os")),t=(require("path"),require("shelljs")),n=require("wireless-tools/wpa_cli"),r=require("wireless-tools/iwlist"),i=(require("wireless-tools/wpa_supplicant"),require("child_process").spawn);const a=require("tree-kill"),o=require("config"),u=require("../../models/autonomous"),c=require("../../utils/logger"),d=require("./../../utils/wireless");let l=o.get("Wifi_NIC");const p=require("../../express"),f=require("../../models/user"),g=require("../../socket"),w=require("../../global/fusionSettings");module.exports=function(){p.post("/api/admin/users",(function(s,e,t){if(s.isAuthenticated())return t();e.status(401).send("User Unauthenticated")}),(function(s,e){f.findOne({username:s.body.username},(async function(t,n){if(t)return e.status(500).send(t);if(n)return e.status(500).send("Username already taken.");var r=new f(s.body);r.username=s.body.username,r.password=r.generateHash(s.body.password),r.filepath=await r.generateFileSystem(r.username),r.save((function(s){return s?e.status(500).send(s):e.status(200).json({serverMessage:"User created!"})}))}))})),p.get("/api/admin/powerOff",(function(s,e){e.status(200).json({serverMessage:"Shut Down Commencing"});(0,require("child_process").spawn)("sudo",["poweroff"])})),p.get("/api/admin/restart",(function(s,e){e.status(200).send("Restart Commencing");(0,require("child_process").spawn)("sudo",["reboot"])})),p.get("/api/admin/wirelessSettings",(async function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({SSID:"RecruitAP_Development",Password:"mrirecruit"});try{let s="/etc/hostapd/hostapd.conf",e=t.exec(`grep ^ssid ${s} | awk -F '=' '{print $2}'`,{silent:!0}).stdout;var r=t.exec(`grep ^wpa_passphrase ${s} | awk -F '=' '{print $2}'`,{silent:!0}).stdout;n.status(200).json({SSID:e,Password:r})}catch(s){return c.info(s),n.status(500).send("Error fetching access point details")}})),p.post("/api/admin/wirelessSettings",(async function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({serverMessage:"Successfully changed wifi settings"});try{let e=s.body.ssid,n=s.body.password,r="/etc/hostapd/hostapd.conf";if(null==e&&null==n){const s=await require("./../../serial");e=`RecruitAP_${s.serialId}`,n="bxlrecruit"}t.exec(`sed -i 's|^ssid=.*|ssid=${e}|' ${r}`,{silent:!0}).stdout,t.exec(`sed -i 's|^wpa_passphrase=.*|wpa_passphrase=${n}|' ${r}`,{silent:!0}).stdout,t.exec("systemctl restart hostapd",{silent:!0}).stdout}catch(s){return c.info(s),n.status(500).send(s)}})),p.get("/api/admin/wirelessConnections",(function(s,t){if("raspberrypi"!=e.hostname())return t.status(200).send();r.scan(l,(function(s,e){return s?t.status(500).send("Wireless interface not found"):t.status(200).send({serverMessage:"Retrieved wireless connections",data:e})}))})),p.post("/api/admin/wirelessConnections",(async function(s,e){try{c.debug("Connecting to network: "+s.body.ssid);let t={ssid:s.body.ssid,password:s.body.password,hidden:!1};await d.connectToNetwork(t);let n=await d.getNetworkStatus();return g.sockets.emit("wifi-connection",n),e.status(200).json({serverMessage:"Connected to "+s.body.ssid+" successfully"})}catch(t){c.warn("Error connecting to classroom network: "+t);let n=await d.getNetworkStatus();return g.sockets.emit("wifi-connection",n),e.status(500).send("Error connecting to "+s.body.ssid)}})),p.get("/api/admin/wirelessConnections/disconnect",(function(r,i){if("raspberrypi"!=e.hostname())i.status(500).send("Disconnect not available on Windows");else{s.writeFile("/etc/wpa_supplicant/wpa_supplicant.conf","ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=US\n\n",(function(s){if(s)return i.status(500).send(s);t.exec(`sudo wpa_cli -i ${l} reconfigure`,{silent:!0});var e=setInterval((function(){n.status(l,(function(s,t){return s?i.status(500).send(s):(w.SocketVariables.fusion_wifi_access=t,g.sockets.emit("wifi-connection",t),"DISCONNECTED"==t.wpa_state||"INACTIVE"==t.wpa_state?(clearInterval(e),g.sockets.emit("wifi-connection",t),i.status(200).json({serverMessage:"Disconnected successfully"})):-1==connectingStatuses.indexOf(t.wpa_state)?(clearInterval(e),g.sockets.emit("wifi-connection",t),i.status(500).send("Error disconnecting")):void 0)}))}),300)}))}})),p.get("/api/admin/crashReport",(function(e,t){var n=".crash";s.readdir(n,(function(e,r){return e?t.status(500).send(e):r.length>0?void s.readFile(n+"/"+r[0],"utf8",(function(s,e){return s?status(500).send("Error reading crash file"):(t.setHeader("Content-disposition","attachment; filename="+r[0]),t.status(200).download(n+"/"+r[0]))})):t.status(200).send("No crash files found")}))}));var o=null;p.post("/api/diagnostics/start",(function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({serverMessage:"Diagnostic tool does not run on windows"});(o=i("sudo",["sh","../../diagnostics/runRemi.sh","../../diagnostics/diagnosticGUI.py"])).stdout.on("data",(function(s){c.info(String(s))})),o.stderr.on("data",(function(s){c.info(String(s))}));var r=1,a=setInterval((function(){if(!(r<=3))return clearInterval(a),n.status(500).send("Error starting diagnostic tool");var e=t.exec("ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}'",{silent:!0}).stdout;if(e)return clearInterval(a),w.SocketVariables.fusion_diagnostics_running={process:e,socket:s.body.socketId},g.sockets.emit("diagnostics_running",w.SocketVariables.fusion_diagnostics_running),n.status(200).json({serverMessage:"Diagnostic tool started successfully"});r++}),300)})),p.get("/api/diagnostics/stop",(function(s,t){if("raspberrypi"!=e.hostname())return t.status(200).json({serverMessage:"Diagnostic tool only runs on raspberry pi"});a(o.pid,"SIGKILL",(s=>s?(c.error("Failed to kill process tree:",s),t.status(500).send("Unable to stop diagnostic tool")):(c.verbose(`Killed process tree rooted at PID ${o.pid}`),w.SocketVariables.fusion_diagnostics_running=null,g.sockets.emit("diagnostics_running",w.SocketVariables.fusion_diagnostics_running),o=null,t.status(200).json({serverMessage:"Diagnostic tool stopped successfully"}))))})),p.get("/api/autonomous",(async function(s,e){try{const s=await u.findOne().exec();return e.json(s)}catch(s){return e.status(500).send(error.message)}})),p.post("/api/autonomous",(async function(s,e){try{await u.findOneAndUpdate({},s.body);return e.status(200).json({serverMessage:"Updated successfully"})}catch(s){return e.status(500).send(s.message)}})),p.post("/api/autonomousPrograms",(async function(e,t){try{const n=e.body.username,r=e.body.type,i=await s.readdir(`./app/filesystem/${n}/${r}`);return t.status(200).json({files:i})}catch(s){return t.status(500).send(s.message)}}))}()}();