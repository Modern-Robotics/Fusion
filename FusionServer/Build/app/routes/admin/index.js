!function(){var s=require("fs-extra"),e=(require("mkdirp"),require("os")),t=(require("path"),require("shelljs")),n=require("wireless-tools/wpa_cli"),i=require("wireless-tools/iwlist"),r=(require("wireless-tools/wpa_supplicant"),require("child_process").spawn);const a=require("config"),o=require("../../models/autonomous"),u=require("../../utils/logger"),c=require("./../../utils/wireless");let d=a.get("Wifi_NIC");const l=require("../../express"),p=require("../../models/user"),f=require("../../socket"),g=require("../../global/fusionSettings");module.exports=function(){l.post("/api/admin/users",(function(s,e,t){if(s.isAuthenticated())return t();e.status(401).send("User Unauthenticated")}),(function(s,e){p.findOne({username:s.body.username},(async function(t,n){if(t)return e.status(500).send(t);if(n)return e.status(500).send("Username already taken.");var i=new p(s.body);i.username=s.body.username,i.password=i.generateHash(s.body.password),i.filepath=await i.generateFileSystem(i.username),i.save((function(s){return s?e.status(500).send(s):e.status(200).json({serverMessage:"User created!"})}))}))})),l.get("/api/admin/powerOff",(function(s,e){e.status(200).json({serverMessage:"Shut Down Commencing"});(0,require("child_process").spawn)("sudo",["poweroff"])})),l.get("/api/admin/restart",(function(s,e){e.status(200).send("Restart Commencing");(0,require("child_process").spawn)("sudo",["reboot"])})),l.get("/api/admin/wirelessSettings",(async function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({SSID:"RecruitAP_Development",Password:"mrirecruit"});try{let s="/etc/hostapd/hostapd.conf",e=t.exec(`grep ^ssid ${s} | awk -F '=' '{print $2}'`,{silent:!0}).stdout;var i=t.exec(`grep ^wpa_passphrase ${s} | awk -F '=' '{print $2}'`,{silent:!0}).stdout;n.status(200).json({SSID:e,Password:i})}catch(s){return u.info(s),n.status(500).send("Error fetching access point details")}})),l.post("/api/admin/wirelessSettings",(async function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({serverMessage:"Successfully changed wifi settings"});try{let e=s.body.ssid,n=s.body.password,i="/etc/hostapd/hostapd.conf";if(null==e&&null==n){const s=await require("./../../serial");e=`RecruitAP_${s.serialId}`,n="mrirecruit"}t.exec(`sed -i 's|^ssid=.*|ssid=${e}|' ${i}`,{silent:!0}).stdout,t.exec(`sed -i 's|^wpa_passphrase=.*|wpa_passphrase=${n}|' ${i}`,{silent:!0}).stdout,t.exec("systemctl restart hostapd",{silent:!0}).stdout}catch(s){return u.info(s),n.status(500).send(s)}})),l.get("/api/admin/wirelessConnections",(function(s,t){if("raspberrypi"!=e.hostname())return t.status(200).send();i.scan(d,(function(s,e){return s?t.status(500).send("Wireless interface not found"):t.status(200).send({serverMessage:"Retreived wireless connections",data:e})}))})),l.post("/api/admin/wirelessConnections",(async function(s,e){try{u.debug("Connecting to network: "+s.body.ssid);let t={ssid:s.body.ssid,password:s.body.password,hidden:!1};await c.connectToNetwork(t);let n=await c.getNetworkStatus();return f.sockets.emit("wifi-connection",n),e.status(200).json({serverMessage:"Connected to "+s.body.ssid+" successfully"})}catch(t){u.warn("Error connecting to classroom network: "+t);let n=await c.getNetworkStatus();return f.sockets.emit("wifi-connection",n),e.status(500).send("Error connecting to "+s.body.ssid)}})),l.get("/api/admin/wirelessConnections/disconnect",(function(i,r){if("raspberrypi"!=e.hostname())r.status(500).send("Disconnect not available on Windows");else{s.writeFile("/etc/wpa_supplicant/wpa_supplicant.conf","ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=US\n\n",(function(s){if(s)return r.status(500).send(s);t.exec(`sudo wpa_cli -i ${d} reconfigure`,{silent:!0});var e=setInterval((function(){n.status(d,(function(s,t){return s?r.status(500).send(s):(g.SocketVariables.fusion_wifi_access=t,f.sockets.emit("wifi-connection",t),"DISCONNECTED"==t.wpa_state||"INACTIVE"==t.wpa_state?(clearInterval(e),f.sockets.emit("wifi-connection",t),r.status(200).json({serverMessage:"Disconnected successfully"})):-1==connectingStatuses.indexOf(t.wpa_state)?(clearInterval(e),f.sockets.emit("wifi-connection",t),r.status(500).send("Error disconnecting")):void 0)}))}),300)}))}})),l.get("/api/admin/crashReport",(function(e,t){var n=".crash";s.readdir(n,(function(e,n){return e?t.status(500).send(e):n.length>0?void s.readFile(".crash/"+n[0],"utf8",(function(s,e){return s?status(500).send("Error reading crash file"):(t.setHeader("Content-disposition","attachment; filename="+n[0]),t.status(200).download(".crash/"+n[0]))})):t.status(200).send("No crash files found")}))}));var a=null;l.post("/api/diagnostics/start",(function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({serverMessage:"Diagnostic tool does not run on windows"});(a=r("sudo",["sh","../../diagnostics/runRemi.sh","../../diagnostics/diagnosticGUI.py"])).stdout.on("data",(function(s){u.info(String(s))})),a.stderr.on("data",(function(s){u.info(String(s))}));var i=1,o=setInterval((function(){if(!(i<=3))return clearInterval(o),n.status(500).send("Error starting diagnostic tool");var e=t.exec("ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}'",{silent:!0}).stdout;if(e)return clearInterval(o),g.SocketVariables.fusion_diagnostics_running={process:e,socket:s.body.socketId},f.sockets.emit("diagnostics_running",g.SocketVariables.fusion_diagnostics_running),n.status(200).json({serverMessage:"Diagnostic tool started successfully"});i++}),300)})),l.get("/api/diagnostics/stop",(function(s,n){if("raspberrypi"!=e.hostname())return n.status(200).json({serverMessage:"Diagnostic tool does not run on windows"});t.exec("sudo kill $(ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}')",{silent:!0}),t.exec("ps aux | grep '[s]udo python ../../diagnostics/diagnosticGUI.py' | awk '{print $2}'",{silent:!0},(function(s,e,t){e.trim().trim()?n.status(500).send("Unable to stop diagnostic tool"):(g.SocketVariables.fusion_diagnostics_running=null,f.sockets.emit("diagnostics_running",g.SocketVariables.fusion_diagnostics_running),a=null,n.status(200).json({serverMessage:"Diagnostic tool stopped successfully"}))}))})),l.get("/api/autonomous",(async function(s,e){try{const s=await o.findOne().exec();return e.json(s)}catch(s){return e.status(500).send(error.message)}})),l.post("/api/autonomous",(async function(s,e){try{await o.findOneAndUpdate({},s.body);return e.status(200).json({serverMessage:"Updated successfully"})}catch(s){return e.status(500).send(s.message)}})),l.post("/api/autonomousPrograms",(async function(e,t){try{const n=e.body.username,i=e.body.type,r=await s.readdir(`./app/filesystem/${n}/${i}`);return t.status(200).json({files:r})}catch(s){return t.status(500).send(s.message)}}))}()}();