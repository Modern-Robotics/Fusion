!function(){const r=require("../utils/logger"),n=require("../socket"),o=require("../global/fusionSettings"),e=require("child_process").spawn,t=require("shelljs"),i=require("os"),s=require("path"),a=require("./../events");require("./../utils/display");let u=null;module.exports=function(){var g=function(){};function l(t,i){let g=`import os\nos.chdir('./app/filesystem/${i}/Editor')\nimport imp\nimp.load_source('util', r'${s.resolve(t)}')`;u=e("python",["-u","-B","-c",g],{stdio:"pipe"}),n.sockets.emit("program-running",o.SocketVariables.fusion_program_running),a.emit("program-running",!0),c(),u.stdout.on("data",(function(o){r.verbose(String(o).substring(0,o.lastIndexOf("\n"))),n.emit("console-output",{output:String(o)})})),u.stderr.on("data",(function(e){r.verbose(String(e).substring(0,e.lastIndexOf("\n"))),n.emit("console-output",{output:String(e)}),n.sockets.emit("program-running",o.SocketVariables.fusion_program_running),n.sockets.emit("gamepad-available",!1)})),u.stdout.on("close",(function(e){o.SocketVariables.fusion_program_running=null,r.verbose(String("> Program Finished!")),n.emit("console-output",{output:String("> Program Finished!\n")}),n.sockets.emit("program-running",o.SocketVariables.fusion_program_running),n.sockets.emit("gamepad-available",!1),a.emit("program-running",!1)}))}function m(t,s){let g=`import os\nos.chdir('./app/filesystem/${s}/Blockly')\nimport imp\n${t}`;u=(i.hostname(),e("python",["-u","-B","-c",g],{stdio:"pipe"})),n.sockets.emit("program-running",o.SocketVariables.fusion_program_running),a.emit("program-running",!0),c(),u.stdout.on("data",(function(o){r.verbose(String(o).substring(0,o.lastIndexOf("\n"))),n.emit("blockly-console-output",{output:String(o)})})),u.stderr.on("data",(function(e){r.verbose(String(e).substring(0,e.lastIndexOf("\n"))),n.emit("blockly-console-output",{output:String(e)}),n.sockets.emit("program-running",o.SocketVariables.fusion_program_running),n.sockets.emit("gamepad-available",!1)})),u.stdout.on("close",(function(e){o.SocketVariables.fusion_program_running=null,r.verbose(String("> Program Finished!")),n.emit("blockly-console-output",{output:String("> Program Finished!\n")}),n.sockets.emit("program-running",o.SocketVariables.fusion_program_running),n.sockets.emit("gamepad-available",!1),a.emit("program-running",!1)}))}function c(){"raspberrypi"==i.hostname()&&setTimeout((function(){var r=t.exec("sudo netstat -panp | grep 5000 | grep LISTEN",{silent:!0}).stdout;o.SocketVariables.fusion_gamepad_available=!!r,n.sockets.emit("gamepad-available",o.SocketVariables.fusion_gamepad_available)}),1e3)}return g.StartProgram=function(n,e,t){if(o.SocketVariables.fusion_program_running){if(o.SocketVariables.fusion_program_running.User==n||"autonomous"==o.SocketVariables.fusion_program_running.SocketId){try{u.kill("SIGINT")}catch(r){}return o.SocketVariables.fusion_program_running={Code:null,Program:e,SocketId:t,User:n},l(e,n),r.verbose("Program is now running"),{status:200,message:"Program is now running"}}return r.verbose("Program already running"),{status:500,message:"Program already running"}}return o.SocketVariables.fusion_program_running={Code:null,Program:e,SocketId:t,User:n},l(e,n),r.verbose("Program is now running"),{status:200,message:"Program is now running"}},g.StopProgram=function(n){if(o.SocketVariables.fusion_program_running){if(o.SocketVariables.fusion_program_running.User==n||"autonomous"==o.SocketVariables.fusion_program_running.SocketId){o.SocketVariables.fusion_program_running=null;try{u.kill("SIGINT")}catch(r){}return r.verbose("Program is now stopped"),{status:200,message:"Program Successfully Stopped"}}return r.verbose("Cannot stop another user program"),{status:500,message:"Cannot stop another user's program."}}return r.verbose("No program running"),{status:500,message:"No Program Running"}},g.KillProgram=function(){o.SocketVariables.fusion_program_running=null;try{u.kill("SIGINT")}catch(r){}r.verbose("Program is now stopped")},g.StartBlocklyProgram=function(n,e,t){if(o.SocketVariables.fusion_program_running){if(o.SocketVariables.fusion_program_running.User==e||"autonomous"==o.SocketVariables.fusion_program_running.SocketId){try{u.kill("SIGINT")}catch(r){}return o.SocketVariables.fusion_program_running={Code:n,Program:null,SocketId:t,User:e},m(n,e),r.verbose("Blockly Program is now running"),{status:200,message:"Blockly Program is now running"}}return r.verbose("Program already running"),{status:500,message:"Program already running"}}return o.SocketVariables.fusion_program_running={Code:n,Program:null,SocketId:t,User:e},m(n,e),r.verbose("Blockly Program is now running"),{status:200,message:"Blockly Program is now running"}},g.sendInput=function(r){u.stdin.write(r+"\n")},g}()}();