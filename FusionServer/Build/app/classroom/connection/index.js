!function(){const t=require("config"),e=require("../../utils/logger"),n=require("request-promise"),o=require("wireless-tools/wpa_cli"),a=require("getmac"),i=require("shelljs"),r=require("./../../utils/wireless"),s=require("fs-extra"),c=require("path");let u={wifiInterface:t.get("Wifi_NIC"),currentNetwork:0,networks:t.get("Classroom.Networks"),serial:null,wifiStatus:null,fallbackNetwork:null};const w={connected:!1,connect:async function(){u.fallBackNetwork=await async function(){return new Promise(((t,n)=>(null?e.debug("Storing fallback network"):e.warn("No fallback network found"),t(null))))}(),u.serial=await new Promise(((t,n)=>{a.getMac({iface:"eth0"},(function(o,a){if(o)return n(o.message);{let n=a.split(":").join("").substr(-6);return e.debug("Fusion serial number: "+n),t(n)}}))})),u.wifiStatus=await new Promise(((t,n)=>{o.status(u.wifiInterface,(function(o,a){return o?n("Error accessing network interface: "+o):(e.debug("Wifi interface status: "+JSON.stringify(a)),t(a))}))})),await async function(){try{const t=c.join(__dirname,"./../../../../../etc/MMCNetworks.json"),n=await s.readJSON(t),o=u.networks.concat(n);u.networks=o,e.info("Classroom connection list found and imported.")}catch(t){"ENOENT"==t.code?e.warn("No classroom connection list found"):e.warn("Cannot read classroom connection list due to improper formatting.")}}(),await async function(){let t=u.wifiStatus.ssid;t&&(u.networks=u.networks.filter((function(e){return e.hiddenSSID!=t})))}(),await l()}};async function l(){const t="ip route show | grep -i '"+u.wifiInterface+"  metric' | awk '{print $3}'",o=await i.exec(t,{silent:!0}).stdout.trim();try{if(!o)throw"Gateway Unavailable";e.debug("Gateway found at: "+o);let t={uri:"https://"+o+":8443/api/v1/connect/"+u.serial,rejectUnauthorized:!1,json:!0,timeout:5e3},a=await n(t);e.debug(JSON.stringify(a));let i=!1;if(a.data&&(i=a.data.community_access),i){let t={ssid:a.wifi.ssid,passphrase:a.wifi.passphrase};await async function(t){u.wifiStatus.ssid==t.ssid?(e.debug("Already connected to classroom network"),await d()):(e.debug("Not connected to classroom network"),await async function(t){try{e.debug("Connecting to classroom: "+t.ssid);let n={ssid:t.ssid,password:t.passphrase,hidden:!1};await r.connectToNetwork(n),await d()}catch(t){e.warn("Error connecting to classroom network: "+t)}}(t))}(t)}else e.debug("Not part of the classroom community"),await f()}catch(t){e.warn("Unable to reach classroom community: "+t),await f()}}async function d(){e.debug("Connecting classroom socket communication"),await require("../sockets"),w.connected=!0}async function f(){e.debug("Trying next hidden classroom network");let t=await async function(){let t=null;u.currentNetwork<u.networks.length&&(t=u.networks[u.currentNetwork++]);return t}();t?(e.debug("Next network is: "+t.hiddenSSID),await async function(t){try{e.debug("Connecting to hidden classroom: "+t.hiddenSSID);let n={ssid:t.hiddenSSID,password:t.hiddenPassword,hidden:!0};await r.connectToNetwork(n),e.debug("On hidden network, rechecking community access"),await l()}catch(t){e.warn(t),await f()}}(t)):(e.debug("No more networks to try. Restoring fallback network"),await async function(){e.debug("Checking for fallback network"),u.fallbackNetwork?e.debug("Fallback network found: "+u.fallbackNetwork):e.warn("No fallback network found")}())}module.exports=w}();