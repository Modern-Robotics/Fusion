!function(){const t=require("config"),e=require("../../utils/logger"),n=require("request-promise"),a=require("wireless-tools/wpa_cli"),i=require("getmac"),o=require("shelljs"),r=require("./../../utils/wireless"),s=require("fs-extra"),c=require("path");let l={wifiInterface:t.get("Wifi_NIC"),currentNetwork:0,networks:t.get("Classroom.Networks"),serial:null,wifiStatus:null,fallBackNetwork:null};const w={connected:!1,connect:async function(){l.wifiStatus=await u(),l.fallBackNetwork=await async function(){return new Promise(((t,n)=>{let a=null,i=l.wifiStatus.ssid;if(i){e.debug("Retrieving fallback network");let t=o.exec("awk 'BEGIN { FS=\"=\" } /\tpsk/ { print $2 }' /etc/wpa_supplicant/wpa_supplicant.conf | tr -d '\"'",{silent:!0}).trim(),n=!1;1==o.exec("awk 'BEGIN { FS=\"=\" } /scan_ssid/ { print $2 }' /etc/wpa_supplicant/wpa_supplicant.conf | tr -d '\"'",{silent:!1}).trim()&&(n=!0),a={ssid:i,password:t,hidden:n},e.debug("Fallback network: "+JSON.stringify(a))}else e.warn("No fallback network found");return t(a)}))}(),l.serial=await new Promise(((t,n)=>{i.getMac({iface:"eth0"},(function(a,i){if(a)return n(a.message);{let n=i.split(":").join("").substr(-6);return e.debug("Fusion serial number: "+n),t(n)}}))})),await async function(){try{const t=c.join(__dirname,"./../../../../../etc/MMCNetworks.json"),n=await s.readJSON(t),a=l.networks.concat(n);l.networks=a,e.info("Classroom connection list found and imported.")}catch(t){"ENOENT"==t.code?e.warn("No classroom connection list found"):e.warn("Cannot read classroom connection list due to improper formatting.")}}(),await async function(){let t=l.wifiStatus.ssid;t&&(l.networks=l.networks.filter((function(e){return e.hiddenSSID!=t})))}(),await d()}};function u(){return new Promise(((t,n)=>{a.status(l.wifiInterface,(function(a,i){return a?n("Error accessing network interface: "+a):(e.debug("Wifi interface status: "+JSON.stringify(i)),t(i))}))}))}async function d(){const t=await o.exec("ip r | grep default | awk '{print $3}'",{silent:!0}).stdout.trim();try{if(!t)throw"Gateway Unavailable";e.debug("Gateway found at: "+t);let a={uri:"https://"+t+":8443/api/v1/connect/"+l.serial,rejectUnauthorized:!1,json:!0,timeout:5e3},i=await n(a);e.debug(JSON.stringify(i));let o=!1;if(i.data&&(o=i.data.community_access),o){let t={ssid:i.wifi.ssid,passphrase:i.wifi.passphrase};await async function(t){l.wifiStatus.ssid==t.ssid?(e.debug("Already connected to classroom network"),await f()):(e.debug("Not connected to classroom network"),await async function(t){try{e.debug("Connecting to classroom: "+t.ssid);let n={ssid:t.ssid,password:t.passphrase,hidden:!1};await r.connectToNetwork(n),await f()}catch(t){e.warn("Error connecting to classroom network: "+t)}}(t))}(t)}else e.debug("Not part of the classroom community"),await k()}catch(t){e.warn("Unable to reach classroom community: "+t),await k()}}async function f(){e.debug("Connecting classroom socket communication"),await require("../sockets"),w.connected=!0}async function k(){e.debug("Trying next hidden classroom network");let t=await async function(){let t=null;l.currentNetwork<l.networks.length&&(t=l.networks[l.currentNetwork++]);return t}();t?(e.debug("Next network is: "+t.hiddenSSID),await async function(t){try{e.debug("Connecting to hidden classroom: "+t.hiddenSSID);let n={ssid:t.hiddenSSID,password:t.hiddenPassword,hidden:!0};await r.connectToNetwork(n),e.debug("On hidden network, rechecking community access"),await d()}catch(t){e.warn(t),await k()}}(t)):(e.debug("No more networks to try. Restoring fallback network"),await async function(){e.debug("Checking for fallback network"),l.fallBackNetwork?(e.debug("Fallback network found: "+l.fallBackNetwork.ssid),(await u()).ssid!=l.fallBackNetwork.ssid?await r.connectToNetwork(l.fallBackNetwork):e.debug("Already on fallback network")):e.warn("No fallback network found")}())}module.exports=w}();