{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the Fusion Documentation Suite\n\n\n\n\nThe Fusion Documentation Suite contains comprehensive user guides and reference materials so that you have all the important information right at your fingertips.  \n\n\nUse the \nSearch Fusion Docs\n in the top right corner of the screen to search any questions you may have. If you can't find the solution to your problem, email us at \nsupport@modernroboticsinc.com\n.\n\n\n\n\nDon't know what you need? Select from the topics below\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContact Modern Robotics, Inc.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-fusion-documentation-suite",
            "text": "The Fusion Documentation Suite contains comprehensive user guides and reference materials so that you have all the important information right at your fingertips.    Use the  Search Fusion Docs  in the top right corner of the screen to search any questions you may have. If you can't find the solution to your problem, email us at  support@modernroboticsinc.com .",
            "title": "Welcome to the Fusion Documentation Suite"
        },
        {
            "location": "/#dont-know-what-you-need-select-from-the-topics-below",
            "text": "Contact Modern Robotics, Inc.",
            "title": "Don't know what you need? Select from the topics below"
        },
        {
            "location": "/Getting_Started_Topic/",
            "text": "Getting Started Guide\n\n\n\n\n\n\nThe Fusion Controller is the heart of the Fusion System, and is fully loaded with all the applications, tools, resources, and documentation you need.  In the event that you need a little help getting started, here\u2019s some basic guidance:\n\n\n\n\n1.\n \nConnect USB Power\n\n\n2.\n \nConnect Battery Power\n\n\n3.\n \nFind/Connect Fusion Access Point\n\n\n4.\n \nAccessing the Fusion Web Interface\n\n\n5.\n \nCreate a new account\n\n\n6.\n \nCreate a Blockly Program\n\n\n7.\n \nCreate an Editor Program\n\n\n\n\nTroubleshooting\n\n\n\n\n1.\n \nMissing Items from Fusion System\n\n\n2.\n \nFusion will not turn on\n\n\n3.\n \nWhat if status LED does not stop flashing?",
            "title": "Getting Started Guide"
        },
        {
            "location": "/Getting_Started_Topic/#getting-started-guide",
            "text": "The Fusion Controller is the heart of the Fusion System, and is fully loaded with all the applications, tools, resources, and documentation you need.  In the event that you need a little help getting started, here\u2019s some basic guidance:   1.   Connect USB Power  2.   Connect Battery Power  3.   Find/Connect Fusion Access Point  4.   Accessing the Fusion Web Interface  5.   Create a new account  6.   Create a Blockly Program  7.   Create an Editor Program",
            "title": "Getting Started Guide"
        },
        {
            "location": "/Getting_Started_Topic/#troubleshooting",
            "text": "1.   Missing Items from Fusion System  2.   Fusion will not turn on  3.   What if status LED does not stop flashing?",
            "title": "Troubleshooting"
        },
        {
            "location": "/Fusion_Controller_Topic/",
            "text": "Fusion Controller Guide/Reference\n\n\n\n\n\n\nThe Fusion Controller is a brilliant backpack board combined with the power of the Raspberry Pi 3, built into a robust and durable housing. The Fusion comes with a wide assortment of connectors capable of supporting motors, servos and various types of sensors.  \n\nConnect to the Fusion with a web browser on any device that has Wi-Fi. Program the robot using a visual block programming environment called \nBlockly\n, or test your skills in programming languages such as Python in our \nEditor\n environment.\n\n\nHow To:\n\n\n\n\n1.\n \nConnect to USB Power\n\n\n2.\n \nConnect to Battery Power\n\n\n3.\n \nCharge the Fusion Battery\n\n\n4.\n \nPower the Fusion On\n\n\n5.\n \nPower the Fusion Off\n\n\n6.\n \nRestore the Fusion Access Point\n\n\n\n\nController Layout:\n\n\n\n\n\n\nThe programmable Fusion Controller includes connection ports for a wide variety of motors, sensors, servos, and devices.  This section outlines the basic features of the Fusion Controller and provides detailed programming and reference information to help you use each of the different ports in you designs.\n\n\n\n\n2\n On Board LEDs\n\n\n8\n Digital Ports\n\n\n8\n Analog Ports\n\n\n4\n I2C Ports\n\n\n2\n Motor Ports\n\n\n4\n Servo Ports\n\n\n\n\nThere is a green LED that blinks when the Fusion is turning on or off. A red LED is turned on if an error is detected and blinks when the battery power is low.\n\n\nMore Information:\n\n\n1.\n \nDigital Ports\n\n\n2.\n \nAnalog Ports\n\n\n3.\n \nOn Board LEDs\n\n\n4.\n \nI2C Ports\n\n\n5.\n \nMotor Ports\n\n\n6.\n \nServo Ports\n\n\n7.\n \nBattery Port\n\n\n8.\n \nBattery Charger Port\n\n\n9.\n \nUSB Power Port\n\n\n10.\n \nPower Button ON\n\n\n11.\n \nPower Button OFF\n\n\n12.\n \nUSB Hub\n\n\n13.\n \nEthernet Port\n\n\n14.\n \nWi-Fi\n\n\n15.\n \nSD Card",
            "title": "Fusion Controller Guide"
        },
        {
            "location": "/Fusion_Controller_Topic/#fusion-controller-guidereference",
            "text": "The Fusion Controller is a brilliant backpack board combined with the power of the Raspberry Pi 3, built into a robust and durable housing. The Fusion comes with a wide assortment of connectors capable of supporting motors, servos and various types of sensors.   \nConnect to the Fusion with a web browser on any device that has Wi-Fi. Program the robot using a visual block programming environment called  Blockly , or test your skills in programming languages such as Python in our  Editor  environment.",
            "title": "Fusion Controller Guide/Reference"
        },
        {
            "location": "/Fusion_Controller_Topic/#how-to",
            "text": "1.   Connect to USB Power  2.   Connect to Battery Power  3.   Charge the Fusion Battery  4.   Power the Fusion On  5.   Power the Fusion Off  6.   Restore the Fusion Access Point",
            "title": "How To:"
        },
        {
            "location": "/Fusion_Controller_Topic/#controller-layout",
            "text": "The programmable Fusion Controller includes connection ports for a wide variety of motors, sensors, servos, and devices.  This section outlines the basic features of the Fusion Controller and provides detailed programming and reference information to help you use each of the different ports in you designs.   2  On Board LEDs  8  Digital Ports  8  Analog Ports  4  I2C Ports  2  Motor Ports  4  Servo Ports   There is a green LED that blinks when the Fusion is turning on or off. A red LED is turned on if an error is detected and blinks when the battery power is low.  More Information:  1.   Digital Ports  2.   Analog Ports  3.   On Board LEDs  4.   I2C Ports  5.   Motor Ports  6.   Servo Ports  7.   Battery Port  8.   Battery Charger Port  9.   USB Power Port  10.   Power Button ON  11.   Power Button OFF  12.   USB Hub  13.   Ethernet Port  14.   Wi-Fi  15.   SD Card",
            "title": "Controller Layout:"
        },
        {
            "location": "/Web_Interface_Topic/",
            "text": "Web Interface Guide\n\n\n\n\n\n\nProgram Development and operation of the Fusion System is all performed through a built-in Web-based Graphical User Interface (WebGUI). This section provides an overview of the Fusion when interface features and operation. It also includes links to the reference guides for the various environments you can use to develop programs or change settings on your Fusion.\n\n\n\n\n1.\n \nFind/Connect Fusion Access Point\n\n\n2.\n \nAccessing the Fusion Web Interface\n\n\n3.\n \nCreate a new account\n\n\n4.\n \nDelete an account\n\n\n5.\n \nEdit an account\n\n\n6.\n \nChange Fusion Access Point SSID and Passkey\n\n\n7.\n \nRestore Fusion Access Point\n\n\n8.\n \nConnect to the Internet\n\n\n9.\n \nUpdate the Fusion\n\n\n10.\n \nHow to use Blockly\n\n\n11.\n \nHow to use Editor",
            "title": "Web Interface Guide"
        },
        {
            "location": "/Web_Interface_Topic/#web-interface-guide",
            "text": "Program Development and operation of the Fusion System is all performed through a built-in Web-based Graphical User Interface (WebGUI). This section provides an overview of the Fusion when interface features and operation. It also includes links to the reference guides for the various environments you can use to develop programs or change settings on your Fusion.   1.   Find/Connect Fusion Access Point  2.   Accessing the Fusion Web Interface  3.   Create a new account  4.   Delete an account  5.   Edit an account  6.   Change Fusion Access Point SSID and Passkey  7.   Restore Fusion Access Point  8.   Connect to the Internet  9.   Update the Fusion  10.   How to use Blockly  11.   How to use Editor",
            "title": "Web Interface Guide"
        },
        {
            "location": "/Blockly_Topic/",
            "text": "Blockly Reference Guide\n\n\n\n\n\n\nBlockly is a visual programming environment designed for beginner programmers aimed to teach programming techniques. Blocky for Fusion comes with \nBasic\n and \nIntermediate\n modes which adds another level of complexity.\n\nBasic Blockly comes with blocks to control the motors which will drive and rotate the robot. There are also blocks to toggle the on-board yellow and blue LEDs on and off.\n\nIntermedaite mode comes with more complex blocks to control motors independently, control servos and our entire range of sensors.\n\n\n\n\n\n1) \nProgram Environment\n  \n\n\n\n\n\n\nThis is the space where blocks are placed and connected to create programs.\n\n\nThere are both vertical and horizontal scrolling bars for navigating larger programs.\n\n\nThe icons in the bottom right are used to help you view your environment and delete blocks.\n\n\n\n\nThe \nreticle\n is used to center the block program within the program environment.\n\n\nThe \n+\n icon is used to zoom in on the program.\n\n\nThe \n-\n icon is used to zoom out from the program. \n\n\nThe \ntrashcan\n icon is used to delete a block or chunk of blocks by dragging the blocks over the trashcan.\n\n\n\n\n\n\n\n\n\n\n\n\n2) \nToolbox\n\n\n\n\n\n\nContains all available programming blocks organized by category.\n\n\n\n\n\n\n3) \nProgram Output\n \n\n\n\n\n\n\nThis window can be toggled on and off.\n\n\nDisplays the output of the program like a print block or a controller generated error.\n\n\n\n\n\n\n4) \nCode Window\n\n\n\n\n\n\nThis window can be toggled on and off.\n\n\nDisplays the Python code that is produced by the blocks. This code can be copied, pasted and run directly from the \nEditor\n.\n\n\n\n\n\n\n5) \nProgram Name\n\n\n\n\n\n\nThe name of the current active program.\n\n\nAll files are given the extension of \n.blk\n.\n\n\nIf a \n*\n is next to the name of the program, then the program has been changed and not saved.\n\n\n\n\n\n\n6) \nToolbar\n\n\n\n\n\n\nFile\n - Gives the option to Create, Open, Close, Save and Delete a program.\n\n\nView\n - Switch modes between Basic and Intermediate, also to show/hide the Program Output and Code Window.\n\n\nManage\n - Import or Export a Blockly file.\n\n\nPlay\n - Start running the current program. If selected while a program is already running, the running program will stop and the current program will start running.\n\n\nStop\n - Stops the current program. The Program Output returns information about when the program stopped.\n\n\nHelp\n - Access controller and sensor examples as well as a link to the documentation.\n\n\n\n\n\n\n\n\nUse Guide\n\n\n\n\n1.\n \nCreate a program (Basic & Intermediate)\n\n\n\n\nBasic Block Reference\n\n\n\n\n1.\n \nControl Robot\n\n\n2.\n \nMove Robot\n\n\n3.\n \nRotate Robot\n\n\n\n\nIntermediate Block Reference\n\n\n\n\n1.\n \nControl Robot\n\n\n2.\n \nMotor Control\n\n\n3.\n \nServo Control\n\n\n4.\n \nAnalog/Digital Sensors\n\n\n5.\n \nCompass (45-2003)\n\n\n6.\n \nRate Gyro (45-2004)\n\n\n7.\n \nIntegrating Gyro (45-2005)\n\n\n8.\n \nOptical Distance Sensor (45-2006)\n\n\n9.\n \nTouch Sensor (45-2007)\n\n\n10.\n \nRange Sensor (45-2008)\n\n\n11.\n \nInfrared Locator 360\u00b0 (45-2009)\n\n\n12.\n \nLight Sensor (45-2015)\n\n\n13.\n \nSound Generator (45-2016)\n\n\n14.\n \nInfrared Seeker V3 (45-2017)\n\n\n15.\n \nColor Sensor (45-2018)\n\n\n16.\n \nColor Beacon (45-2019)\n\n\n17.\n \nMagnetic Sensor(45-2020)\n\n\n18.\n \nTime\n\n\n19.\n \nLogic\n\n\n20.\n \nLoops\n\n\n21.\n \nText\n\n\n22.\n \nVariables",
            "title": "Blockly Topic"
        },
        {
            "location": "/Blockly_Topic/#blockly-reference-guide",
            "text": "Blockly is a visual programming environment designed for beginner programmers aimed to teach programming techniques. Blocky for Fusion comes with  Basic  and  Intermediate  modes which adds another level of complexity. \nBasic Blockly comes with blocks to control the motors which will drive and rotate the robot. There are also blocks to toggle the on-board yellow and blue LEDs on and off. \nIntermedaite mode comes with more complex blocks to control motors independently, control servos and our entire range of sensors.   1)  Program Environment       This is the space where blocks are placed and connected to create programs.  There are both vertical and horizontal scrolling bars for navigating larger programs.  The icons in the bottom right are used to help you view your environment and delete blocks.   The  reticle  is used to center the block program within the program environment.  The  +  icon is used to zoom in on the program.  The  -  icon is used to zoom out from the program.   The  trashcan  icon is used to delete a block or chunk of blocks by dragging the blocks over the trashcan.       2)  Toolbox    Contains all available programming blocks organized by category.    3)  Program Output      This window can be toggled on and off.  Displays the output of the program like a print block or a controller generated error.    4)  Code Window    This window can be toggled on and off.  Displays the Python code that is produced by the blocks. This code can be copied, pasted and run directly from the  Editor .    5)  Program Name    The name of the current active program.  All files are given the extension of  .blk .  If a  *  is next to the name of the program, then the program has been changed and not saved.    6)  Toolbar    File  - Gives the option to Create, Open, Close, Save and Delete a program.  View  - Switch modes between Basic and Intermediate, also to show/hide the Program Output and Code Window.  Manage  - Import or Export a Blockly file.  Play  - Start running the current program. If selected while a program is already running, the running program will stop and the current program will start running.  Stop  - Stops the current program. The Program Output returns information about when the program stopped.  Help  - Access controller and sensor examples as well as a link to the documentation.",
            "title": "Blockly Reference Guide"
        },
        {
            "location": "/Blockly_Topic/#use-guide",
            "text": "1.   Create a program (Basic & Intermediate)",
            "title": "Use Guide"
        },
        {
            "location": "/Blockly_Topic/#basic-block-reference",
            "text": "1.   Control Robot  2.   Move Robot  3.   Rotate Robot",
            "title": "Basic Block Reference"
        },
        {
            "location": "/Blockly_Topic/#intermediate-block-reference",
            "text": "1.   Control Robot  2.   Motor Control  3.   Servo Control  4.   Analog/Digital Sensors  5.   Compass (45-2003)  6.   Rate Gyro (45-2004)  7.   Integrating Gyro (45-2005)  8.   Optical Distance Sensor (45-2006)  9.   Touch Sensor (45-2007)  10.   Range Sensor (45-2008)  11.   Infrared Locator 360\u00b0 (45-2009)  12.   Light Sensor (45-2015)  13.   Sound Generator (45-2016)  14.   Infrared Seeker V3 (45-2017)  15.   Color Sensor (45-2018)  16.   Color Beacon (45-2019)  17.   Magnetic Sensor(45-2020)  18.   Time  19.   Logic  20.   Loops  21.   Text  22.   Variables",
            "title": "Intermediate Block Reference"
        },
        {
            "location": "/Editor_Topic/",
            "text": "Editor Reference Guide\n\n\n\n\n\n\nThe Editor is a web-based Integrated Development Environment (IDE) targeted to more advanced users. The programming language Fusion currently supports is Python, but will soon support other languages.\n\nA basic understanding of text-based coding and the syntax for the selected programming language is needed to use the Editor IDE.\n\n\n\n\n\n1) \nProgram Environment\n\n\n\n\n\n\nThis is the space which contains the user code. This space supports syntax highlighting for the selected language.\n\n\n\n\n\n\n2) \nWorking Files\n\n\n\n\n\n\nContains a list of open files. Files can be easily switched between without any loss of data. \n\n\n\n\n\n\n3) \nProgram Output\n \n\n\n\n\n\n\nDisplays the output of the program like a print block or a controller generated error.\n\n\n\n\n\n\n4) \nProgram Name\n\n\n\n\n\n\nThe name of the current active program.\n\n\nAll files are given the extension of \n.py\n.\n\n\nIf a * is next to the name of the program, then the program has been changed and not saved.\n\n\n\n\n\n\n5) \nToolbar\n\n\n\n\n\n\nFile\n - Gives the option to Create, Open, Close, Save and Delete a program.\n\n\nManage\n - Import or Export a file or change the programming language.\n\n\nPlay\n - Start running the current program. If selected while a program is already running, the running program will stop and the current program will start running.\n\n\nStop\n - Stops the current program. The Program Output returns information about when the program stopped.\n\n\nHelp\n - Access controller and sensor examples as well as a link to the documentation.\n\n\n\n\n\n\n\n\nUse Guide\n\n\n\n\n1.\n \nCreate a program\n\n\n\n\nPython Library Reference\n\n\n\n\nThe Fusion Python Library was developed by Modern Robotics engineers to control the Fusion Controller, motors, servos and Modern Robotics sensors. All available functions are documented and explained throughly in this document. Fusion uses Python 2.7.\n\n\n\n\n1.\n \nConstants\n\n\n2.\n \nFusion Driver\n\n\n3.\n \nMotor Control\n\n\n4.\n \nServo Control\n\n\n5.\n \nCompass (45-2003)\n\n\n6.\n \nRate Gyro (45-2004)\n\n\n7.\n \nIntegrating Gyro (45-2005)\n\n\n8.\n \nOptical Distance Sensor (45-2006)\n\n\n9.\n \nTouch Sensor (45-2007)\n\n\n10.\n \nRange Sensor (45-2008)\n\n\n11.\n \nInfrared Locator 360\u00b0 (45-2009)\n\n\n12.\n \nLight Sensor (45-2015)\n\n\n13.\n \nSound Generator (45-2016)\n\n\n14.\n \nInfrared Seeker V3 (45-2017)\n\n\n15.\n \nColor Sensor (45-2018)\n\n\n16.\n \nColor Beacon (45-2019)\n\n\n17.\n \nMagnetic Sensor(45-2020)",
            "title": "Editor Topic"
        },
        {
            "location": "/Editor_Topic/#editor-reference-guide",
            "text": "The Editor is a web-based Integrated Development Environment (IDE) targeted to more advanced users. The programming language Fusion currently supports is Python, but will soon support other languages. \nA basic understanding of text-based coding and the syntax for the selected programming language is needed to use the Editor IDE.   1)  Program Environment    This is the space which contains the user code. This space supports syntax highlighting for the selected language.    2)  Working Files    Contains a list of open files. Files can be easily switched between without any loss of data.     3)  Program Output      Displays the output of the program like a print block or a controller generated error.    4)  Program Name    The name of the current active program.  All files are given the extension of  .py .  If a * is next to the name of the program, then the program has been changed and not saved.    5)  Toolbar    File  - Gives the option to Create, Open, Close, Save and Delete a program.  Manage  - Import or Export a file or change the programming language.  Play  - Start running the current program. If selected while a program is already running, the running program will stop and the current program will start running.  Stop  - Stops the current program. The Program Output returns information about when the program stopped.  Help  - Access controller and sensor examples as well as a link to the documentation.",
            "title": "Editor Reference Guide"
        },
        {
            "location": "/Editor_Topic/#use-guide",
            "text": "1.   Create a program",
            "title": "Use Guide"
        },
        {
            "location": "/Editor_Topic/#python-library-reference",
            "text": "The Fusion Python Library was developed by Modern Robotics engineers to control the Fusion Controller, motors, servos and Modern Robotics sensors. All available functions are documented and explained throughly in this document. Fusion uses Python 2.7.   1.   Constants  2.   Fusion Driver  3.   Motor Control  4.   Servo Control  5.   Compass (45-2003)  6.   Rate Gyro (45-2004)  7.   Integrating Gyro (45-2005)  8.   Optical Distance Sensor (45-2006)  9.   Touch Sensor (45-2007)  10.   Range Sensor (45-2008)  11.   Infrared Locator 360\u00b0 (45-2009)  12.   Light Sensor (45-2015)  13.   Sound Generator (45-2016)  14.   Infrared Seeker V3 (45-2017)  15.   Color Sensor (45-2018)  16.   Color Beacon (45-2019)  17.   Magnetic Sensor(45-2020)",
            "title": "Python Library Reference"
        },
        {
            "location": "/Robot_Building_Topic/",
            "text": "Robot Building",
            "title": "Robot Building Guide"
        },
        {
            "location": "/Robot_Building_Topic/#robot-building",
            "text": "",
            "title": "Robot Building"
        },
        {
            "location": "/Missing_Items/",
            "text": "Missing items from your Fusion?\n\n\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed list of the items you are missing. Include description of the missing parts along with the part number and order number will help us better serve you. \n\n\n\n\nEmail Subject\n: Fusion Missing Items",
            "title": "Missing Items"
        },
        {
            "location": "/Missing_Items/#missing-items-from-your-fusion",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed list of the items you are missing. Include description of the missing parts along with the part number and order number will help us better serve you.    Email Subject : Fusion Missing Items",
            "title": "Missing items from your Fusion?"
        },
        {
            "location": "/Connect_USB_Power/",
            "text": "Connect USB power\n\n\n\n\n\n\nConnect Fusion with supplied USB cable\n\n\n\n\nThe USB cable included with you Fusion is a USB-Micro to USB-A cable. \n\n\nThe micro end of the cable connects to the Fusion via the USB-Micro port on the side of the controller. This port is for power only and does not transfer any data. The standard USB-A end of the cable connects to the computer or power supply capable of 5V at a minimum of 500mA.\n\n\nOnce connected, a green LED near the Micro USB port will illuminate to show that the Fusion is connected to power.\n\n\n\n\nTry Another USB-A port\n\n\n\n\nIf the USB LED is not turning on when the USB cable is connected, try connecting the USB-A end of the cable into another USB port.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: FusionUSB Power",
            "title": "Connect USB Power"
        },
        {
            "location": "/Connect_USB_Power/#connect-usb-power",
            "text": "",
            "title": "Connect USB power"
        },
        {
            "location": "/Connect_USB_Power/#connect-fusion-with-supplied-usb-cable",
            "text": "The USB cable included with you Fusion is a USB-Micro to USB-A cable.  \nThe micro end of the cable connects to the Fusion via the USB-Micro port on the side of the controller. This port is for power only and does not transfer any data. The standard USB-A end of the cable connects to the computer or power supply capable of 5V at a minimum of 500mA. \nOnce connected, a green LED near the Micro USB port will illuminate to show that the Fusion is connected to power.",
            "title": "Connect Fusion with supplied USB cable"
        },
        {
            "location": "/Connect_USB_Power/#try-another-usb-a-port",
            "text": "If the USB LED is not turning on when the USB cable is connected, try connecting the USB-A end of the cable into another USB port.",
            "title": "Try Another USB-A port"
        },
        {
            "location": "/Connect_USB_Power/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : FusionUSB Power",
            "title": "If any problems arise"
        },
        {
            "location": "/Power_On/",
            "text": "Power the Fusion on\n\n\n\n\n\n\nFusion Power Button (PWR)\n\n\n\n\nFirst, check to see that you have power connected to either \nUSB\n or an approved \n6V Battery\n.\n\nSimply pressing the power button will cause the LEDs on board to flash, but not turn the Fusion on. The power button must be held down for 2 sec in order to turn on the power and start the system.\n\n\nOnce powered on, a green LED under the Fusion logo will start flashing while the system boots up. This process takes approximately 30 seconds.\n\nWhen the LED stays solid, the systems is ready for use.\n\n\n\n\n\nWhat if it doesn't stop blinking?\n\n\n\n\nIf the Fusion was recently updated, it may take up to 2 minutes for the system boot up process to complete.\n\nIf the LED continues to blink, \npower off\n the Fusion by holding down on the power button until the power LED turns off. Wait a few seconds, before pressing the power button to turn the Fusion back on.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Power Issue",
            "title": "Power On"
        },
        {
            "location": "/Power_On/#power-the-fusion-on",
            "text": "",
            "title": "Power the Fusion on"
        },
        {
            "location": "/Power_On/#fusion-power-button-pwr",
            "text": "First, check to see that you have power connected to either  USB  or an approved  6V Battery . \nSimply pressing the power button will cause the LEDs on board to flash, but not turn the Fusion on. The power button must be held down for 2 sec in order to turn on the power and start the system. \nOnce powered on, a green LED under the Fusion logo will start flashing while the system boots up. This process takes approximately 30 seconds. \nWhen the LED stays solid, the systems is ready for use.",
            "title": "Fusion Power Button (PWR)"
        },
        {
            "location": "/Power_On/#what-if-it-doesnt-stop-blinking",
            "text": "If the Fusion was recently updated, it may take up to 2 minutes for the system boot up process to complete. \nIf the LED continues to blink,  power off  the Fusion by holding down on the power button until the power LED turns off. Wait a few seconds, before pressing the power button to turn the Fusion back on.",
            "title": "What if it doesn't stop blinking?"
        },
        {
            "location": "/Power_On/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Power Issue",
            "title": "If any problems arise"
        },
        {
            "location": "/Power_Off/",
            "text": "Power down the Fusion\n\n\n\n\n\n\nShutdown the Fusion with the on-board power button (PWR)\n\n\n\n\n(\nSoft Shutdown\n)  \n\n\n\n\nThe recommended method to power off the Fusion is to press the power button once when the Status LED is solid. This will send the power off command to the RaspberryPi and safely power down the Fusion.  \n\n\n\n\n(\nHard Shutdown\n) \n\n\n\n\nThe second method to power off the Fusion is to hold down the power button for 4 seconds until the power LED turns off. This can be done at any time, however does not safely shutdown the Fusion and should only be used if the \nsoft shutdown\n did not work.\n\n\n\n\n\n\n\nPowering down the Fusion with the web interface.\n\n\n\n\nThere is also an option to power the Fusion down within the web interface.\n\n\n\n\n\n\nGo to the hamburger menu in the stop left.\n\n\nSelect the power icon to the right of your username.\n\n\nSelect one of the following options:  \n\n\n\n\nLogout\n - Exit the current user account.  \n\n\nPower Off\n - Safely power down the Fusion.  \n\n\nRestart\n - Power down the Fusion and immediately power back on.\n\n\n\n\n\n\n\n\n\n\nPower Off\n and \nRestart\n will disconnect your computer from the Fusion Access Point.\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Power Down",
            "title": "Power Off"
        },
        {
            "location": "/Power_Off/#power-down-the-fusion",
            "text": "",
            "title": "Power down the Fusion"
        },
        {
            "location": "/Power_Off/#shutdown-the-fusion-with-the-on-board-power-button-pwr",
            "text": "( Soft Shutdown )     The recommended method to power off the Fusion is to press the power button once when the Status LED is solid. This will send the power off command to the RaspberryPi and safely power down the Fusion.     ( Hard Shutdown )    The second method to power off the Fusion is to hold down the power button for 4 seconds until the power LED turns off. This can be done at any time, however does not safely shutdown the Fusion and should only be used if the  soft shutdown  did not work.",
            "title": "Shutdown the Fusion with the on-board power button (PWR)"
        },
        {
            "location": "/Power_Off/#powering-down-the-fusion-with-the-web-interface",
            "text": "There is also an option to power the Fusion down within the web interface.    Go to the hamburger menu in the stop left.  Select the power icon to the right of your username.  Select one of the following options:     Logout  - Exit the current user account.    Power Off  - Safely power down the Fusion.    Restart  - Power down the Fusion and immediately power back on.      Power Off  and  Restart  will disconnect your computer from the Fusion Access Point.",
            "title": "Powering down the Fusion with the web interface."
        },
        {
            "location": "/Power_Off/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Power Down",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Find/",
            "text": "Find/Connect Fusion Access Point\n\n\n\n\n\n\nFind default Fusion Access Point\n\n\n\n\nEach Fusion has its own unique access point Service Set Identifier (SSID) assigned to it. The access point starts with \nFusionAP_\n followed by a 6 digit alphanumeric value  unique to each controller. Therefore a valid Fusion Access Point is \nFusionAP_99be01\n.  \n\n\nThis access point can be connected to via Wi-Fi from a device capable of Wi-Fi and browser access (i.e. computer).\nUsing the device's Wi-Fi capabilities, find the Fusion Access Point and connect to it.  \n\n\n\n\nConnect via Windows\n  \n\n\nConnect via Mac\n\n\nConnect via Linux\n  \n\n\nConnect via iOS\n  \n\n\nConnect via Android\n\n\n\n\n\n\nConnect to the default Fusion Access Point\n\n\n\n\nSelect the Fusion Access Point that matches the SSID on the bottom of your controller (also inside box) to the SSID found.\n\nThe default Fusion passkey is \nmrifusion\n.\n\n\nOnce connected, open your web browser (Google Chrome recommended) and follow the steps to \naccess to the web interface\n.\n\n\n\n\nFor instructions on changing the Fusion Access Point SSID and Passkey, refer to \nChange Fusion Access Point\n instructions.\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Find/Connect to Fusion",
            "title": "Find/Connect FusionAP"
        },
        {
            "location": "/AP_Find/#findconnect-fusion-access-point",
            "text": "",
            "title": "Find/Connect Fusion Access Point"
        },
        {
            "location": "/AP_Find/#find-default-fusion-access-point",
            "text": "Each Fusion has its own unique access point Service Set Identifier (SSID) assigned to it. The access point starts with  FusionAP_  followed by a 6 digit alphanumeric value  unique to each controller. Therefore a valid Fusion Access Point is  FusionAP_99be01 .    This access point can be connected to via Wi-Fi from a device capable of Wi-Fi and browser access (i.e. computer).\nUsing the device's Wi-Fi capabilities, find the Fusion Access Point and connect to it.     Connect via Windows     Connect via Mac  Connect via Linux     Connect via iOS     Connect via Android",
            "title": "Find default Fusion Access Point"
        },
        {
            "location": "/AP_Find/#connect-to-the-default-fusion-access-point",
            "text": "Select the Fusion Access Point that matches the SSID on the bottom of your controller (also inside box) to the SSID found. \nThe default Fusion passkey is  mrifusion . \nOnce connected, open your web browser (Google Chrome recommended) and follow the steps to  access to the web interface .   For instructions on changing the Fusion Access Point SSID and Passkey, refer to  Change Fusion Access Point  instructions.",
            "title": "Connect to the default Fusion Access Point"
        },
        {
            "location": "/AP_Find/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Find/Connect to Fusion",
            "title": "If any problems arise"
        },
        {
            "location": "/Accessing_Web_Interface/",
            "text": "Accessing the Fusion Web Interface\n\n\n\n\n\n\nWe recommend using Google Chrome for the Fusion Web Interface.\n\n\nConnecting to the Fusion Web Interface\n\n\n\n\n1.\n Open your browser (\nGoogle Chrome\n) and click on the address bar on top.\n\n\n2.\n Type in the following local IP address into the address bar of your browser.\n\nIP : \n192.168.50.1:8080\n\n\n3.\n Click \"Go To\" or press your Enter key on your keyboard to go to that address.\n\n\nYou should now be connected to the Fusion Web Interface by being presented with the login screen.\n\n\nNow you can either login with as the guest or an existing account previously created.\n\nIf you do not have an account, follow the steps to \ncreate an accont\n.\n\n\n\n\nError \"This site can't be reached\"\n\n\n\n\nIf you are having trouble accessing the Fusion Web Interface follow the steps below.  \n\n\n\n\n1.\n Make sure you are connected to the \nFusion Access Point\n and try again. \n\n\n2.\n If that does not work, try restarting the Fusion by \npowering off\n and \npowering on\n.\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Accesing Fusion Web Interface",
            "title": "Accessing Web Interface"
        },
        {
            "location": "/Accessing_Web_Interface/#accessing-the-fusion-web-interface",
            "text": "We recommend using Google Chrome for the Fusion Web Interface.  Connecting to the Fusion Web Interface   1.  Open your browser ( Google Chrome ) and click on the address bar on top.  2.  Type in the following local IP address into the address bar of your browser. \nIP :  192.168.50.1:8080  3.  Click \"Go To\" or press your Enter key on your keyboard to go to that address.  You should now be connected to the Fusion Web Interface by being presented with the login screen. \nNow you can either login with as the guest or an existing account previously created. \nIf you do not have an account, follow the steps to  create an accont .   Error \"This site can't be reached\"   If you are having trouble accessing the Fusion Web Interface follow the steps below.     1.  Make sure you are connected to the  Fusion Access Point  and try again.   2.  If that does not work, try restarting the Fusion by  powering off  and  powering on .",
            "title": "Accessing the Fusion Web Interface"
        },
        {
            "location": "/Accessing_Web_Interface/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Accesing Fusion Web Interface",
            "title": "If any problems arise"
        },
        {
            "location": "/Account_Create/",
            "text": "Create an Account\n\n\n\n\n\n\nCreate an account from the login screen\n\n\n\n\n1.\n When presented with the login screen, click \nRegister\n to start the registration process.\n\n\n\n2.\n Enter your information into the registration form. Fields marked with a * are required while the other fields may be left blank. In the \nUser Group\n, you can select from \nAdmin\n or \nUser\n.  \n\n\nIf this is your first time creating an account, we recommend making an administrator account. Only 1 administrator account can be created from the login screen. Additional administrator accounts can be create from the \nUser Settings\n\n\n\nClick \nRegister\n once you have completed the form. You will then be directed to the Fusion Web Interface home screen.\n\n\n\n\n\nCreate an account from the user settings screen\n\n\n\n\nYou must be logged into an administrator account to create additional users from the settings.\n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nUsers\n menu.\n\n\n\n3.\n Select the \nAdd New\n button to add a new user.\n\n\n\n4.\n Enter your information into the registration form. Fields marked with a * are required while the other fields may be left blank. In the \nUser Group\n, you can select from \nAdmin\n or \nUser\n.\n\n\nClick \nRegister\n once you have completed the form. \n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Creating an Account",
            "title": "Create Account"
        },
        {
            "location": "/Account_Create/#create-an-account",
            "text": "",
            "title": "Create an Account"
        },
        {
            "location": "/Account_Create/#create-an-account-from-the-login-screen",
            "text": "1.  When presented with the login screen, click  Register  to start the registration process.  2.  Enter your information into the registration form. Fields marked with a * are required while the other fields may be left blank. In the  User Group , you can select from  Admin  or  User .    If this is your first time creating an account, we recommend making an administrator account. Only 1 administrator account can be created from the login screen. Additional administrator accounts can be create from the  User Settings  \nClick  Register  once you have completed the form. You will then be directed to the Fusion Web Interface home screen.",
            "title": "Create an account from the login screen"
        },
        {
            "location": "/Account_Create/#create-an-account-from-the-user-settings-screen",
            "text": "You must be logged into an administrator account to create additional users from the settings.  1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Users  menu.  3.  Select the  Add New  button to add a new user.  4.  Enter your information into the registration form. Fields marked with a * are required while the other fields may be left blank. In the  User Group , you can select from  Admin  or  User . \nClick  Register  once you have completed the form.",
            "title": "Create an account from the user settings screen"
        },
        {
            "location": "/Account_Create/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Creating an Account",
            "title": "If any problems arise"
        },
        {
            "location": "/Account_Edit/",
            "text": "Edit an Account\n\n\n\n\n\n\nEdit an account from the user settings screen\n\n\n\n\nYou must be logged into an administrator account to edit a current user account.\n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nUsers\n menu.\n\n\n\n3.\n Select the blue \nEdit\n button to add a new user.\n\n\n\n4.\n Modify the information in the registration form. Fields marked with a * are required while the other fields may be left blank.\n\n\nClick \nSave\n once you are done updating the form. \n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Editing an Account",
            "title": "Edit Account"
        },
        {
            "location": "/Account_Edit/#edit-an-account",
            "text": "",
            "title": "Edit an Account"
        },
        {
            "location": "/Account_Edit/#edit-an-account-from-the-user-settings-screen",
            "text": "You must be logged into an administrator account to edit a current user account.  1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Users  menu.  3.  Select the blue  Edit  button to add a new user.  4.  Modify the information in the registration form. Fields marked with a * are required while the other fields may be left blank. \nClick  Save  once you are done updating the form.",
            "title": "Edit an account from the user settings screen"
        },
        {
            "location": "/Account_Edit/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Editing an Account",
            "title": "If any problems arise"
        },
        {
            "location": "/Account_Delete/",
            "text": "Delete an Account\n\n\n\n\n\n\nDelete an account from the user settings screen\n\n\n\n\nYou must be logged into an administrator account to delete users.\n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nUsers\n menu.\n\n\n\n3.\n Select the red \nDelete\n button to add a new user.\n\n\n\n4.\n Confirm that you want to delete the user by selecting \"\nOKAY!\n\".\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Deleting an Account",
            "title": "Delete Account"
        },
        {
            "location": "/Account_Delete/#delete-an-account",
            "text": "",
            "title": "Delete an Account"
        },
        {
            "location": "/Account_Delete/#delete-an-account-from-the-user-settings-screen",
            "text": "You must be logged into an administrator account to delete users.  1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Users  menu.  3.  Select the red  Delete  button to add a new user.  4.  Confirm that you want to delete the user by selecting \" OKAY! \".",
            "title": "Delete an account from the user settings screen"
        },
        {
            "location": "/Account_Delete/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Deleting an Account",
            "title": "If any problems arise"
        },
        {
            "location": "/Connect_Battery/",
            "text": "Connecting a battery\n\n\n\n\n\n\nHow to connect the battery\n\n\n\n\nConnect the Modern Robotics Battery pack for a truly wireless experience. The Fusion uses a 6V 2200mAh Ni-MH battery with a polarized connection designed to have the power on the left and the ground on the right. The battery has a keyed connection that only allows for it to be connected to the battery port in one direction.\n\n\n\nDO NOT\n connect any other power source to the battery port. Only use the Modern Robotics 6V Battery with Fusion. Using another power source or reverse polarity could permanently damage your Fusion.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connecting a battery",
            "title": "Connecting Battery"
        },
        {
            "location": "/Connect_Battery/#connecting-a-battery",
            "text": "",
            "title": "Connecting a battery"
        },
        {
            "location": "/Connect_Battery/#how-to-connect-the-battery",
            "text": "Connect the Modern Robotics Battery pack for a truly wireless experience. The Fusion uses a 6V 2200mAh Ni-MH battery with a polarized connection designed to have the power on the left and the ground on the right. The battery has a keyed connection that only allows for it to be connected to the battery port in one direction.  DO NOT  connect any other power source to the battery port. Only use the Modern Robotics 6V Battery with Fusion. Using another power source or reverse polarity could permanently damage your Fusion.",
            "title": "How to connect the battery"
        },
        {
            "location": "/Connect_Battery/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connecting a battery",
            "title": "If any problems arise"
        },
        {
            "location": "/Charge_Battery/",
            "text": "Charging the Fusion battery\n\n\n\n\n\n\nHow to charge the battery\n\n\n\n\nTo charge the Fusion battery pack, first make sure the \nbattery is connected\n.\n\nThen connect the accompanying battery charger to the battery port on the Fusion. The Fusion must be off in order to charge the battery. If the Fusion is on while the battery and charger are connected, the battery will not be charged. The charger is wired with the power in the middle and a ground on either side. Therefore this connector can not be connected improperly.\n\n\n\n\nWhen the charger is connected and charging the battery, the light on the charger will turn red. Once the battery is fully charged the light will turn green. The charger may get warm when charging a battery..\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Charging the Fusion Battery",
            "title": "Charge Battery"
        },
        {
            "location": "/Charge_Battery/#charging-the-fusion-battery",
            "text": "",
            "title": "Charging the Fusion battery"
        },
        {
            "location": "/Charge_Battery/#how-to-charge-the-battery",
            "text": "To charge the Fusion battery pack, first make sure the  battery is connected . \nThen connect the accompanying battery charger to the battery port on the Fusion. The Fusion must be off in order to charge the battery. If the Fusion is on while the battery and charger are connected, the battery will not be charged. The charger is wired with the power in the middle and a ground on either side. Therefore this connector can not be connected improperly.   When the charger is connected and charging the battery, the light on the charger will turn red. Once the battery is fully charged the light will turn green. The charger may get warm when charging a battery..",
            "title": "How to charge the battery"
        },
        {
            "location": "/Charge_Battery/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Charging the Fusion Battery",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Windows/",
            "text": "Connect to Fusion via Windows\n\n\n\n\n\n\nSteps to connect with Windows\n\n\n\n\n1.\n Turn on your computer's Wi-Fi capabilities. Click on the Wi-Fi symbol in the toolbar in the lower right hand corner.\n\n\n\n2.\n Find the Fusion Access Point SSID and select \"Connect\" to enter the passkey (i.e. \nFusionAP_99be01\n).\n\n\n\n3.\n Enter the passkey for your Fusion. Then click \"Next\" to connect.\n\nDefault Passkey: \nmrifusion\n\n\n\n\n4.\n Your Fusion is now connected to your Windows computer.\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connect Fusion via Windows",
            "title": "Connect Windows"
        },
        {
            "location": "/AP_Windows/#connect-to-fusion-via-windows",
            "text": "",
            "title": "Connect to Fusion via Windows"
        },
        {
            "location": "/AP_Windows/#steps-to-connect-with-windows",
            "text": "1.  Turn on your computer's Wi-Fi capabilities. Click on the Wi-Fi symbol in the toolbar in the lower right hand corner.  2.  Find the Fusion Access Point SSID and select \"Connect\" to enter the passkey (i.e.  FusionAP_99be01 ).  3.  Enter the passkey for your Fusion. Then click \"Next\" to connect. \nDefault Passkey:  mrifusion   4.  Your Fusion is now connected to your Windows computer.",
            "title": "Steps to connect with Windows"
        },
        {
            "location": "/AP_Windows/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connect Fusion via Windows",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Mac/",
            "text": "Connect to Fusion via Mac\n\n\n\n\n\n\nSteps to connect with Mac\n\n\n\n\n1.\n Turn on your computer's Wi-Fi capabilities. Click on the Wi-Fi symbol in the toolbar in the upper right hand corner.\n\n\n\n\n2.\n Find the Fusion Access Point SSID and select it to enter the passkey (i.e. \nFusionAP_99be01\n).\n\n\n\n\n3.\n Enter the passkey for your Fusion. Then click \"Join\" to connect.\n\nDefault Passkey: \nmrifusion\n\n\n\n\n4.\n Your Fusion is now connected to your Mac computer.\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connect Fusion via Mac",
            "title": "Connect Mac"
        },
        {
            "location": "/AP_Mac/#connect-to-fusion-via-mac",
            "text": "",
            "title": "Connect to Fusion via Mac"
        },
        {
            "location": "/AP_Mac/#steps-to-connect-with-mac",
            "text": "1.  Turn on your computer's Wi-Fi capabilities. Click on the Wi-Fi symbol in the toolbar in the upper right hand corner.   2.  Find the Fusion Access Point SSID and select it to enter the passkey (i.e.  FusionAP_99be01 ).   3.  Enter the passkey for your Fusion. Then click \"Join\" to connect. \nDefault Passkey:  mrifusion   4.  Your Fusion is now connected to your Mac computer.",
            "title": "Steps to connect with Mac"
        },
        {
            "location": "/AP_Mac/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connect Fusion via Mac",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Linux/",
            "text": "Connect to Fusion via Linux\n\n\n\n\n\n\nSteps to connect with Linux\n\n\n\n\n1.\n Turn on your computer's Wi-Fi capabilities. Click on the Wi-Fi symbol in the toolbar in the upper right hand corner.\n\n\n\n2.\n Find the Fusion Access Point SSID and select it to enter the passkey (i.e. \nFusionAP_99be01\n).\n\n\n\n3.\n Enter the passkey for your Fusion. Then click \"OK\" to connect.\n\nDefault Passkey: \nmrifusion\n\n\n\n\n4.\n Your Fusion is now connected to your Linux computer.\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connect Fusion via Linux",
            "title": "Connect Linux"
        },
        {
            "location": "/AP_Linux/#connect-to-fusion-via-linux",
            "text": "",
            "title": "Connect to Fusion via Linux"
        },
        {
            "location": "/AP_Linux/#steps-to-connect-with-linux",
            "text": "1.  Turn on your computer's Wi-Fi capabilities. Click on the Wi-Fi symbol in the toolbar in the upper right hand corner.  2.  Find the Fusion Access Point SSID and select it to enter the passkey (i.e.  FusionAP_99be01 ).  3.  Enter the passkey for your Fusion. Then click \"OK\" to connect. \nDefault Passkey:  mrifusion   4.  Your Fusion is now connected to your Linux computer.",
            "title": "Steps to connect with Linux"
        },
        {
            "location": "/AP_Linux/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connect Fusion via Linux",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_iOS/",
            "text": "Connect to Fusion via iOS\n\n\n\n\n\n\nSteps to connect with iOS\n\n\n\n\n1.\n Find and open the Settings App on your iPhone/iPad.\n\n\n\n2.\n Once the settings menu is open, select Wi-Fi.\n\n\n\n3.\n Find the Fusion Access Point SSID and select it to enter the passkey(i.e. \nFusionAP_99be01\n).\n\n\n\n4.\n Enter the passkey for your Fusion. Then select \"Join\" to connect.\n\nDefault Passkey: \nmrifusion\n\n\n\n\n5.\n Your Fusion is now connected to your iOS device.\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connect Fusion via iOS",
            "title": "Connect iOS"
        },
        {
            "location": "/AP_iOS/#connect-to-fusion-via-ios",
            "text": "",
            "title": "Connect to Fusion via iOS"
        },
        {
            "location": "/AP_iOS/#steps-to-connect-with-ios",
            "text": "1.  Find and open the Settings App on your iPhone/iPad.  2.  Once the settings menu is open, select Wi-Fi.  3.  Find the Fusion Access Point SSID and select it to enter the passkey(i.e.  FusionAP_99be01 ).  4.  Enter the passkey for your Fusion. Then select \"Join\" to connect. \nDefault Passkey:  mrifusion   5.  Your Fusion is now connected to your iOS device.",
            "title": "Steps to connect with iOS"
        },
        {
            "location": "/AP_iOS/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connect Fusion via iOS",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Android/",
            "text": "Connect to Fusion via Android\n\n\n\n\n\n\nSteps to connect with Android\n\n\n\n\n1.\n Find and open the Settings App on your Android device.\n\n\n\n\n2.\n Once the settings menu is open, select Wi-Fi.\n\n\n\n3.\n Find the Fusion Access Point SSID and select it to enter the passkey(i.e. \nFusionAP_99be01\n).\n\n\n\n4.\n Enter the passkey for your Fusion. Then select \"Connect\" to connect.\n\nDefault Passkey: \nmrifusion\n\n\n\n\n5.\n Your Fusion is now connected to your Android device.\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connect Fusion via Android",
            "title": "Connect Android"
        },
        {
            "location": "/AP_Android/#connect-to-fusion-via-android",
            "text": "",
            "title": "Connect to Fusion via Android"
        },
        {
            "location": "/AP_Android/#steps-to-connect-with-android",
            "text": "1.  Find and open the Settings App on your Android device.   2.  Once the settings menu is open, select Wi-Fi.  3.  Find the Fusion Access Point SSID and select it to enter the passkey(i.e.  FusionAP_99be01 ).  4.  Enter the passkey for your Fusion. Then select \"Connect\" to connect. \nDefault Passkey:  mrifusion   5.  Your Fusion is now connected to your Android device.",
            "title": "Steps to connect with Android"
        },
        {
            "location": "/AP_Android/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connect Fusion via Android",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Change/",
            "text": "Change Fusion Access Point SSID and Passkey\n\n\n\n\n\n\nCustom access point and passkey\n\n\n\n\nEach Fusion has its own unique access point name, or Service Set Identifier (SSID), and share a common passkey. There is an option in the settings menu to change your SSID and passkey.  \n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nWireless\n menu.\n\n\n\n3.\n In the Wi-Fi Settings section, enter in a new SSID and passkey into the corresponding text boxes.  \n\n\nExample:\n\nSSID: \nHelloWorld\n\nPasskey: \nmynewpassword\n\n\n\n\n4.\n Click the change button to apply the changes to your Fusion.\n\n\n\n5.\n Alert\n!\n Your Fusion will restart and turn back on with the new SSID and Passkey. Select \"\nOK\n\" to reboot.\n\n\n\n6.\n The Fusion server will shutdown and you will need to reconnected with the new credentials entered in Step 3 after the Fusion restarts.\n\n\nFor instructions on connecting to the Fusion Access Point, refer to the following links.\n\n\n\n\nConnect via Windows\n  \n\n\nConnect via Mac\n\n\nConnect via Linux\n  \n\n\nConnect via iOS\n  \n\n\nConnect via Android\n\n\n\n\n\n\nCan't connect to new access point\n\n\n\n\nIf you changed your SSID and Passkey and are now unable to connect to your Fusion, a few things could have gone wrong.\n\n\n1.\n \nPower off\n your Fusion and then turn it back on. Then attempt to connect to the Fusion using your credentials.\n\n\n2.\n If that is still not working, you may have accidentally entered your password incorrectly or the caps lock on when you entered in the new password. \n\n\n\n\nFollow the instructions to \nRestore SSID and Passkey\n to default using the supplied \nSystem Recovery Wire\n.\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Change Fusion Access Point",
            "title": "Change Fusion AP"
        },
        {
            "location": "/AP_Change/#change-fusion-access-point-ssid-and-passkey",
            "text": "",
            "title": "Change Fusion Access Point SSID and Passkey"
        },
        {
            "location": "/AP_Change/#custom-access-point-and-passkey",
            "text": "Each Fusion has its own unique access point name, or Service Set Identifier (SSID), and share a common passkey. There is an option in the settings menu to change your SSID and passkey.    1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Wireless  menu.  3.  In the Wi-Fi Settings section, enter in a new SSID and passkey into the corresponding text boxes.    Example: \nSSID:  HelloWorld \nPasskey:  mynewpassword   4.  Click the change button to apply the changes to your Fusion.  5.  Alert !  Your Fusion will restart and turn back on with the new SSID and Passkey. Select \" OK \" to reboot.  6.  The Fusion server will shutdown and you will need to reconnected with the new credentials entered in Step 3 after the Fusion restarts. \nFor instructions on connecting to the Fusion Access Point, refer to the following links.   Connect via Windows     Connect via Mac  Connect via Linux     Connect via iOS     Connect via Android",
            "title": "Custom access point and passkey"
        },
        {
            "location": "/AP_Change/#cant-connect-to-new-access-point",
            "text": "If you changed your SSID and Passkey and are now unable to connect to your Fusion, a few things could have gone wrong.  1.   Power off  your Fusion and then turn it back on. Then attempt to connect to the Fusion using your credentials.  2.  If that is still not working, you may have accidentally entered your password incorrectly or the caps lock on when you entered in the new password.    Follow the instructions to  Restore SSID and Passkey  to default using the supplied  System Recovery Wire .",
            "title": "Can't connect to new access point"
        },
        {
            "location": "/AP_Change/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Change Fusion Access Point",
            "title": "If any problems arise"
        },
        {
            "location": "/AP_Restore/",
            "text": "Restore Fusion Access Point SSID and Passkey\n\n\n\n\n\n\nThere are two methods for resetting the Fusion Access Point SSID and Passkey. Follow the steps below if you are unable to connect to your Fusion Access Point or want to reset the Fusion Access Point SSID and Passkey. \n\n\nRestore SSID and Passkey via the Web Interface\n\n\n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nWireless\n menu.\n\n\n\n3.\n Click the \"Default\" button to your restore the Fusion Access Point SSID and Passkey. \n\n\n\n4.\n Alert\n!\n Your Fusion will restart and turn back on with the new SSID and Passkey. Select \"\nOK\n\" to reboot.\n\n\n\n6.\n The Fusion server will shutdown and you will need to reconnected with the new credentials entered in Step 3 after the Fusion restarts.\n\n\nFor instructions on connecting to the Fusion Access Point, refer to the following links.\n\n\n\n\nConnect via Windows\n  \n\n\nConnect via Mac\n\n\nConnect via Linux\n  \n\n\nConnect via iOS\n  \n\n\nConnect via Android\n\n\n\n\n\n\nRestore SSID and Passkey via the System Recovery Wire\n\n\nIf you are unable to connect to the Fusion Access Point or forgot your password, you will need to complete a hardware reset using the \nSystem Recovery Wire\n included with your Fusion (color may vary).\n\n\n\n\n1.\n \nPower off\n the Fusion\n\n\n2.\n Connect the System Recovery Wire to left most pin (I/O Pin) of \nD0\n to the same pin on \nD7\n.\n\n\n\n3.\n \nPower on\n the Fusion. The Status LED will start to blink.\n\n\n\n4.\n When the blue and yellow LEDs on the side of the Fusion turn on, the System Recovery Wire must be removed.\n\n\n\n5.\n The Fusion will continue to \npower on\n as it normally would and will now have the default SSID and Passkey.\n\n\nFollow the steps to \nconnect your Fusion\n using the default credentials.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Restore Fusion Access Point",
            "title": "Restore Fusion AP"
        },
        {
            "location": "/AP_Restore/#restore-fusion-access-point-ssid-and-passkey",
            "text": "There are two methods for resetting the Fusion Access Point SSID and Passkey. Follow the steps below if you are unable to connect to your Fusion Access Point or want to reset the Fusion Access Point SSID and Passkey.",
            "title": "Restore Fusion Access Point SSID and Passkey"
        },
        {
            "location": "/AP_Restore/#restore-ssid-and-passkey-via-the-web-interface",
            "text": "1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Wireless  menu.  3.  Click the \"Default\" button to your restore the Fusion Access Point SSID and Passkey.   4.  Alert !  Your Fusion will restart and turn back on with the new SSID and Passkey. Select \" OK \" to reboot.  6.  The Fusion server will shutdown and you will need to reconnected with the new credentials entered in Step 3 after the Fusion restarts. \nFor instructions on connecting to the Fusion Access Point, refer to the following links.   Connect via Windows     Connect via Mac  Connect via Linux     Connect via iOS     Connect via Android",
            "title": "Restore SSID and Passkey via the Web Interface"
        },
        {
            "location": "/AP_Restore/#restore-ssid-and-passkey-via-the-system-recovery-wire",
            "text": "If you are unable to connect to the Fusion Access Point or forgot your password, you will need to complete a hardware reset using the  System Recovery Wire  included with your Fusion (color may vary).   1.   Power off  the Fusion  2.  Connect the System Recovery Wire to left most pin (I/O Pin) of  D0  to the same pin on  D7 .  3.   Power on  the Fusion. The Status LED will start to blink.  4.  When the blue and yellow LEDs on the side of the Fusion turn on, the System Recovery Wire must be removed.  5.  The Fusion will continue to  power on  as it normally would and will now have the default SSID and Passkey. \nFollow the steps to  connect your Fusion  using the default credentials.",
            "title": "Restore SSID and Passkey via the System Recovery Wire"
        },
        {
            "location": "/AP_Restore/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Restore Fusion Access Point",
            "title": "If any problems arise"
        },
        {
            "location": "/Connect_Internet/",
            "text": "Connect Fusion to the Internet\n\n\n\n\n\n\nConnect to the internet via Wi-Fi\n\n\n\n\n1.\n Connect the Wi-Fi dongle supplied by Modern Robotics to your Fusion via the \nUSB Hub\n. Refer to the \nWi-Fi Hub\n for more information on how wireless connections are made with the Fusion.\n\n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nWireless\n menu.\n\n\n\n3.\n Look at the list of available networks for your wireless router. Click on the router SSID (name) to start the internet connection process. \n\n\n\n4.\n Click \"\nConnect\n\" to connect to the selected network\n\n\n\n5.\n Enter the correct passkey for that network and click \"\nOKAY!\n\" to connect.\n\n\nThis process may take a few moments to connect to the internet.\n\n\n\n\nConnect to the internet via Ethernet Cable\n\n\n\n\n1.\n Connect an ethernet cable (CAT5e or CAT6) to the Fusion \nEthernet Port\n. Connect the other end of the cable to your router or modem.\n\n\nThe Fusion will automatically connect to the internet. This process may take a few moments.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Connect Fusion to the Internet",
            "title": "Connect to Internet"
        },
        {
            "location": "/Connect_Internet/#connect-fusion-to-the-internet",
            "text": "",
            "title": "Connect Fusion to the Internet"
        },
        {
            "location": "/Connect_Internet/#connect-to-the-internet-via-wi-fi",
            "text": "1.  Connect the Wi-Fi dongle supplied by Modern Robotics to your Fusion via the  USB Hub . Refer to the  Wi-Fi Hub  for more information on how wireless connections are made with the Fusion.  1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Wireless  menu.  3.  Look at the list of available networks for your wireless router. Click on the router SSID (name) to start the internet connection process.   4.  Click \" Connect \" to connect to the selected network  5.  Enter the correct passkey for that network and click \" OKAY! \" to connect. \nThis process may take a few moments to connect to the internet.",
            "title": "Connect to the internet via Wi-Fi"
        },
        {
            "location": "/Connect_Internet/#connect-to-the-internet-via-ethernet-cable",
            "text": "1.  Connect an ethernet cable (CAT5e or CAT6) to the Fusion  Ethernet Port . Connect the other end of the cable to your router or modem. \nThe Fusion will automatically connect to the internet. This process may take a few moments.",
            "title": "Connect to the internet via Ethernet Cable"
        },
        {
            "location": "/Connect_Internet/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Connect Fusion to the Internet",
            "title": "If any problems arise"
        },
        {
            "location": "/Update/",
            "text": "Update Fusion\n\n\n\n\n\n\nUpdate the Fusion\n\n\n\n\nYou must be logged into an administrator account to update.\n\n\n1.\n Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.\n\n\n\n2.\n Navigate to the \nSoftware\n menu.\n\n\n\n3.\n Select the \nUpdate\n if the update is available.\n\n\n\n4.\n The update screen will start to fill with text. This is the update script running and producing output to the screen.\n\n\n\n5.\n The Fusion server will restart and you will be redirected to the log in screen.\n\n\nLog in with your username and password to use your updated Fusion.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Updating Fusion",
            "title": "Update Fusion"
        },
        {
            "location": "/Update/#update-fusion",
            "text": "",
            "title": "Update Fusion"
        },
        {
            "location": "/Update/#update-the-fusion",
            "text": "You must be logged into an administrator account to update.  1.  Open the Fusion settings from the hamburger menu on the left or the settings box on the home page.  2.  Navigate to the  Software  menu.  3.  Select the  Update  if the update is available.  4.  The update screen will start to fill with text. This is the update script running and producing output to the screen.  5.  The Fusion server will restart and you will be redirected to the log in screen. \nLog in with your username and password to use your updated Fusion.",
            "title": "Update the Fusion"
        },
        {
            "location": "/Update/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Updating Fusion",
            "title": "If any problems arise"
        },
        {
            "location": "/Blockly/",
            "text": "Blockly Guide\n\n\n\n\n\n\nCreate a new program\n\n\n\n\nTo create a new program from the Home screen, click the pink \"LAUNCH\" button in the Blockly box.\n\n\n\n\nA program will open that is listed at Untitled\nX\n.blk where \nX\n is an incrementing number. Go to \nFile -> Save/Save As\n to save the file with a new name. For our example we will name the file \nmyprog\n which will result in a file being created call \nmyprog.blk\n.\n\nEvery new program has a start block placed in the programming environment.\n\n\n\n\nOpen an existing program\n\n\n\n\nTo open an existing program, go to \nFile -> Open\n and select the program you want to open. The program will open in the programming environment as it was the last time it was saved.\n\n\n\n\nWriting a LED flashing program (Basic)\n\n\n\n\nFirst, make sure you are on the Basic Blockly screen by going to \nView -> Mode -> Basic\n in the toolbar. This example will show how to create a Blockly program to toggle the onboard yellow and blue LEDs. After opening a new program, the program environment contains just the \nStart Block\n.\n\n\n\n\n1)\n Go to the \nFusion Control\n toolbox and drag out the \nYellow LED Block\n and attach it to the start block like shown.\n\n\n\n\n\n\n\n\n2)\n Now we are going to add a delay so the yellow LED will stay on for 1 second before the next LED block. Go to the \nFusion Control\n toolbox and drag out the \nWait Block\n.\n\n\n\n\n\n\n\n\n3)\n Go to the \nFusion Control\n toolbox and drag out the \nBlue LED Block\n and attach it to the wait block from the previous step. Now the yellow LED will turn on for 1 second and then switch to blue.\n\n\n\n\n\n\n\n\n4)\n Go to the \nFusion Control\n toolbox and drag the \nWait Block\n to the blue LED block. Now the yellow LED will turn on for 1 second, turn off and the blue LED will turn on for 1 second.\n\n\n\n\n\n\n\n\n5)\n In the toolbar at the top of the page, click \"Run\" to start running (also saves) the current program. You should observe the following:\n\n\n\n\n1.\n Only the Yellow LED turns on for 1 second.\n\n\n2.\n Only the Blue LED turns on for 1 second.\n\n\n3.\n The program will end and both LEDs will be off.\n\n\n\n\n\n\n\n\n\n\nWriting a LED flashing program (Intermediate)\n\n\n\n\nFirst, make sure you are on the Intermediate Blockly screen by going to \nView -> Mode -> Intermediate\n in the toolbar. This example will show how to create a Blockly program to continuously toggle the onboard yellow and blue LEDs. After opening a new program, the program environment contains just the \nStart Block\n.\n\n\n\n\n\n\n\n\n1)\n Go to the \nLoops\n toolbox and drag out the \nRepeat While True Block\n \n\n\n\n\n\n\n\n\n2)\n Go to the \nFusion Control\n toolbox and drag out 2 of the \nLED Blocks\n and attach them inside the loop like shown. Change the lower block to \nblue\n and set it to \noff\n.\n\n\n\n\n\n\n\n\n3)\n Go to the \nTime\n toolbox and drag out the \nWait \nX\n Seconds Block\n and attach it under the LED blocks. Change the number in the center to the desired length of time for the yellow LED to stay on. For this example, we will leave the time at 1 second.\n\n\n\n\n\n\n\n\n4)\n Go to the \nFusion Control\n toolbox and drag out 2 more of the \nLED Blocks\n and attach them below the wait block. This time turn the yellow LED \noff\n and the blue LED \non\n.\n\n\n\n\n\n\n\n\n5)\n Go to the \nTime\n toolbox and drag out the \nWait \nX\n Seconds Block\n and attach it under the LED blocks.\n\n\n\n\n\n\n\n\n6)\n In the toolbar at the top of the page, click \"Run\" to start running (also saves) the current program. You should observe the following:\n\n\n\n\n1.\n Only the Yellow LED turns on for 1 second.\n\n\n2.\n Only the Blue LED turns on for 1 second.\n\n\n3.\n The program will continually loop and flash the LEDs until \"Stop\" is selected in the toolbar.\n\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Programming",
            "title": "Blockly"
        },
        {
            "location": "/Blockly/#blockly-guide",
            "text": "",
            "title": "Blockly Guide"
        },
        {
            "location": "/Blockly/#create-a-new-program",
            "text": "To create a new program from the Home screen, click the pink \"LAUNCH\" button in the Blockly box.   A program will open that is listed at Untitled X .blk where  X  is an incrementing number. Go to  File -> Save/Save As  to save the file with a new name. For our example we will name the file  myprog  which will result in a file being created call  myprog.blk . \nEvery new program has a start block placed in the programming environment.",
            "title": "Create a new program"
        },
        {
            "location": "/Blockly/#open-an-existing-program",
            "text": "To open an existing program, go to  File -> Open  and select the program you want to open. The program will open in the programming environment as it was the last time it was saved.",
            "title": "Open an existing program"
        },
        {
            "location": "/Blockly/#writing-a-led-flashing-program-basic",
            "text": "First, make sure you are on the Basic Blockly screen by going to  View -> Mode -> Basic  in the toolbar. This example will show how to create a Blockly program to toggle the onboard yellow and blue LEDs. After opening a new program, the program environment contains just the  Start Block .   1)  Go to the  Fusion Control  toolbox and drag out the  Yellow LED Block  and attach it to the start block like shown.     2)  Now we are going to add a delay so the yellow LED will stay on for 1 second before the next LED block. Go to the  Fusion Control  toolbox and drag out the  Wait Block .     3)  Go to the  Fusion Control  toolbox and drag out the  Blue LED Block  and attach it to the wait block from the previous step. Now the yellow LED will turn on for 1 second and then switch to blue.     4)  Go to the  Fusion Control  toolbox and drag the  Wait Block  to the blue LED block. Now the yellow LED will turn on for 1 second, turn off and the blue LED will turn on for 1 second.     5)  In the toolbar at the top of the page, click \"Run\" to start running (also saves) the current program. You should observe the following:   1.  Only the Yellow LED turns on for 1 second.  2.  Only the Blue LED turns on for 1 second.  3.  The program will end and both LEDs will be off.",
            "title": "Writing a LED flashing program (Basic)"
        },
        {
            "location": "/Blockly/#writing-a-led-flashing-program-intermediate",
            "text": "First, make sure you are on the Intermediate Blockly screen by going to  View -> Mode -> Intermediate  in the toolbar. This example will show how to create a Blockly program to continuously toggle the onboard yellow and blue LEDs. After opening a new program, the program environment contains just the  Start Block .     1)  Go to the  Loops  toolbox and drag out the  Repeat While True Block       2)  Go to the  Fusion Control  toolbox and drag out 2 of the  LED Blocks  and attach them inside the loop like shown. Change the lower block to  blue  and set it to  off .     3)  Go to the  Time  toolbox and drag out the  Wait  X  Seconds Block  and attach it under the LED blocks. Change the number in the center to the desired length of time for the yellow LED to stay on. For this example, we will leave the time at 1 second.     4)  Go to the  Fusion Control  toolbox and drag out 2 more of the  LED Blocks  and attach them below the wait block. This time turn the yellow LED  off  and the blue LED  on .     5)  Go to the  Time  toolbox and drag out the  Wait  X  Seconds Block  and attach it under the LED blocks.     6)  In the toolbar at the top of the page, click \"Run\" to start running (also saves) the current program. You should observe the following:   1.  Only the Yellow LED turns on for 1 second.  2.  Only the Blue LED turns on for 1 second.  3.  The program will continually loop and flash the LEDs until \"Stop\" is selected in the toolbar.",
            "title": "Writing a LED flashing program (Intermediate)"
        },
        {
            "location": "/Blockly/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Programming",
            "title": "If any problems arise"
        },
        {
            "location": "/Editor/",
            "text": "Editor Guide\n\n\n\n\n\n\nCreate a new program\n\n\n\n\nTo create a new program from the Home screen, click the pink \"LAUNCH\" button in the Editor box.\n\n\n\n\nA program will open that is listed at Untitled\nX\n.py where \nX\n is an incrementing number. Go to \nFile -> Save/Save As\n to save the file with a new name. For our example we will name out file \nmyprog\n which will result in a file being created call \nmyprog.py\n.\n\nEvery new program has an import and class constructor at the beginning of every code. This is needed to operate any Modern Robotics hardware or Fusion functions.\n\n\n\n\nOpen an existing program\n\n\n\n\nTo open an existing program, go to \nFile -> Open\n and select the program you want to open. The program will open in the programming environment as it was the last time it was saved and the file will be listed in the working files directory.\n\n\n\n\nWriting a LED flashing program\n\n\n\n\nThis example will show how to create an Editor program to continuously toggle the on-board yellow and blue LEDs. After opening a new program, the program environment contains only the import and class constructor.\n\n\n\n\nimport Fusion\nf = Fusion.driver()\n\n\n\n\n\n1)\n Turn \non\n the yellow LED and turn \noff\n the blue LED using the \nsetLED(led, value)\n function from the \nFusion Driver\n class.\n\n\n\n\nimport Fusion\nf = Fusion.driver()\n\nsetLED(f.YELLOW, 1)\nsetLED(f.BLUE, 0)\n\n\n\n\n\n2)\n The next step is to add a time delay after turning the yellow LED on. This delay determines the length of time that the yellow LED stay on. In order to use the built-in \nsleep(seconds)\n function, the time module must be imported.\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\n\nf.setLED(f.YELLOW, 1)\nf.setLED(f.BLUE, 0)\ntime.sleep(1)\n\n\n\n\n\n3)\n Now, turn \noff\n the yellow LED and turn \non\n the blue LED using the \nsetLED(led, value)\n function.\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\n\nf.setLED(f.YELLOW, 1)\nf.setLED(f.BLUE, 0)\ntime.sleep(1)\nf.setLED(f.YELLOW, 0)\nf.setLED(f.BLUE, 1)\n\n\n\n\n\n4)\n The final step before running the program is to add another time delay for the length of time the blue LED stays on.\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\n\nf.setLED(f.YELLOW, 1)\nf.setLED(f.BLUE, 0)\ntime.sleep(1)\nf.setLED(f.YELLOW, 0)\nf.setLED(f.BLUE, 1)\ntime.sleep(1)\n\n\n\n\n\n5)\n In the toolbar at the top of the page, click \"Run\" to start running (also saves) the current program. You should observe the following:\n\n\n\n\n1.\n Only the Yellow LED turns on for 1 second.\n\n\n2.\n Only the Blue LED turns on for 1 second.\n\n\n3.\n The program will end and both LEDs will be off.\n\n\n\n\n\n\nTo continuously toggle the LEDs \non\n and \noff\n, the \nsetLED()\n and \nsleep()\n functions must be placed inside a loop. For our purpose we will use a \nwhile\n loop with its condition being \nTrue\n. It is important that any code within the \nwhile True:\n loop must be indented with a \nTab\n.\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\n\nwhile True:\n    f.setLED(f.YELLOW, 1)\n    f.setLED(f.BLUE, 0)\n    time.sleep(1)\n    f.setLED(f.YELLOW, 0)\n    f.setLED(f.BLUE, 1)\n    time.sleep(1)\n\n\n\n\n\nYou should observe the following:  \n\n\n\n\n1.\n Only the Yellow LED turns on for 1 second.\n\n\n2.\n Only the Blue LED turns on for 1 second.\n\n\n3.\n The program will continually loop and flash the LEDs until \"Stop\" is selected in the toolbar.\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Editor Programming",
            "title": "Editor"
        },
        {
            "location": "/Editor/#editor-guide",
            "text": "",
            "title": "Editor Guide"
        },
        {
            "location": "/Editor/#create-a-new-program",
            "text": "To create a new program from the Home screen, click the pink \"LAUNCH\" button in the Editor box.   A program will open that is listed at Untitled X .py where  X  is an incrementing number. Go to  File -> Save/Save As  to save the file with a new name. For our example we will name out file  myprog  which will result in a file being created call  myprog.py . \nEvery new program has an import and class constructor at the beginning of every code. This is needed to operate any Modern Robotics hardware or Fusion functions.",
            "title": "Create a new program"
        },
        {
            "location": "/Editor/#open-an-existing-program",
            "text": "To open an existing program, go to  File -> Open  and select the program you want to open. The program will open in the programming environment as it was the last time it was saved and the file will be listed in the working files directory.",
            "title": "Open an existing program"
        },
        {
            "location": "/Editor/#writing-a-led-flashing-program",
            "text": "This example will show how to create an Editor program to continuously toggle the on-board yellow and blue LEDs. After opening a new program, the program environment contains only the import and class constructor.   import Fusion\nf = Fusion.driver()   1)  Turn  on  the yellow LED and turn  off  the blue LED using the  setLED(led, value)  function from the  Fusion Driver  class.   import Fusion\nf = Fusion.driver()\n\nsetLED(f.YELLOW, 1)\nsetLED(f.BLUE, 0)   2)  The next step is to add a time delay after turning the yellow LED on. This delay determines the length of time that the yellow LED stay on. In order to use the built-in  sleep(seconds)  function, the time module must be imported.   import Fusion\nimport time\nf = Fusion.driver()\n\nf.setLED(f.YELLOW, 1)\nf.setLED(f.BLUE, 0)\ntime.sleep(1)   3)  Now, turn  off  the yellow LED and turn  on  the blue LED using the  setLED(led, value)  function.   import Fusion\nimport time\nf = Fusion.driver()\n\nf.setLED(f.YELLOW, 1)\nf.setLED(f.BLUE, 0)\ntime.sleep(1)\nf.setLED(f.YELLOW, 0)\nf.setLED(f.BLUE, 1)   4)  The final step before running the program is to add another time delay for the length of time the blue LED stays on.   import Fusion\nimport time\nf = Fusion.driver()\n\nf.setLED(f.YELLOW, 1)\nf.setLED(f.BLUE, 0)\ntime.sleep(1)\nf.setLED(f.YELLOW, 0)\nf.setLED(f.BLUE, 1)\ntime.sleep(1)   5)  In the toolbar at the top of the page, click \"Run\" to start running (also saves) the current program. You should observe the following:   1.  Only the Yellow LED turns on for 1 second.  2.  Only the Blue LED turns on for 1 second.  3.  The program will end and both LEDs will be off.    To continuously toggle the LEDs  on  and  off , the  setLED()  and  sleep()  functions must be placed inside a loop. For our purpose we will use a  while  loop with its condition being  True . It is important that any code within the  while True:  loop must be indented with a  Tab .   import Fusion\nimport time\nf = Fusion.driver()\n\nwhile True:\n    f.setLED(f.YELLOW, 1)\n    f.setLED(f.BLUE, 0)\n    time.sleep(1)\n    f.setLED(f.YELLOW, 0)\n    f.setLED(f.BLUE, 1)\n    time.sleep(1)   You should observe the following:     1.  Only the Yellow LED turns on for 1 second.  2.  Only the Blue LED turns on for 1 second.  3.  The program will continually loop and flash the LEDs until \"Stop\" is selected in the toolbar.",
            "title": "Writing a LED flashing program"
        },
        {
            "location": "/Editor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Editor Programming",
            "title": "If any problems arise"
        },
        {
            "location": "/On_Board_LED/",
            "text": "On-Board LEDs\n\n\n\n\n\n\nThe Fusion Controller has two on board programmable LEDs, yellow and blue. These LEDs can be used for various purposes including status indicators or notifying flags to test code.\n\n\n\n\nBlockly Programming Reference\n\n\nPython Programming Reference\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: On-Board LEDs",
            "title": "On Board LEDs"
        },
        {
            "location": "/On_Board_LED/#on-board-leds",
            "text": "The Fusion Controller has two on board programmable LEDs, yellow and blue. These LEDs can be used for various purposes including status indicators or notifying flags to test code.   Blockly Programming Reference  Python Programming Reference",
            "title": "On-Board LEDs"
        },
        {
            "location": "/On_Board_LED/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : On-Board LEDs",
            "title": "If any problems arise"
        },
        {
            "location": "/Digital_Ports/",
            "text": "Digital Ports\n\n\n\n\n\n\nThere are 8 digital ports for controlling digital sensors that are either \nON\n (\n1\n) or \nOFF\n (\n0\n). Each port consists of a black, red and yellow wire connection. The black wire is the ground wire and must line up with the black bar on the right side of the port. The red wire is the power wire that connects to 5V for all the sensors to operate on. The yellow wire is the logic voltage line that ranges from 0V-5V and it is used to send or receive signal. \n\n\n\n\nCurrent Limiting Resistor\n : 220ohm\n\n\nSignal Logic Levels\n : 5V TTL at 22mA Max\n\n\nPorts\n : D0 - D7\n\n\nBlockly Programming Reference\n\n\nPython Programming Reference\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Digital Ports",
            "title": "Digital Ports"
        },
        {
            "location": "/Digital_Ports/#digital-ports",
            "text": "There are 8 digital ports for controlling digital sensors that are either  ON  ( 1 ) or  OFF  ( 0 ). Each port consists of a black, red and yellow wire connection. The black wire is the ground wire and must line up with the black bar on the right side of the port. The red wire is the power wire that connects to 5V for all the sensors to operate on. The yellow wire is the logic voltage line that ranges from 0V-5V and it is used to send or receive signal.    Current Limiting Resistor  : 220ohm  Signal Logic Levels  : 5V TTL at 22mA Max  Ports  : D0 - D7  Blockly Programming Reference  Python Programming Reference",
            "title": "Digital Ports"
        },
        {
            "location": "/Digital_Ports/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Digital Ports",
            "title": "If any problems arise"
        },
        {
            "location": "/Analog_Ports/",
            "text": "Analog Ports\n\n\n\n\n\n\nThere are 8 analog ports for reading analog sensors that range from \n0\n - \n1023\n. Eacch port consists of a black, red and yellow wire connection. The black wire is the ground wire and must line up with the black bar on the right side of the port. The red wire is the power wire that connects to 5V for all the sensors to operate on. The yellow wire is the variable voltage line that ranges from 0V-5V and it is used to receive a signal from the sensor.\n\n\n\n\nSignal Logic Levels\n : Analog 0V - 5V\n\nResolution\n : 10 bit\n\n\nPorts\n : A0 - A7\n\n\nBlockly Programming Reference\n \n\n\nPython Programming Reference\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Analog Ports",
            "title": "Analog Ports"
        },
        {
            "location": "/Analog_Ports/#analog-ports",
            "text": "There are 8 analog ports for reading analog sensors that range from  0  -  1023 . Eacch port consists of a black, red and yellow wire connection. The black wire is the ground wire and must line up with the black bar on the right side of the port. The red wire is the power wire that connects to 5V for all the sensors to operate on. The yellow wire is the variable voltage line that ranges from 0V-5V and it is used to receive a signal from the sensor.   Signal Logic Levels  : Analog 0V - 5V Resolution  : 10 bit  Ports  : A0 - A7  Blockly Programming Reference    Python Programming Reference",
            "title": "Analog Ports"
        },
        {
            "location": "/Analog_Ports/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Analog Ports",
            "title": "If any problems arise"
        },
        {
            "location": "/I2C_Ports/",
            "text": "I2C Ports\n\n\n\n\n\n\nThere are 4 Inter-Integrated Circuit (I2C) ports for controlling Modern Robotics I2C sensors. An I2C sensor uses addresses, registers and commands to read and write.\n\nEach sensor has its own I2C address associated with it. If two of the same sensor are to be used together, the I2C address of one sensor must be changed first. The I2C ports on the Fusion are all connected to the same I2C bus. Therefore, the I2C port that the sensor is connected to is arbitrary.\n\nEach sensor has its own object declaration that must be called at the beginning of user code. The object declaration name is arbitrary and an object declaration must be called for each sensor being used. If there are two of the same sensors, the declaration must be called twice and they must have different names.\n\n\n\n\nPower\n : 5V DC\n\n\nPull-up Resistor\n : 47k ohm\n\n\nSeries Resistor\n : 47 ohm\n\n\nSignal Logic Levels\n : 5V TTL\n\n\nI2C Bus Speed\n : 100kHz\n\n\nPorts\n : I2C\n\n\nPython Programming Reference\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion I2C Ports",
            "title": "I2C Ports"
        },
        {
            "location": "/I2C_Ports/#i2c-ports",
            "text": "There are 4 Inter-Integrated Circuit (I2C) ports for controlling Modern Robotics I2C sensors. An I2C sensor uses addresses, registers and commands to read and write. \nEach sensor has its own I2C address associated with it. If two of the same sensor are to be used together, the I2C address of one sensor must be changed first. The I2C ports on the Fusion are all connected to the same I2C bus. Therefore, the I2C port that the sensor is connected to is arbitrary. \nEach sensor has its own object declaration that must be called at the beginning of user code. The object declaration name is arbitrary and an object declaration must be called for each sensor being used. If there are two of the same sensors, the declaration must be called twice and they must have different names.   Power  : 5V DC  Pull-up Resistor  : 47k ohm  Series Resistor  : 47 ohm  Signal Logic Levels  : 5V TTL  I2C Bus Speed  : 100kHz  Ports  : I2C  Python Programming Reference",
            "title": "I2C Ports"
        },
        {
            "location": "/I2C_Ports/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion I2C Ports",
            "title": "If any problems arise"
        },
        {
            "location": "/Motor_Ports/",
            "text": "Motor Ports\n\n\n\n\n\n\nThere are 2 motor ports for controlling 6V DC motors. Connecting the motors in reverse polarity will switch the direction of motor rotation and will not cause any damage to the controller or the motors.\n\n\n\n\nPower\n : 6V DC\n\n\nCurrent Limit\n : 1.5A max\n\n\nOperation Frequency\n : 800Hz PWM\n\n\nStop Modes\n : Float / Brake\n\n\nPorts\n : M0 - M1\n\n\nBlockly Programming Reference\n\n\nPython Programming Reference\n\n\n\n\n\n\nThe connection depicted above is the default motor connection configuration for the Fusion Controller. If your motors are not connected in this manner, any examples that use motors may not work correctly.\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Motor Ports",
            "title": "Motor Ports"
        },
        {
            "location": "/Motor_Ports/#motor-ports",
            "text": "There are 2 motor ports for controlling 6V DC motors. Connecting the motors in reverse polarity will switch the direction of motor rotation and will not cause any damage to the controller or the motors.   Power  : 6V DC  Current Limit  : 1.5A max  Operation Frequency  : 800Hz PWM  Stop Modes  : Float / Brake  Ports  : M0 - M1  Blockly Programming Reference  Python Programming Reference    The connection depicted above is the default motor connection configuration for the Fusion Controller. If your motors are not connected in this manner, any examples that use motors may not work correctly.",
            "title": "Motor Ports"
        },
        {
            "location": "/Motor_Ports/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Motor Ports",
            "title": "If any problems arise"
        },
        {
            "location": "/Servo_Ports/",
            "text": "Servo Ports\n\n\n\n\n\n\nThere are 4 servo ports for controlling analog and digital servos. \n\n\n\n\nPower\n : 6V DC\n\n\nStandard Mode\n : 750uS \u2013 2250uS\n\n\nExtended Mode\n : 500uS \u2013 2500uS\n\n\nPorts\n : S0 - S3\n\n\nBlockly Programming Reference\n \n\n\nPython Programming Reference\n\n\n\n\n\n\nServos operate on Pulse Width Modulation (PWM) which allows for an analog result using a digital signal. This is achieved by timing how long the signal is \nHIGH\n, how long the signal is \nLOW\n and comparing them to get the duty cycle.\n\n\n\n\nServos use this signal to dictate which position to go to. A PWM value of 255 creates a 100% duty cycle while a value of 0 creates a 0% duty cycle. When a servo is turned on, it defaults to a value of 127 which is a 50% duty cycle and places the servo halfway through its mechanical limits.\n\nWhen reaching the limits of 0 or 255, listen to your servo for humming or clicking which would indicate that the servo has reach or is attempting to surpass its mechanical limit. Be careful as Modern Robotics is not responsible for damaged servos due to exceeding mechanical limits.\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Servo Ports",
            "title": "Servo Ports"
        },
        {
            "location": "/Servo_Ports/#servo-ports",
            "text": "There are 4 servo ports for controlling analog and digital servos.    Power  : 6V DC  Standard Mode  : 750uS \u2013 2250uS  Extended Mode  : 500uS \u2013 2500uS  Ports  : S0 - S3  Blockly Programming Reference    Python Programming Reference    Servos operate on Pulse Width Modulation (PWM) which allows for an analog result using a digital signal. This is achieved by timing how long the signal is  HIGH , how long the signal is  LOW  and comparing them to get the duty cycle.   Servos use this signal to dictate which position to go to. A PWM value of 255 creates a 100% duty cycle while a value of 0 creates a 0% duty cycle. When a servo is turned on, it defaults to a value of 127 which is a 50% duty cycle and places the servo halfway through its mechanical limits. \nWhen reaching the limits of 0 or 255, listen to your servo for humming or clicking which would indicate that the servo has reach or is attempting to surpass its mechanical limit. Be careful as Modern Robotics is not responsible for damaged servos due to exceeding mechanical limits.",
            "title": "Servo Ports"
        },
        {
            "location": "/Servo_Ports/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Servo Ports",
            "title": "If any problems arise"
        },
        {
            "location": "/HDMI/",
            "text": "HDMI Port\n\n\n\n\n\n\nThe High-Definition Multimedia Interface (HDMI) is an audio/video cable that connects to devices like a computer monitor or television. The cable is multi-directional so either end can be connected to the Fusion.\n\n\n\n\nIf the Fusion is connected via HDMI it is possible to boot into the operating system and use the controller via the desktop. There is still access to the web interface that can be accessed via typing the local host. address into the address bar.\n\nIP: \nlocalhost:8080\n\n\n\n\nFor a more in-depth explanation of HDMI and how it works, go to \nhttps://en.wikipedia.org/wiki/HDMI\n.\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion HDMI Port",
            "title": "HDMI Port"
        },
        {
            "location": "/HDMI/#hdmi-port",
            "text": "The High-Definition Multimedia Interface (HDMI) is an audio/video cable that connects to devices like a computer monitor or television. The cable is multi-directional so either end can be connected to the Fusion.   If the Fusion is connected via HDMI it is possible to boot into the operating system and use the controller via the desktop. There is still access to the web interface that can be accessed via typing the local host. address into the address bar. \nIP:  localhost:8080   For a more in-depth explanation of HDMI and how it works, go to  https://en.wikipedia.org/wiki/HDMI .",
            "title": "HDMI Port"
        },
        {
            "location": "/HDMI/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion HDMI Port",
            "title": "If any problems arise"
        },
        {
            "location": "/AV_RCA/",
            "text": "A/V RCA 3.5mm Connector\n\n\n\n\n\n\nThe A/V RCA 3.5mm connector is a composite audio/video connection that can be used as an alternate to HDMI, however it is not recommended for use with the Fusion at this time. Support for this port will be supported in a future release.\n\n\nIt is recommended that \nHDMI\n be used for video and audio output\n.\n\n\n\n\nThe black 3.5mm jack connects to the 3.5mm port on the side of the Fusion. The yellow, white and red connectors connect to the corresponding colored ports on a display device such as a television.  \n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: AV RCA Port",
            "title": "AV RCA Port"
        },
        {
            "location": "/AV_RCA/#av-rca-35mm-connector",
            "text": "The A/V RCA 3.5mm connector is a composite audio/video connection that can be used as an alternate to HDMI, however it is not recommended for use with the Fusion at this time. Support for this port will be supported in a future release.  It is recommended that  HDMI  be used for video and audio output .   The black 3.5mm jack connects to the 3.5mm port on the side of the Fusion. The yellow, white and red connectors connect to the corresponding colored ports on a display device such as a television.",
            "title": "A/V RCA 3.5mm Connector"
        },
        {
            "location": "/AV_RCA/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : AV RCA Port",
            "title": "If any problems arise"
        },
        {
            "location": "/USB_Hub/",
            "text": "USB Hub\n\n\n\n\n\n\nThere are 4 USB2.0 ports on the Fusion. A Wi-Fi dongle, offered by Modern Robotics, can connect to one of the USB ports to connect the Fusion to the internet. With the Wi-Fi dongle connected the Fusion can \nconnect to a wireless router\n and access the internet.\n\n\n\n\nUse the USB ports to connect approved devices such as a mouse, keyboard, game controller or camera bringing a new level of robotic customization. For more information on a list of approved devices, contact \nModern Robotics\n.\n\n\n\n\nFor a more in-depth explanation of USB and how it works, go to \nhttps://en.wikipedia.org/wiki/USB\n or click \nhere\n for more Raspberry Pi USB related information.\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion USB Hub",
            "title": "USB Hub"
        },
        {
            "location": "/USB_Hub/#usb-hub",
            "text": "There are 4 USB2.0 ports on the Fusion. A Wi-Fi dongle, offered by Modern Robotics, can connect to one of the USB ports to connect the Fusion to the internet. With the Wi-Fi dongle connected the Fusion can  connect to a wireless router  and access the internet.   Use the USB ports to connect approved devices such as a mouse, keyboard, game controller or camera bringing a new level of robotic customization. For more information on a list of approved devices, contact  Modern Robotics .   For a more in-depth explanation of USB and how it works, go to  https://en.wikipedia.org/wiki/USB  or click  here  for more Raspberry Pi USB related information.",
            "title": "USB Hub"
        },
        {
            "location": "/USB_Hub/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion USB Hub",
            "title": "If any problems arise"
        },
        {
            "location": "/WiFi_Hub/",
            "text": "Wi-Fi Hub\n\n\n\n\n\n\nThe Fusion Controller acts as a Wi-Fi access point. Computers or phones can be used to search for local access points and find the Fusion Access Point by a unique SSID (name). Since the programming device (i.e. computer) is connected via Wi-Fi to the Fusion, there is no internet access.\n\n\n\n\nHow to connect to a Fusion Access Point\n\n\n\n\n\n\nIf internet access is needed, a Modern Robotics Wi-Fi dongle can be connected to any of the available ports on the \nUSB Hub\n. With the Wi-Fi dongle connected, the Fusion can connect to a wireless router.\n\n\n\n\nHow to connect to the Internet\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Wi-Fi Hub",
            "title": "Wi-Fi Hub"
        },
        {
            "location": "/WiFi_Hub/#wi-fi-hub",
            "text": "The Fusion Controller acts as a Wi-Fi access point. Computers or phones can be used to search for local access points and find the Fusion Access Point by a unique SSID (name). Since the programming device (i.e. computer) is connected via Wi-Fi to the Fusion, there is no internet access.   How to connect to a Fusion Access Point    If internet access is needed, a Modern Robotics Wi-Fi dongle can be connected to any of the available ports on the  USB Hub . With the Wi-Fi dongle connected, the Fusion can connect to a wireless router.   How to connect to the Internet",
            "title": "Wi-Fi Hub"
        },
        {
            "location": "/WiFi_Hub/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Wi-Fi Hub",
            "title": "If any problems arise"
        },
        {
            "location": "/Ethernet_Port/",
            "text": "Ethernet Port\n\n\n\n\n\n\nThe Fusion has one ethernet port for directly connecting to the internet. We recommend using a CAT5e or CAT6 ethernet cable.\n\n\n\n\nOne option to access to the internet is to connect an ethernet cable from the router (or modem) to the Fusion. Once the cable is connected, the Fusion will \nconnect to the internet\n automatically.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Ethernet Port",
            "title": "Ethernet Port"
        },
        {
            "location": "/Ethernet_Port/#ethernet-port",
            "text": "The Fusion has one ethernet port for directly connecting to the internet. We recommend using a CAT5e or CAT6 ethernet cable.   One option to access to the internet is to connect an ethernet cable from the router (or modem) to the Fusion. Once the cable is connected, the Fusion will  connect to the internet  automatically.",
            "title": "Ethernet Port"
        },
        {
            "location": "/Ethernet_Port/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Ethernet Port",
            "title": "If any problems arise"
        },
        {
            "location": "/SD_Card/",
            "text": "Micro SD Card Slot\n\n\n\n\nThe Fusion has a Micro SD Card slot in the bottom of the controller. The Micro SD Card contains the operating system and file system of the Fusion.\n\n\n\n\nThe Micro SD Card must be Class 10 with at least 8 GB of space. The Fusion comes with a Micro SD Card preloaded with Fusion software and libraries, ready to run.\n\n\n \n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion SD Card",
            "title": "SD Card"
        },
        {
            "location": "/SD_Card/#micro-sd-card-slot",
            "text": "The Fusion has a Micro SD Card slot in the bottom of the controller. The Micro SD Card contains the operating system and file system of the Fusion.   The Micro SD Card must be Class 10 with at least 8 GB of space. The Fusion comes with a Micro SD Card preloaded with Fusion software and libraries, ready to run.",
            "title": "Micro SD Card Slot"
        },
        {
            "location": "/SD_Card/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion SD Card",
            "title": "If any problems arise"
        },
        {
            "location": "/Basic_Fusion-Control/",
            "text": "Basic Fusion Control\n\n\n\n\n\n\nThe Basic Fusion Control toolbox comes with the necessary Start, LED and Wait blocks.\n\n\nList of available blocks:\n  \n\n\n\n\nStart Block\n\n\nBlue LED ON\n\n\nYellow LED ON\n\n\nBoth LEDs ON\n\n\nBoth LEDs OFF\n\n\nWait\n\n\n\n\nStart Block\n\n\n\n\nInitializes the Fusion Robot at the start of every program. This block must be used in every Blockly program. By default the Start block is included in the programming environment. \n\n\nBlock:\n\n\n\n\n\n\nBlue LED ON\n\n\n\n\nTurn on the Blue LED. Turn off the Yellow LED.\n\n\nBlock:\n\n\n\n\n\n\nYellow LED ON\n\n\n\n\nTurn on the Yellow LED. Turn off the Blue LED.\n\n\nBlock:\n\n\n\n\n\n\nBoth LEDs ON\n\n\n\n\nTurn on the Yellow and Blue LEDs.\n\n\nBlock:\n\n\n\n\n\n\nBoth LEDs OFF\n\n\n\n\nTurn off the Yellow and Blue LEDs.\n\n\nBlock:\n\n\n\n\n\n\nWait\n\n\n\n\nWait 1 Second.\n\n\nBlock:\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Basic Fusion Control",
            "title": "Basic Fusion Control"
        },
        {
            "location": "/Basic_Fusion-Control/#basic-fusion-control",
            "text": "The Basic Fusion Control toolbox comes with the necessary Start, LED and Wait blocks.  List of available blocks:      Start Block  Blue LED ON  Yellow LED ON  Both LEDs ON  Both LEDs OFF  Wait",
            "title": "Basic Fusion Control"
        },
        {
            "location": "/Basic_Fusion-Control/#start-block",
            "text": "Initializes the Fusion Robot at the start of every program. This block must be used in every Blockly program. By default the Start block is included in the programming environment.   Block:",
            "title": "Start Block"
        },
        {
            "location": "/Basic_Fusion-Control/#blue-led-on",
            "text": "Turn on the Blue LED. Turn off the Yellow LED.  Block:",
            "title": "Blue LED ON"
        },
        {
            "location": "/Basic_Fusion-Control/#yellow-led-on",
            "text": "Turn on the Yellow LED. Turn off the Blue LED.  Block:",
            "title": "Yellow LED ON"
        },
        {
            "location": "/Basic_Fusion-Control/#both-leds-on",
            "text": "Turn on the Yellow and Blue LEDs.  Block:",
            "title": "Both LEDs ON"
        },
        {
            "location": "/Basic_Fusion-Control/#both-leds-off",
            "text": "Turn off the Yellow and Blue LEDs.  Block:",
            "title": "Both LEDs OFF"
        },
        {
            "location": "/Basic_Fusion-Control/#wait",
            "text": "Wait 1 Second.  Block:",
            "title": "Wait"
        },
        {
            "location": "/Basic_Fusion-Control/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Basic Fusion Control",
            "title": "If any problems arise"
        },
        {
            "location": "/Basic_Move-Robot/",
            "text": "Basic Move Robot Control\n\n\n\n\n\n\nThe Move toolbox contains blocks to drive the robot forward and backward. There are also basic speed controls included in this toolbox.\n\n\nList of available blocks:\n  \n\n\n\n\nForward\n\n\nBackward\n\n\nFast\n\n\nMedium\n\n\nSlow\n\n\n\n\nForward\n\n\n\n\nDrive forward for 1 second then stop.\n\n\nBlock:\n\n\n\n\n\n\nBackward\n\n\n\n\nDrive reverse for 1 second then stop.\n\n\nBlock:\n\n\n\n\n\n\nFast\n\n\n\n\nChange the default speed to 80.\n\n\nBlock:\n\n\n\n\n\n\nMedium\n\n\n\n\nChange the default speed to 60 (\nDefault\n).\n\n\nBlock:\n\n\n\n\n\n\nSlow\n\n\n\n\nChange the default speed to 20.\n\n\nBlock:\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Basic Move Robot",
            "title": "Basic Move Robot"
        },
        {
            "location": "/Basic_Move-Robot/#basic-move-robot-control",
            "text": "The Move toolbox contains blocks to drive the robot forward and backward. There are also basic speed controls included in this toolbox.  List of available blocks:      Forward  Backward  Fast  Medium  Slow",
            "title": "Basic Move Robot Control"
        },
        {
            "location": "/Basic_Move-Robot/#forward",
            "text": "Drive forward for 1 second then stop.  Block:",
            "title": "Forward"
        },
        {
            "location": "/Basic_Move-Robot/#backward",
            "text": "Drive reverse for 1 second then stop.  Block:",
            "title": "Backward"
        },
        {
            "location": "/Basic_Move-Robot/#fast",
            "text": "Change the default speed to 80.  Block:",
            "title": "Fast"
        },
        {
            "location": "/Basic_Move-Robot/#medium",
            "text": "Change the default speed to 60 ( Default ).  Block:",
            "title": "Medium"
        },
        {
            "location": "/Basic_Move-Robot/#slow",
            "text": "Change the default speed to 20.  Block:",
            "title": "Slow"
        },
        {
            "location": "/Basic_Move-Robot/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Basic Move Robot",
            "title": "If any problems arise"
        },
        {
            "location": "/Basic_Rotate-Robot/",
            "text": "Basic Rotate Robot Control\n\n\n\n\n\n\nThe Rotate toolbox contains blocks to rotate right and left at a variety of angles.\n\n\nList of available blocks:\n  \n\n\n\n\nRotate Right 45\u00b0\n\n\nRotate Right 90\u00b0\n\n\nRotate Right 180\u00b0\n\n\nRotate Left 45\u00b0\n\n\nRotate Left 90\u00b0\n\n\nRotate Left 180\u00b0\n\n\n\n\nRotate Right 45\u00b0\n\n\n\n\nRotates the robot to the right (clockwise) at an angle of 45\u00b0.\n\n\nBlock:\n\n\n\n\n\n\nRotate Right 90\u00b0\n\n\n\n\nRotates the robot to the right (clockwise) at an angle of 90\u00b0.\n\n\nBlock:\n\n\n\n\n\n\nRotate Right 180\u00b0\n\n\n\n\nRotates the robot to the right (clockwise) at an angle of 180\u00b0.\n\n\nBlock:\n\n\n\n\n\n\nRotate Left 45\u00b0\n\n\n\n\nRotates the robot to the left (counter-clockwise) at an angle of 45\u00b0.\n\n\nBlock:\n\n\n\n\n\n\nRotate Left 90\u00b0\n\n\n\n\nRotates the robot to the left (counter-clockwise) at an angle of 90\u00b0.\n\n\nBlock:\n\n\n\n\n\n\nRotate Left 180\u00b0\n\n\n\n\nRotates the robot to the left (counter-clockwise) at an angle of 180\u00b0.\n\n\nBlock:\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Basic Rotate Robot",
            "title": "Basic Rotate Robot"
        },
        {
            "location": "/Basic_Rotate-Robot/#basic-rotate-robot-control",
            "text": "The Rotate toolbox contains blocks to rotate right and left at a variety of angles.  List of available blocks:      Rotate Right 45\u00b0  Rotate Right 90\u00b0  Rotate Right 180\u00b0  Rotate Left 45\u00b0  Rotate Left 90\u00b0  Rotate Left 180\u00b0",
            "title": "Basic Rotate Robot Control"
        },
        {
            "location": "/Basic_Rotate-Robot/#rotate-right-45",
            "text": "Rotates the robot to the right (clockwise) at an angle of 45\u00b0.  Block:",
            "title": "Rotate Right 45\u00b0"
        },
        {
            "location": "/Basic_Rotate-Robot/#rotate-right-90",
            "text": "Rotates the robot to the right (clockwise) at an angle of 90\u00b0.  Block:",
            "title": "Rotate Right 90\u00b0"
        },
        {
            "location": "/Basic_Rotate-Robot/#rotate-right-180",
            "text": "Rotates the robot to the right (clockwise) at an angle of 180\u00b0.  Block:",
            "title": "Rotate Right 180\u00b0"
        },
        {
            "location": "/Basic_Rotate-Robot/#rotate-left-45",
            "text": "Rotates the robot to the left (counter-clockwise) at an angle of 45\u00b0.  Block:",
            "title": "Rotate Left 45\u00b0"
        },
        {
            "location": "/Basic_Rotate-Robot/#rotate-left-90",
            "text": "Rotates the robot to the left (counter-clockwise) at an angle of 90\u00b0.  Block:",
            "title": "Rotate Left 90\u00b0"
        },
        {
            "location": "/Basic_Rotate-Robot/#rotate-left-180",
            "text": "Rotates the robot to the left (counter-clockwise) at an angle of 180\u00b0.  Block:",
            "title": "Rotate Left 180\u00b0"
        },
        {
            "location": "/Basic_Rotate-Robot/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Basic Rotate Robot",
            "title": "If any problems arise"
        },
        {
            "location": "/Int_Fusion-Control/",
            "text": "Intermediate Fusion Control\n\n\n\n\n\n\nThe Intermediate Fusion Control toolbox comes with the necessary Start, LED and End blocks.\n\n\nFusion Driver Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nStart Block\n\n\nFusion LEDs\n\n\nComment\n\n\nEnd Program\n\n\n\n\nStart Block\n\n\n\n\nInitializes the Fusion Robot at the start of every program. This block must be used in every Blockly program. By default the Start block is included in the programming environment. \n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nimport Fusion\nf = Fusion.driver()\n\n\n\n\n\n\n\nLED\n\n\n\n\nControl the on-board Yellow and Blue LEDs. The LEDs can be either \nON\n or \nOFF\n.  \n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nf.setLED(f.YELLOW, 1)\n\n\n\n\n\n\n\nComment\n\n\n\n\nInserts inline comments into the program. This helps to label sections making it easier to find blocks of code.\n\n\n\n\nIn Python a comment is made starting with \n#\n.\n\n\nAccepts ASCII characters.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\n#\n\n\n\n\n\nExample:\n\n\n\n\n\n\n# This is the first comment.\n# This is my second comment.\n# This is my last comment.\n\n\n\n\n\n\n\nEnd Program\n\n\n\n\nStop the current program running.\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nexit()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Intermediate Fusion Control",
            "title": "Intermediate Fusion Control"
        },
        {
            "location": "/Int_Fusion-Control/#intermediate-fusion-control",
            "text": "The Intermediate Fusion Control toolbox comes with the necessary Start, LED and End blocks.  Fusion Driver Python Library Information  List of available blocks:      Start Block  Fusion LEDs  Comment  End Program",
            "title": "Intermediate Fusion Control"
        },
        {
            "location": "/Int_Fusion-Control/#start-block",
            "text": "Initializes the Fusion Robot at the start of every program. This block must be used in every Blockly program. By default the Start block is included in the programming environment.   Block:   Code Produced:   import Fusion\nf = Fusion.driver()",
            "title": "Start Block"
        },
        {
            "location": "/Int_Fusion-Control/#led",
            "text": "Control the on-board Yellow and Blue LEDs. The LEDs can be either  ON  or  OFF .    Block:   Code Produced:   f.setLED(f.YELLOW, 1)",
            "title": "LED"
        },
        {
            "location": "/Int_Fusion-Control/#comment",
            "text": "Inserts inline comments into the program. This helps to label sections making it easier to find blocks of code.   In Python a comment is made starting with  # .  Accepts ASCII characters.   Block:   Code Produced:   #   Example:    # This is the first comment.\n# This is my second comment.\n# This is my last comment.",
            "title": "Comment"
        },
        {
            "location": "/Int_Fusion-Control/#end-program",
            "text": "Stop the current program running.  Block:   Code Produced:   exit()",
            "title": "End Program"
        },
        {
            "location": "/Int_Fusion-Control/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Intermediate Fusion Control",
            "title": "If any problems arise"
        },
        {
            "location": "/Int_Motors/",
            "text": "Motor Control\n\n\n\n\n\n\nThe Motor toolbox contains blocks for motor control.\n\n\n\n\nConnect via motor port \nM0\n or \nM1\n. Connection is bidirectional.\n\n\nMotor Speed ranges from \n-100\n to \n100\n.\n\n\nSpeed of \n0\n is a complete stop.\n\n\n\n\nMotor Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nMotor Speed\n\n\nDrive at Speed\n\n\nDrive at Speed for Time\n\n\nRotate at Speed for Time\n\n\n\n\nMotor Speed\n\n\n\n\nApply power to a single motor port from \n-100\n to \n100\n.  \n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nf.motorSpeed(f.M0, 50)\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\nf.motorSpeed(f.M0, 100)\nf.motorSpeed(f.M1, 100)\ntime.sleep(1)\nf.motorSpeed(f.M0, -100)\nf.motorSpeed(f.M1, -100)\ntime.sleep(1)\nf.motorSpeed(f.M0, 0)\nf.motorSpeed(f.M1, 0)\n\n\n\n\n\n\n\n\n\nDrive at Speed\n\n\n\n\nDrive both motor ports at a set speed from \n-100\n to \n100\n.\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nf.motorSpeed(f.M0+f.M1, 100)\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\nf.motorSpeed(f.M0+f.M1, 100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, -100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)\n\n\n\n\n\n\n\n\n\nDrive at Speed for Time\n\n\n\n\nDrive both motor ports at a set speed from \n-100\n to \n100\n for a set amount of time in seconds.\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\n# Drive forwards with 80% power for 15 seconds\nf.motorSpeed(f.M0+f.M1, 80)\ntime.sleep(15)\nf.motorSpeed(f.M0+f.M1, 0)\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\n# Drive forwards with 100% power for 1 seconds\nf.motorSpeed(f.M0+f.M1, 100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)\n# Drive backwards with -100% power for 1 seconds\nf.motorSpeed(f.M0+f.M1, -100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)\n\n\n\n\n\n\n\n\n\nRotate at Speed for Time\n\n\n\n\nRotate the robot either \nLeft\n or \nRight\n at a set speed from \n-100\n to \n100\n for a set amount of time in seconds. This results in one motor driving forward and the other motor driving backwards at the same speed.\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\n# Turn Left with 50% power for 1.5 seconds\nf.motorSpeed(f.M1, -50)\nf.motorSpeed(f.M0, 50)\ntime.sleep(1.5)\nf.motorSpeed(f.M0+f.M1, 0)\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\n# Turn Right with 70% power for 0.5 seconds\nf.motorSpeed(f.M1, 70);\nf.motorSpeed(f.M0, -70);\ntime.sleep(0.5)\nf.motorSpeed(f.M0+f.M1, 0)\n# Turn Left with 70% power for 1 seconds\nf.motorSpeed(f.M1, -70)\nf.motorSpeed(f.M0, 70)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)\n# Turn Right with 70% power for 2.5 seconds\nf.motorSpeed(f.M1, 70);\nf.motorSpeed(f.M0, -70);\ntime.sleep(2.5)\nf.motorSpeed(f.M0+f.M1, 0)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Intermediate Motor Control",
            "title": "Motors"
        },
        {
            "location": "/Int_Motors/#motor-control",
            "text": "The Motor toolbox contains blocks for motor control.   Connect via motor port  M0  or  M1 . Connection is bidirectional.  Motor Speed ranges from  -100  to  100 .  Speed of  0  is a complete stop.   Motor Python Library Information  List of available blocks:      Motor Speed  Drive at Speed  Drive at Speed for Time  Rotate at Speed for Time",
            "title": "Motor Control"
        },
        {
            "location": "/Int_Motors/#motor-speed",
            "text": "Apply power to a single motor port from  -100  to  100 .    Block:   Code Produced:   f.motorSpeed(f.M0, 50)   Example:    Imports:   import time   Code:   f.motorSpeed(f.M0, 100)\nf.motorSpeed(f.M1, 100)\ntime.sleep(1)\nf.motorSpeed(f.M0, -100)\nf.motorSpeed(f.M1, -100)\ntime.sleep(1)\nf.motorSpeed(f.M0, 0)\nf.motorSpeed(f.M1, 0)",
            "title": "Motor Speed"
        },
        {
            "location": "/Int_Motors/#drive-at-speed",
            "text": "Drive both motor ports at a set speed from  -100  to  100 .  Block:   Code Produced:   f.motorSpeed(f.M0+f.M1, 100)   Example:    Imports:   import time   Code:   f.motorSpeed(f.M0+f.M1, 100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, -100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)",
            "title": "Drive at Speed"
        },
        {
            "location": "/Int_Motors/#drive-at-speed-for-time",
            "text": "Drive both motor ports at a set speed from  -100  to  100  for a set amount of time in seconds.  Block:   Code Produced:   Imports:   import time   Code:   # Drive forwards with 80% power for 15 seconds\nf.motorSpeed(f.M0+f.M1, 80)\ntime.sleep(15)\nf.motorSpeed(f.M0+f.M1, 0)    Example:    Imports:   import time   Code:   # Drive forwards with 100% power for 1 seconds\nf.motorSpeed(f.M0+f.M1, 100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)\n# Drive backwards with -100% power for 1 seconds\nf.motorSpeed(f.M0+f.M1, -100)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)",
            "title": "Drive at Speed for Time"
        },
        {
            "location": "/Int_Motors/#rotate-at-speed-for-time",
            "text": "Rotate the robot either  Left  or  Right  at a set speed from  -100  to  100  for a set amount of time in seconds. This results in one motor driving forward and the other motor driving backwards at the same speed.  Block:   Code Produced:   Imports:   import time   Code:   # Turn Left with 50% power for 1.5 seconds\nf.motorSpeed(f.M1, -50)\nf.motorSpeed(f.M0, 50)\ntime.sleep(1.5)\nf.motorSpeed(f.M0+f.M1, 0)    Example:    Imports:   import time   Code:   # Turn Right with 70% power for 0.5 seconds\nf.motorSpeed(f.M1, 70);\nf.motorSpeed(f.M0, -70);\ntime.sleep(0.5)\nf.motorSpeed(f.M0+f.M1, 0)\n# Turn Left with 70% power for 1 seconds\nf.motorSpeed(f.M1, -70)\nf.motorSpeed(f.M0, 70)\ntime.sleep(1)\nf.motorSpeed(f.M0+f.M1, 0)\n# Turn Right with 70% power for 2.5 seconds\nf.motorSpeed(f.M1, 70);\nf.motorSpeed(f.M0, -70);\ntime.sleep(2.5)\nf.motorSpeed(f.M0+f.M1, 0)",
            "title": "Rotate at Speed for Time"
        },
        {
            "location": "/Int_Motors/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Intermediate Motor Control",
            "title": "If any problems arise"
        },
        {
            "location": "/Int_Servos/",
            "text": "Servo Control\n\n\n\n\n\n\nThe Servo toolbox contains blocks for controlling the four servo ports.\n\n\n\n\nConnect via servo port \nS0\n to \nS3\n.\n\n\nServo Target ranges from \n0\n to \n255\n.\n\n\nValue of \n128\n is the center of rotation and the starting position of a servo.\n\n\n\n\nServo Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nServo Target\n\n\n\n\nServo Target\n\n\n\n\nSet the servo to a set target position from \n0\n to \n255\n. Be careful as Modern Robotics is not responsible for damaged servos due to exceeding mechanical limits.\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nf.servoEnable(f.S0, 1)\n\n\n\n\n\nCode:\n\n\n\n\nf.servoTarget(f.S0, 128)\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nSetup:\n\n\n\n\nf.servoEnable(f.S0, 1)\nf.servoEnable(f.S2, 1)\n\n\n\n\n\nCode:\n\n\n\n\nf.servoTarget(f.S0, 10)\nf.servoTarget(f.S2, 245)\ntime.sleep(1)\nf.servoTarget(f.S0, 245)\nf.servoTarget(f.S2, 10)\ntime.sleep(1)\nf.servoTarget(f.S0, 128)\nf.servoTarget(f.S2, 128)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Intermediate Servo Control",
            "title": "Servos"
        },
        {
            "location": "/Int_Servos/#servo-control",
            "text": "The Servo toolbox contains blocks for controlling the four servo ports.   Connect via servo port  S0  to  S3 .  Servo Target ranges from  0  to  255 .  Value of  128  is the center of rotation and the starting position of a servo.   Servo Python Library Information  List of available blocks:      Servo Target",
            "title": "Servo Control"
        },
        {
            "location": "/Int_Servos/#servo-target",
            "text": "Set the servo to a set target position from  0  to  255 . Be careful as Modern Robotics is not responsible for damaged servos due to exceeding mechanical limits.  Block:   Code Produced:   Setup:   f.servoEnable(f.S0, 1)   Code:   f.servoTarget(f.S0, 128)    Example:    Imports:   import time   Setup:   f.servoEnable(f.S0, 1)\nf.servoEnable(f.S2, 1)   Code:   f.servoTarget(f.S0, 10)\nf.servoTarget(f.S2, 245)\ntime.sleep(1)\nf.servoTarget(f.S0, 245)\nf.servoTarget(f.S2, 10)\ntime.sleep(1)\nf.servoTarget(f.S0, 128)\nf.servoTarget(f.S2, 128)",
            "title": "Servo Target"
        },
        {
            "location": "/Int_Servos/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Intermediate Servo Control",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Analog_Digital/",
            "text": "Generic Analog and Digital Sensors\n\n\n\n\n\n\nThe Analog and Digital Sensors toolbox includes blocks for analog read and digital read/write control.\n\n\n\n\nConnect analog sensors via analog port \nA0\n - \nA7\n.\n\n\nConnect digital sensors via digital port \nD0\n - \nD7\n.  \n\n\n\n\nFusion Driver Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nAnalog Read\n\n\nDigital Read\n\n\nDigital Write\n\n\n\n\nAnalog - Read\n\n\n\n\nRead from the sensor connected to the corresponding analog port.\n\n\n\n\nThe returned reading ranges from \n0\n and \n1023\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nanalog_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\nCode:\n\n\n\n\nanalog_A0.read()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_analog_value = None\nanalog_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\nCode:\n\n\n\n\nmy_analog_value = analog_A0.read()\n\n\n\n\n\n\n\n\n\nDigital - Read\n\n\n\n\nRead from the sensor connected to the corresponding digital port.\n\n\n\n\nThe returned reading is either a \n0\n or \n1\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ndigital_D0 = Fusion.digital(f, f.D7)\n\n\n\n\n\nCode:\n\n\n\n\ndigital_D0.read()\n\n\n\n\n\n\n\n\n\nDigital - Write\n\n\n\n\nWrite to the device connected to the corresponding digital port.\n\n\n\n\nThe value written can be either a \n0\n or \n1\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ndigital_D0 = Fusion.digital(f, f.D0)\n\n\n\n\n\nCode:\n\n\n\n\ndigital_D0.write(0)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Analog/Digital",
            "title": "Analog/Digital Sensors"
        },
        {
            "location": "/Blk_Analog_Digital/#generic-analog-and-digital-sensors",
            "text": "The Analog and Digital Sensors toolbox includes blocks for analog read and digital read/write control.   Connect analog sensors via analog port  A0  -  A7 .  Connect digital sensors via digital port  D0  -  D7 .     Fusion Driver Python Library Information  List of available blocks:      Analog Read  Digital Read  Digital Write",
            "title": "Generic Analog and Digital Sensors"
        },
        {
            "location": "/Blk_Analog_Digital/#analog-read",
            "text": "Read from the sensor connected to the corresponding analog port.   The returned reading ranges from  0  and  1023 .   Block:   Code Produced:   Setup:   analog_A0 = Fusion.analog(f, f.A0)   Code:   analog_A0.read()    Example:    Setup:   my_analog_value = None\nanalog_A0 = Fusion.analog(f, f.A0)   Code:   my_analog_value = analog_A0.read()",
            "title": "Analog - Read"
        },
        {
            "location": "/Blk_Analog_Digital/#digital-read",
            "text": "Read from the sensor connected to the corresponding digital port.   The returned reading is either a  0  or  1 .   Block:   Code Produced:   Setup:   digital_D0 = Fusion.digital(f, f.D7)   Code:   digital_D0.read()",
            "title": "Digital - Read"
        },
        {
            "location": "/Blk_Analog_Digital/#digital-write",
            "text": "Write to the device connected to the corresponding digital port.   The value written can be either a  0  or  1 .   Block:   Code Produced:   Setup:   digital_D0 = Fusion.digital(f, f.D0)   Code:   digital_D0.write(0)",
            "title": "Digital - Write"
        },
        {
            "location": "/Blk_Analog_Digital/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Analog/Digital",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Compass/",
            "text": "Compass (45-2003)\n\n\n\n\n\n\nThe Compass uses a magnetometer and an accelerometer to calculate heading data based on Earth\u2019s magnetic field. The compass can return the heading data, accelerometer data and magnetometer data to the user. Anything that generates a magnetic field must be moved away from the sensor like power cables, motor or magnetic material. This must happen because during calibration the sensor will add an offset to account for other magnetic sources in the area.\n\n\n\n\nConnect via any \nI2C\n port.\n\n\n\n\nCompass Python Library Information\n  \n\n\nList of available blocks:\n  \n\n\n\n\nGet Heading\n\n\nHard Iron Calibration\n\n\nTilt Up Calibration\n\n\nTilt Down Calibration\n\n\nAccelerometer Calibration\n\n\nGet Accelerometer Reading\n\n\nGet Magnetometer Reading\n\n\nScale Accelerometer\n\n\n\n\n\n\nGet Heading\n\n\n\n\nReturns the currently cardinal heading in degrees.\n\n\n\n\nThe returned reading is between \n0\n and \n359\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:  \n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.getHeading()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_compass_heading = None \ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\nmy_compass_heading = compass.getHeading()\n\n\n\n\n\n\n\n\n\nHard Iron Calibration\n\n\n\n\nHard Iron Calibration (HIC) is a method of checking for magnets or an object generating a magnetic field around the sensor and generating an offset to account for the magnetic field. During HIC the sensor must be rotated 360\u00b0 in 5 seconds while keeping a constant pace. Try to start and stop the sensor pointing due North. \n\n\n\n\nRotate 360\u00b0 in 5 seconds while blue LED inside sensor is turned on.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.hardIronCalibration()\n\n\n\n\n\n\n\n\n\nTilt Up Calibration\n\n\n\n\nThis block calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 above the horizon during calibration.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.tiltUp()\n\n\n\n\n\n\n\n\n\nTilt Down Calibration\n\n\n\n\nThis block calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 below the horizon during calibration.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.tiltDown()\n\n\n\n\n\n\n\n\n\nAccelerometer Calibration\n\n\n\n\nThis block will calibrate the \nX\n, \nY\n and \nZ\n values by zeroing them. The \nX\n and \nY\n calibration must be done with the sensor laying flat on the horizon. The \nZ\n must be calibrated with the sensor held vertical. Allow a minimum of 3 seconds for calibration of each step.\n\n\nPosition for \nX\n and \nY\n axis.\n\n\n\n\nPosition for \nZ\n axis.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.nullAccelerometer('X')\n\n\n\n\n\n\n\n\n\nGet Accelerometer Reading\n\n\n\n\nThis block returns the accelerometer values for the \nX\n, \nY\n and \nZ\n axis.\n\n\n\n\nThe returned reading is between \n-32,767\n and \n32,768\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.getAccelerometer()[0]\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport Fusion\nimport time\n\n\n\n\n\nSetup:\n\n\n\n\nf = Fusion.driver()\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\nprint('Lay the sensor flat on a surface for X and Y calibration')\ncompass.nullAccelerometer('X')\ncompass.nullAccelerometer('Y')\ntime.sleep(5)\nprint('Hold the sensor vertical with the wire pointing up')\ncompass.nullAccelerometer('Z')\nwhile True:\n  print(''.join([str(x) for x in ['X: ', compass.getAccelerometer()[0], '    Y: ', compass.getAccelerometer()[1], '    Z: ', compass.getAccelerometer()[2]]]))\n  time.sleep(0.1)\n\n\n\n\n\n\n\n\n\nGet Magnetometer Reading\n\n\n\n\nThis block returns the values of the magnetometer on the \nX\n, \nY\n and \nZ\n axis.\n\n\n\n\nThe returned reading is between \n0\n and \n1023\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.getMagnetometer()[0]\n\n\n\n\n\n\n\n\n\nScale Accelerometer\n\n\n\n\nThis block is called if the user wants to change the sensitivity of the accelerometer reading. First the sensor must be set vertical (Same position as \nZ\n calibration) and hold it there for the duration of the calibration. Once the sensor is in position the program may be ran. Once the program is completed, the scaling value will be updated within the Compass.\n\n\nPostion of sensor during scaling.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncompass = Fusion.compass(f)\n\n\n\n\n\nCode:\n\n\n\n\ncompass.scaleAccelerometer()\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Compass",
            "title": "Compass (45-2003)"
        },
        {
            "location": "/Blk_Compass/#compass-45-2003",
            "text": "The Compass uses a magnetometer and an accelerometer to calculate heading data based on Earth\u2019s magnetic field. The compass can return the heading data, accelerometer data and magnetometer data to the user. Anything that generates a magnetic field must be moved away from the sensor like power cables, motor or magnetic material. This must happen because during calibration the sensor will add an offset to account for other magnetic sources in the area.   Connect via any  I2C  port.   Compass Python Library Information     List of available blocks:      Get Heading  Hard Iron Calibration  Tilt Up Calibration  Tilt Down Calibration  Accelerometer Calibration  Get Accelerometer Reading  Get Magnetometer Reading  Scale Accelerometer",
            "title": "Compass (45-2003)"
        },
        {
            "location": "/Blk_Compass/#get-heading",
            "text": "Returns the currently cardinal heading in degrees.   The returned reading is between  0  and  359 .   Block:   Code Produced:   Setup:     compass = Fusion.compass(f)   Code:   compass.getHeading()    Example:    Setup:   my_compass_heading = None \ncompass = Fusion.compass(f)   Code:   my_compass_heading = compass.getHeading()",
            "title": "Get Heading"
        },
        {
            "location": "/Blk_Compass/#hard-iron-calibration",
            "text": "Hard Iron Calibration (HIC) is a method of checking for magnets or an object generating a magnetic field around the sensor and generating an offset to account for the magnetic field. During HIC the sensor must be rotated 360\u00b0 in 5 seconds while keeping a constant pace. Try to start and stop the sensor pointing due North.    Rotate 360\u00b0 in 5 seconds while blue LED inside sensor is turned on.   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.hardIronCalibration()",
            "title": "Hard Iron Calibration"
        },
        {
            "location": "/Blk_Compass/#tilt-up-calibration",
            "text": "This block calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 above the horizon during calibration.   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.tiltUp()",
            "title": "Tilt Up Calibration"
        },
        {
            "location": "/Blk_Compass/#tilt-down-calibration",
            "text": "This block calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 below the horizon during calibration.   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.tiltDown()",
            "title": "Tilt Down Calibration"
        },
        {
            "location": "/Blk_Compass/#accelerometer-calibration",
            "text": "This block will calibrate the  X ,  Y  and  Z  values by zeroing them. The  X  and  Y  calibration must be done with the sensor laying flat on the horizon. The  Z  must be calibrated with the sensor held vertical. Allow a minimum of 3 seconds for calibration of each step.  Position for  X  and  Y  axis.   Position for  Z  axis.   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.nullAccelerometer('X')",
            "title": "Accelerometer Calibration"
        },
        {
            "location": "/Blk_Compass/#get-accelerometer-reading",
            "text": "This block returns the accelerometer values for the  X ,  Y  and  Z  axis.   The returned reading is between  -32,767  and  32,768 .   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.getAccelerometer()[0]    Example:    Imports:   import Fusion\nimport time   Setup:   f = Fusion.driver()\ncompass = Fusion.compass(f)   Code:   print('Lay the sensor flat on a surface for X and Y calibration')\ncompass.nullAccelerometer('X')\ncompass.nullAccelerometer('Y')\ntime.sleep(5)\nprint('Hold the sensor vertical with the wire pointing up')\ncompass.nullAccelerometer('Z')\nwhile True:\n  print(''.join([str(x) for x in ['X: ', compass.getAccelerometer()[0], '    Y: ', compass.getAccelerometer()[1], '    Z: ', compass.getAccelerometer()[2]]]))\n  time.sleep(0.1)",
            "title": "Get Accelerometer Reading"
        },
        {
            "location": "/Blk_Compass/#get-magnetometer-reading",
            "text": "This block returns the values of the magnetometer on the  X ,  Y  and  Z  axis.   The returned reading is between  0  and  1023 .   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.getMagnetometer()[0]",
            "title": "Get Magnetometer Reading"
        },
        {
            "location": "/Blk_Compass/#scale-accelerometer",
            "text": "This block is called if the user wants to change the sensitivity of the accelerometer reading. First the sensor must be set vertical (Same position as  Z  calibration) and hold it there for the duration of the calibration. Once the sensor is in position the program may be ran. Once the program is completed, the scaling value will be updated within the Compass.  Postion of sensor during scaling.   Block:   Code Produced:   Setup:   compass = Fusion.compass(f)   Code:   compass.scaleAccelerometer()",
            "title": "Scale Accelerometer"
        },
        {
            "location": "/Blk_Compass/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Compass",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Rate_Gyro/",
            "text": "Rate Gyro (45-2004)\n\n\n\n\n\n\nThe Rate Gyro is used to detect the rate of rotation. When the Rate Gyro is completely still, the returned reading is 1.4V which produces a reading of 280\u00b0 \u00b12\u00b0. With the sensor idle at 280\u00b0 a Counter Clockwise (CCW) rotation will increase the value of the reading and then return to 280\u00b0 once movement is stopped. A Clockwise (CW) rotation of the gyro will cause a decrease in the return value and return to 280\u00b0 once the sensor is no longer moving. The readings are accurate to the degree.\n\n\n\n\nConnect via analog port \nA0\n - \nA7\n.\n\n\n\n\nRate Gyro Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nRead\n\n\n\n\n\n\nRead\n\n\n\n\nReturns the current rate of rotation detected by the sensor.\n\n\n\n\nIdle reading is \n280\u00b0\n.\n\n\nCW\n rotation results in an increase (\n+\n) in reading.\n\n\nCCW\n rotation results in a decrease (\n-\n) in reading.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSensor Declaration:\n\n\n\n\nrate_gyro_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\nSensor Code:\n\n\n\n\nrate_gyro_A0.read()\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Rate Gyro",
            "title": "Rate Gyro (45-2004)"
        },
        {
            "location": "/Blk_Rate_Gyro/#rate-gyro-45-2004",
            "text": "The Rate Gyro is used to detect the rate of rotation. When the Rate Gyro is completely still, the returned reading is 1.4V which produces a reading of 280\u00b0 \u00b12\u00b0. With the sensor idle at 280\u00b0 a Counter Clockwise (CCW) rotation will increase the value of the reading and then return to 280\u00b0 once movement is stopped. A Clockwise (CW) rotation of the gyro will cause a decrease in the return value and return to 280\u00b0 once the sensor is no longer moving. The readings are accurate to the degree.   Connect via analog port  A0  -  A7 .   Rate Gyro Python Library Information  List of available blocks:      Read",
            "title": "Rate Gyro (45-2004)"
        },
        {
            "location": "/Blk_Rate_Gyro/#read",
            "text": "Returns the current rate of rotation detected by the sensor.   Idle reading is  280\u00b0 .  CW  rotation results in an increase ( + ) in reading.  CCW  rotation results in a decrease ( - ) in reading.   Block:   Code Produced:   Sensor Declaration:   rate_gyro_A0 = Fusion.analog(f, f.A0)   Sensor Code:   rate_gyro_A0.read()",
            "title": "Read"
        },
        {
            "location": "/Blk_Rate_Gyro/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Rate Gyro",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Integrating_Gyro/",
            "text": "Integrating Gyro (45-2005)\n\n\n\n\n\n\nThe Integrating Gyro uses a 3-axis chip to obtain \nX\n, \nY\n and \nZ\n coordinates as well as an integration of the z-axis to provide heading data. The integrated \nZ\n value is an integration of the z-axis over time and this value is used internally in heading calculations. The LED will blink at 1Hz during normal operation and will remain on during null operation (calibration). Once the null location is set, the sensor will maintain that reference until the sensor is recalibrated or zeroed.\n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nIntegrating Gyro Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nCalibrate\n\n\nZero\n\n\nGet Heading\n\n\n\n\n\n\nCalibrate\n\n\n\n\nSetting the gyro to null will enable the user to calibrate their gyro. The gyro must be kept perfectly still and flat during the null operation. During the null operation, the LED will be on and remain on until calibration is complete. It is recommended that this function be called rarely as this function writes to the EEPROM every time it is called. Therefore set the gyro to \n0\n without writing to the EEPROM, use the \nZero\n block.\n\n\n\n\nTakes up to \n3\n seconds to calibrate.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nint_gyro = Fusion.intGyro(f)\nint_gyro.setNull()\n\n\n\n\n\n\n\nZero\n\n\n\n\nSets the current heading to \n0\n. Does not calibrate the gyro. This is very useful for resetting the returned heading reading without needing to remain still for calibration.\n\n\n\n\nSet \n0\n without calibration.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nint_gyro = Fusion.intGyro(f)\n\n\n\n\n\nCode:\n\n\n\n\nint_gyro.setZero()\n\n\n\n\n\n\n\n\n\nGet Heading\n\n\n\n\nReturns the current heading in degrees.\n\n\n\n\nDegrees\n - Returns the cartesian reading between \n0\n and \n359\n.\n\n\nAbsolute\n - Returns the absolute reading between \n-32,768\n and \n32,768\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSensor Declaration:\n\n\n\n\nint_gyro = Fusion.intGyro(f)\n\n\n\n\n\nSensor Code:\n\n\n\n\nint_gyro.getDegrees()\n\n\n\nor\n\n\nint_gyro.getAbsolute()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nSetup:\n\n\n\n\nint_gyro = Fusion.intGyro(f)\n\n\n\n\n\nCode:\n\n\n\n\nint_gyro.setZero()\nwhile True:\n  print(''.join([str(x) for x in ['Degrees: ', int_gyro.getDegrees(), '    Absolute: ', int_gyro.getAbsolute()]]))\n  time.sleep(0.1)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Integrating Gyro",
            "title": "Integrating Gyro (45-2005)"
        },
        {
            "location": "/Blk_Integrating_Gyro/#integrating-gyro-45-2005",
            "text": "The Integrating Gyro uses a 3-axis chip to obtain  X ,  Y  and  Z  coordinates as well as an integration of the z-axis to provide heading data. The integrated  Z  value is an integration of the z-axis over time and this value is used internally in heading calculations. The LED will blink at 1Hz during normal operation and will remain on during null operation (calibration). Once the null location is set, the sensor will maintain that reference until the sensor is recalibrated or zeroed.   Connect via  I2C  port.   Integrating Gyro Python Library Information  List of available blocks:      Calibrate  Zero  Get Heading",
            "title": "Integrating Gyro (45-2005)"
        },
        {
            "location": "/Blk_Integrating_Gyro/#calibrate",
            "text": "Setting the gyro to null will enable the user to calibrate their gyro. The gyro must be kept perfectly still and flat during the null operation. During the null operation, the LED will be on and remain on until calibration is complete. It is recommended that this function be called rarely as this function writes to the EEPROM every time it is called. Therefore set the gyro to  0  without writing to the EEPROM, use the  Zero  block.   Takes up to  3  seconds to calibrate.   Block:   Code Produced:   int_gyro = Fusion.intGyro(f)\nint_gyro.setNull()",
            "title": "Calibrate"
        },
        {
            "location": "/Blk_Integrating_Gyro/#zero",
            "text": "Sets the current heading to  0 . Does not calibrate the gyro. This is very useful for resetting the returned heading reading without needing to remain still for calibration.   Set  0  without calibration.   Block:   Code Produced:   Setup:   int_gyro = Fusion.intGyro(f)   Code:   int_gyro.setZero()",
            "title": "Zero"
        },
        {
            "location": "/Blk_Integrating_Gyro/#get-heading",
            "text": "Returns the current heading in degrees.   Degrees  - Returns the cartesian reading between  0  and  359 .  Absolute  - Returns the absolute reading between  -32,768  and  32,768 .   Block:   Code Produced:   Sensor Declaration:   int_gyro = Fusion.intGyro(f)   Sensor Code:   int_gyro.getDegrees()  or  int_gyro.getAbsolute()    Example:    Imports:   import time   Setup:   int_gyro = Fusion.intGyro(f)   Code:   int_gyro.setZero()\nwhile True:\n  print(''.join([str(x) for x in ['Degrees: ', int_gyro.getDegrees(), '    Absolute: ', int_gyro.getAbsolute()]]))\n  time.sleep(0.1)",
            "title": "Get Heading"
        },
        {
            "location": "/Blk_Integrating_Gyro/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Integrating Gyro",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Optical_Distance_Sensor/",
            "text": "Optical Distance Sensor (45-2006)\n\n\n\n\n\n\nThe Optical Distance Sensor (ODS) is an analog sensor that uses electro optical proximity detection to calculate distance from an object based on the intensity of the light. This sensor can calculate distances between 1cm to 15cm. Lighter colored objects will return a more accurate and consistent reading, the material also plays a part on the returned value. Try different colors and material to see what works best for you. The ODS can be used for object detection, line detection and the difference between light and dark.\n\n\n\n\nConnect via analog port \nA0\n - \nA7\n.\n\n\n\n\nOptical Distance Sensor Python Library Information\n  \n\n\nList of available blocks:\n  \n\n\n\n\nRead\n\n\n\n\n\n\nRead\n\n\n\n\nRead the proximity of an object using pulsed visible light.\n\n\n\n\nThe returned reading ranges from \n0\n - \n1023\n.\n\n\nDetectable proximity ranges from \n1\n cm to \n15\n cm.\n\n\nReturned reading is an exponential decay.\n\n\nValue increases as the object approached the sensor.\n\n\n\n\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nods_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\nCode:\n\n\n\n\nods_A0.read()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_ods = None\nods_A2 = Fusion.analog(f, f.A2)\n\n\n\n\n\nCode:\n\n\n\n\nmy_ods = ods_A2.read()\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Optical Distance Sensor",
            "title": "Optical Distance Sensor (45-2006)"
        },
        {
            "location": "/Blk_Optical_Distance_Sensor/#optical-distance-sensor-45-2006",
            "text": "The Optical Distance Sensor (ODS) is an analog sensor that uses electro optical proximity detection to calculate distance from an object based on the intensity of the light. This sensor can calculate distances between 1cm to 15cm. Lighter colored objects will return a more accurate and consistent reading, the material also plays a part on the returned value. Try different colors and material to see what works best for you. The ODS can be used for object detection, line detection and the difference between light and dark.   Connect via analog port  A0  -  A7 .   Optical Distance Sensor Python Library Information     List of available blocks:      Read",
            "title": "Optical Distance Sensor (45-2006)"
        },
        {
            "location": "/Blk_Optical_Distance_Sensor/#read",
            "text": "Read the proximity of an object using pulsed visible light.   The returned reading ranges from  0  -  1023 .  Detectable proximity ranges from  1  cm to  15  cm.  Returned reading is an exponential decay.  Value increases as the object approached the sensor.     Block:   Code Produced:   Setup:   ods_A0 = Fusion.analog(f, f.A0)   Code:   ods_A0.read()    Example:    Setup:   my_ods = None\nods_A2 = Fusion.analog(f, f.A2)   Code:   my_ods = ods_A2.read()",
            "title": "Read"
        },
        {
            "location": "/Blk_Optical_Distance_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Optical Distance Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Touch_Sensor/",
            "text": "Touch Sensor (45-2007)\n\n\n\n\n\n\nThe Touch Sensor can be used for an array of different tasks including object detection, a counter, a standard push button and many more. The sensor can be attached to either an analog or digital port and contains a built-in LED which indicates when the sensor is activated. When the button is pressed, the value returned is 1. When the button is not pressed, the value returned is 0.\n\n\n\n\nConnect via digital port \nD0\n - \nD7\n.\n\n\n\n\nTouch Sensor Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nPressed\n\n\n\n\n\n\nPressed\n\n\n\n\nThe Touch Sensor can be used as a toggle or limit switch. \n\n\n\n\nCan be read as either \nPressed\n or \nNot Pressed\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ntouch_D7 = Fusion.digital(f, f.D7)\n\n\n\n\n\nCode:\n\n\n\n\ntouch_D7.read()==1\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\ntouch_D7 = Fusion.digital(f, f.D7)\n\n\n\n\n\nCode:\n\n\n\n\nif touch_D7.read()==1:\n  f.setLED(f.BLUE, 1)\nelse:\n  f.setLED(f.BLUE, 0)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Touch Sensor",
            "title": "Touch Sensor (45-2007)"
        },
        {
            "location": "/Blk_Touch_Sensor/#touch-sensor-45-2007",
            "text": "The Touch Sensor can be used for an array of different tasks including object detection, a counter, a standard push button and many more. The sensor can be attached to either an analog or digital port and contains a built-in LED which indicates when the sensor is activated. When the button is pressed, the value returned is 1. When the button is not pressed, the value returned is 0.   Connect via digital port  D0  -  D7 .   Touch Sensor Python Library Information  List of available blocks:      Pressed",
            "title": "Touch Sensor (45-2007)"
        },
        {
            "location": "/Blk_Touch_Sensor/#pressed",
            "text": "The Touch Sensor can be used as a toggle or limit switch.    Can be read as either  Pressed  or  Not Pressed .   Block:   Code Produced:   Setup:   touch_D7 = Fusion.digital(f, f.D7)   Code:   touch_D7.read()==1    Example:    Setup:   touch_D7 = Fusion.digital(f, f.D7)   Code:   if touch_D7.read()==1:\n  f.setLED(f.BLUE, 1)\nelse:\n  f.setLED(f.BLUE, 0)",
            "title": "Pressed"
        },
        {
            "location": "/Blk_Touch_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Touch Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Range_Sensor/",
            "text": "Range Sensor (45-2008)\n\n\n\n\n\n\nThe Range Sensor combines ultrasonic and optical measuring elements to obtain a reading between 1cm and 255cm. The ultrasonic accurately measures distance to a target up to 255cm away, but it losses accuracy if the object is closer than 5cm. This is where the optical sensor comes into play as it can measure from 1cm out to about 7cm. The target shape and surface material will influence the detectable range.\n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nRange Sensor Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nUltrasonic\n\n\nOptical\n\n\n\n\n\n\nUltrasonic\n\n\n\n\nRead the distance of an object using ultrasonic sound.\n\n\n\n\nReturns reading in centimeters (cm).\n\n\nDetectable distance ranges from \n1\n cm to \n255\n cm.\n\n\nReturned reading is linear.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nrange = Fusion.range(f)\n\n\n\n\n\nCode:\n\n\n\n\nrange.ultrasonic()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_range_ultrasonic = None\nrange = Fusion.range(f)\n\n\n\n\n\nCode:\n\n\n\n\nmy_range_ultrasonic = range.ultrasonic()\n\n\n\n\n\n\n\n\n\nOptical\n\n\n\n\nRead the proximity of an object using infrared light.\n\n\n\n\nThe returned reading ranges from \n0\n - \n1023\n.\n\n\nDetectable proximity ranges from \n1\n cm to \n15\n cm.\n\n\nReturned reading is an exponential decay.\n\n\nValue increases as the object approached the sensor.\n\n\n\n\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nrange = Fusion.range(f)\n\n\n\n\n\nCode:\n\n\n\n\nrange.optical()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_range_optical = None\nrange = Fusion.range(f)\n\n\n\n\n\nCode:\n\n\n\n\nmy_range_optical = range.optical()\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Range Sensor",
            "title": "Range Sensor (45-2008)"
        },
        {
            "location": "/Blk_Range_Sensor/#range-sensor-45-2008",
            "text": "The Range Sensor combines ultrasonic and optical measuring elements to obtain a reading between 1cm and 255cm. The ultrasonic accurately measures distance to a target up to 255cm away, but it losses accuracy if the object is closer than 5cm. This is where the optical sensor comes into play as it can measure from 1cm out to about 7cm. The target shape and surface material will influence the detectable range.   Connect via  I2C  port.   Range Sensor Python Library Information  List of available blocks:      Ultrasonic  Optical",
            "title": "Range Sensor (45-2008)"
        },
        {
            "location": "/Blk_Range_Sensor/#ultrasonic",
            "text": "Read the distance of an object using ultrasonic sound.   Returns reading in centimeters (cm).  Detectable distance ranges from  1  cm to  255  cm.  Returned reading is linear.   Block:   Code Produced:   Setup:   range = Fusion.range(f)   Code:   range.ultrasonic()    Example:    Setup:   my_range_ultrasonic = None\nrange = Fusion.range(f)   Code:   my_range_ultrasonic = range.ultrasonic()",
            "title": "Ultrasonic"
        },
        {
            "location": "/Blk_Range_Sensor/#optical",
            "text": "Read the proximity of an object using infrared light.   The returned reading ranges from  0  -  1023 .  Detectable proximity ranges from  1  cm to  15  cm.  Returned reading is an exponential decay.  Value increases as the object approached the sensor.     Block:   Code Produced:   Setup:   range = Fusion.range(f)   Code:   range.optical()    Example:    Setup:   my_range_optical = None\nrange = Fusion.range(f)   Code:   my_range_optical = range.optical()",
            "title": "Optical"
        },
        {
            "location": "/Blk_Range_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Range Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_IR_Locator_360/",
            "text": "IR Locator 360\u00b0 (45-2009)\n\n\n\n\n\n\nThe IR Locator 360\u00b0 utilizes an array of 4 photodiodes to detect the direction and distance from a 1200Hz or 600Hz pulsed infrared source with a  5\u00b0resolution. Both the 600Hz and 1200Hz frequencies can be read at the same time allowing up to two directional sources to be used. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used. \n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nIR Locator 360\u00b0 Python Library Information\n  \n\n\nList of available blocks:\n  \n\n\n\n\nHeading\n\n\nIntensity\n\n\n\n\n\n\nHeading\n\n\n\n\nReads incoming infrared light in a 360\u00b0 field around the sensor. The returned reading is in 5\u00b0 increments.\n\n\n\n\nRead incoming infrared light at a frequency of \n600Hz\n or \n1200Hz\n.\n\n\nThe returned heading reading ranges from \n0\n - \n71\n.\n\n\nCW\n rotation results in an increase (\n+\n) in reading from \n0\n.\n\n\nCCW\n rotation results in a decrease (\n-\n) in reading from \n71\n.\n\n\n\n\nDegrees\n \n=\n Heading Reading \nx\n 5\u00b0\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nlocator = Fusion.locator360(f)\n\n\n\n\n\nCode:\n\n\n\n\nlocator.getHeading(1200)\n\n\n\n\n\n\n\n\n\nIntensity\n\n\n\n\nMeasures the amount of infrared light being detected which corresponds to the distance between the sensor and source.\n\n\n\n\nRead incoming infrared light at a frequency of \n600Hz\n or \n1200Hz\n.\n\n\nThe returned intensity value increases as the source approaches the sensor.\n\n\nValue is \n0\n if no infrared light is detected.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nlocator = Fusion.locator360(f)\n\n\n\n\n\nCode:\n\n\n\n\nlocator.getIntensity(1200)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly IR Locator 360",
            "title": "IR Locator 360\u00b0 (45-2009)"
        },
        {
            "location": "/Blk_IR_Locator_360/#ir-locator-360-45-2009",
            "text": "The IR Locator 360\u00b0 utilizes an array of 4 photodiodes to detect the direction and distance from a 1200Hz or 600Hz pulsed infrared source with a  5\u00b0resolution. Both the 600Hz and 1200Hz frequencies can be read at the same time allowing up to two directional sources to be used. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used.    Connect via  I2C  port.   IR Locator 360\u00b0 Python Library Information     List of available blocks:      Heading  Intensity",
            "title": "IR Locator 360\u00b0 (45-2009)"
        },
        {
            "location": "/Blk_IR_Locator_360/#heading",
            "text": "Reads incoming infrared light in a 360\u00b0 field around the sensor. The returned reading is in 5\u00b0 increments.   Read incoming infrared light at a frequency of  600Hz  or  1200Hz .  The returned heading reading ranges from  0  -  71 .  CW  rotation results in an increase ( + ) in reading from  0 .  CCW  rotation results in a decrease ( - ) in reading from  71 .   Degrees   =  Heading Reading  x  5\u00b0  Block:   Code Produced:   Setup:   locator = Fusion.locator360(f)   Code:   locator.getHeading(1200)",
            "title": "Heading"
        },
        {
            "location": "/Blk_IR_Locator_360/#intensity",
            "text": "Measures the amount of infrared light being detected which corresponds to the distance between the sensor and source.   Read incoming infrared light at a frequency of  600Hz  or  1200Hz .  The returned intensity value increases as the source approaches the sensor.  Value is  0  if no infrared light is detected.   Block:   Code Produced:   Setup:   locator = Fusion.locator360(f)   Code:   locator.getIntensity(1200)",
            "title": "Intensity"
        },
        {
            "location": "/Blk_IR_Locator_360/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly IR Locator 360",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Light_Sensor/",
            "text": "Light Sensor (45-2015)\n\n\n\n\n\n\nThe Light Sensor detects the ambient light level using a phototransistor. The value returned is a quasi-logarithmic analog value. This means that the Light Sensor can detect slight changes in light and dark environments. A value of 0 indicates no light and a value of 1023 indicates the sensor is flooded with light.\n\n\n\n\nConnect via analog port \nA0\n - \nA7\n.\n\n\n\n\nLight Sensor Python Library Information\n  \n\n\nList of available blocks:\n  \n\n\n\n\nRead\n\n\n\n\n\n\nRead\n\n\n\n\nMeasures the amount of ambient light detected on the top side of the sensor.\n\n\n\n\nThe returned reading ranges from \n0\n - \n1023\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nlight_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\nCode:\n\n\n\n\nlight_A0.read()\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Light Sensor",
            "title": "Light Sensor (45-2015)"
        },
        {
            "location": "/Blk_Light_Sensor/#light-sensor-45-2015",
            "text": "The Light Sensor detects the ambient light level using a phototransistor. The value returned is a quasi-logarithmic analog value. This means that the Light Sensor can detect slight changes in light and dark environments. A value of 0 indicates no light and a value of 1023 indicates the sensor is flooded with light.   Connect via analog port  A0  -  A7 .   Light Sensor Python Library Information     List of available blocks:      Read",
            "title": "Light Sensor (45-2015)"
        },
        {
            "location": "/Blk_Light_Sensor/#read",
            "text": "Measures the amount of ambient light detected on the top side of the sensor.   The returned reading ranges from  0  -  1023 .   Block:   Code Produced:   Setup:   light_A0 = Fusion.analog(f, f.A0)   Code:   light_A0.read()",
            "title": "Read"
        },
        {
            "location": "/Blk_Light_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Light Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Sound_Generator/",
            "text": "Sound Generator (45-2016)\n\n\n\n\n\n\nThe Sound Generator can generate a sound based on volume, pitch and duration. This sensor also can overwrite settings during a tone to change the pitch, volume, or extend the duration of the tone.\n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nSound Generator Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nSet Sound (Blocking)\n\n\nSet Sound\n\n\n\n\n\n\nSet Sound (Blocking)\n\n\n\n\nGenerate a tone based on \nVolume\n, \nPitch\n, \nDuration\n of tone and \nPause\n after the tone. Play a sound for a set duration, then wait for a specified amount of time before continuing on to the next block in the program.\n\n\n\n\nVolume\n - How loud or quiet a sound is. (\nLow\n, \nMedium\n, \nHigh\n, \nMax\n)\n\n\nPitch\n - The frequency at which the tone is played ranges from \n1 Hz\n - \n5000 Hz\n.\n\n\nDuration\n - The length of the tone ranges from \n0.1 sec\n - \n65.5 sec\n.\n\n\nPause\n - The length of time from the end of the current tone until the next block is executed.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nsound = Fusion.sound(f)\n\n\n\n\n\nCode:\n\n\n\n\nsound.setSoundBlocking(1, 440, 1000, 500)\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nsound = Fusion.sound(f)\n\n\n\n\n\nCode:\n\n\n\n\nsound.setSoundBlocking(2, 1500, 1500, 1000)\nsound.setSoundBlocking(0, 3250, 3000, 1500)\n\n\n\n\n\n\n\n\n\nSet Sound\n\n\n\n\nGenerate a tone based on \nVolume\n, \nPitch\n and \nDuration\n of tone. Play a sound for a set duration and continue on to the next block in the program.\n\n\n\n\nVolume\n - How loud or quiet a sound is. (\nLow\n, \nMedium\n, \nHigh\n, \nMax\n)\n\n\nPitch\n - The frequency at which the tone is played ranges from \n1 Hz\n - \n5000 Hz\n.\n\n\nDuration\n - The length of the tone ranges from \n0.1 sec\n - \n2.55 sec\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nsound = Fusion.sound(f)\n\n\n\n\n\nCode:\n\n\n\n\nsound.setSound(3, 1500, 2550);\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nSetup:\n\n\n\n\nsound = Fusion.sound(f)\n\n\n\n\n\nCode:\n\n\n\n\nsound.setSound(3, 2000, 1000)\ntime.sleep(1)\nsound.setSound(0, 2500, 1750)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Sound Generator",
            "title": "Sound Generator (45-2016)"
        },
        {
            "location": "/Blk_Sound_Generator/#sound-generator-45-2016",
            "text": "The Sound Generator can generate a sound based on volume, pitch and duration. This sensor also can overwrite settings during a tone to change the pitch, volume, or extend the duration of the tone.   Connect via  I2C  port.   Sound Generator Python Library Information  List of available blocks:      Set Sound (Blocking)  Set Sound",
            "title": "Sound Generator (45-2016)"
        },
        {
            "location": "/Blk_Sound_Generator/#set-sound-blocking",
            "text": "Generate a tone based on  Volume ,  Pitch ,  Duration  of tone and  Pause  after the tone. Play a sound for a set duration, then wait for a specified amount of time before continuing on to the next block in the program.   Volume  - How loud or quiet a sound is. ( Low ,  Medium ,  High ,  Max )  Pitch  - The frequency at which the tone is played ranges from  1 Hz  -  5000 Hz .  Duration  - The length of the tone ranges from  0.1 sec  -  65.5 sec .  Pause  - The length of time from the end of the current tone until the next block is executed.   Block:   Code Produced:   Setup:   sound = Fusion.sound(f)   Code:   sound.setSoundBlocking(1, 440, 1000, 500)    Example:    Setup:   sound = Fusion.sound(f)   Code:   sound.setSoundBlocking(2, 1500, 1500, 1000)\nsound.setSoundBlocking(0, 3250, 3000, 1500)",
            "title": "Set Sound (Blocking)"
        },
        {
            "location": "/Blk_Sound_Generator/#set-sound",
            "text": "Generate a tone based on  Volume ,  Pitch  and  Duration  of tone. Play a sound for a set duration and continue on to the next block in the program.   Volume  - How loud or quiet a sound is. ( Low ,  Medium ,  High ,  Max )  Pitch  - The frequency at which the tone is played ranges from  1 Hz  -  5000 Hz .  Duration  - The length of the tone ranges from  0.1 sec  -  2.55 sec .   Block:   Code Produced:   Setup:   sound = Fusion.sound(f)   Code:   sound.setSound(3, 1500, 2550);    Example:    Imports:   import time   Setup:   sound = Fusion.sound(f)   Code:   sound.setSound(3, 2000, 1000)\ntime.sleep(1)\nsound.setSound(0, 2500, 1750)",
            "title": "Set Sound"
        },
        {
            "location": "/Blk_Sound_Generator/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Sound Generator",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_IR_Seeker_V3/",
            "text": "IR Seeker V3 (45-2017)\n\n\n\n\n\n\nThe IR Seeker V3 consists of 2 photodiodes to locate the direction and intensity of an IR source relative to the front of the sensor. The sensor can detect pulsed infrared light at 600Hz and 1200Hz with a 150\u00b0 field of view. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used. Overall detection range is based on the intensity of the IR source being used. \n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nIR Seeker V3 Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nHeading\n\n\nIntensity\n\n\n\n\n\n\nHeading\n\n\n\n\nThe value is \n0\n if the source is directly in front with a \n+\n/\n-\n change if the source moves to either side.\n\n\n\n\nRead incoming infrared light at a frequency of \n600Hz\n or \n1200Hz\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nseeker = Fusion.seekerV3(f)\n\n\n\n\n\nCode:\n\n\n\n\nseeker.getHeading(1200)\n\n\n\n\n\n\n\n\n\nIntensity\n\n\n\n\nMeasures the amount of infrared light being detected which corresponds to the distance between the sensor and source.\n\n\n\n\nRead incoming infrared light at a frequency of \n600Hz\n or \n1200Hz\n.\n\n\nThe returned intensity value increases as the source approaches the sensor.\n\n\nValue is \n0\n if no infrared light is detected.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nseeker = Fusion.seekerV3(f)\n\n\n\n\n\nCode:\n\n\n\n\nseeker.getIntensity(1200)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly IR Seeker V3",
            "title": "IR Seeker V3 (45-2017)"
        },
        {
            "location": "/Blk_IR_Seeker_V3/#ir-seeker-v3-45-2017",
            "text": "The IR Seeker V3 consists of 2 photodiodes to locate the direction and intensity of an IR source relative to the front of the sensor. The sensor can detect pulsed infrared light at 600Hz and 1200Hz with a 150\u00b0 field of view. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used. Overall detection range is based on the intensity of the IR source being used.    Connect via  I2C  port.   IR Seeker V3 Python Library Information  List of available blocks:      Heading  Intensity",
            "title": "IR Seeker V3 (45-2017)"
        },
        {
            "location": "/Blk_IR_Seeker_V3/#heading",
            "text": "The value is  0  if the source is directly in front with a  + / -  change if the source moves to either side.   Read incoming infrared light at a frequency of  600Hz  or  1200Hz .   Block:   Code Produced:   Setup:   seeker = Fusion.seekerV3(f)   Code:   seeker.getHeading(1200)",
            "title": "Heading"
        },
        {
            "location": "/Blk_IR_Seeker_V3/#intensity",
            "text": "Measures the amount of infrared light being detected which corresponds to the distance between the sensor and source.   Read incoming infrared light at a frequency of  600Hz  or  1200Hz .  The returned intensity value increases as the source approaches the sensor.  Value is  0  if no infrared light is detected.   Block:   Code Produced:   Setup:   seeker = Fusion.seekerV3(f)   Code:   seeker.getIntensity(1200)",
            "title": "Intensity"
        },
        {
            "location": "/Blk_IR_Seeker_V3/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly IR Seeker V3",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Color_Sensor/",
            "text": "Color Sensor (45-2018)\n\n\n\n\n\n\nThe Color Sensor is used to detect the color of an object or a visible light source. Along with raw and adjusted RGB values, the device can also return a color number corresponding to a the colors listed below in the documentation. Calibration steps must be taken as needed based on the environment and ambient lighting for the most accurate readings. Maximum detection distance of the color sensor is approximately 7cm and it is recommended that during active mode the device is placed at a slight angle to avoid white light reflecting from the LED. \n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nColor Sensor Python Library Information\n  \n\n\nList of available blocks:\n  \n\n\n\n\nSet Mode\n\n\nGet Color Number\n\n\nGet RGB\n\n\n\n\n\n\nSet Mode\n\n\n\n\nSet the reading mode and frequency. Values are saved within the sensor memory, therefore this block only needs to be called when the mode needs to be changed.\n\n\n\n\nMode:\n\n\nActive\n (Default)\n\n\nPassive\n\n\n\n\n\n\nFrequency:\n\n\n60 Hz\n (Default)\n\n\n50 Hz\n\n\n\n\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncolour = Fusion.color(f)\n\n\n\n\n\nCode:\n\n\n\n\ncolour.colorSetup(colour.ACTIVE, colour.SIXTY_HZ)\n\n\n\n\n\n\n\n\n\nGet Color Number\n\n\n\n\nReturns a value representing a color based on the color chart below.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncolour = Fusion.color(f)\n\n\n\n\n\nCode:\n\n\n\n\ncolour.getColorNumber()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_color = None\ncolour = Fusion.color(f)\n\n\n\n\n\nCode:\n\n\n\n\nmy_color = colour.getColorNumber()\n\n\n\n\n\n\n\n\n\nGet RGB\n\n\n\n\nReturns the \nRed\n, \nGreen\n or \nBlue\n reading from the current object in front of the sensor.\n\n\n\n\nCan read the \nRed\n, \nGreen\n or \nBlue\n value.\n\n\nThe returned ranges from \n0\n to \n255\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\ncolour = Fusion.color(f)\n\n\n\n\n\nCode:\n\n\n\n\ncolour.getRGBIndex()[0]\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_red = None\nmy_green = None\nmy_blue = None\ncolour = Fusion.color(f)\n\n\n\n\n\nCode:\n\n\n\n\nmy_red = colour.getRGBIndex()[0]\nmy_green = colour.getRGBIndex()[1]\nmy_blue = colour.getRGBIndex()[2]\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Color Sensor",
            "title": "Color Sensor (45-2018)"
        },
        {
            "location": "/Blk_Color_Sensor/#color-sensor-45-2018",
            "text": "The Color Sensor is used to detect the color of an object or a visible light source. Along with raw and adjusted RGB values, the device can also return a color number corresponding to a the colors listed below in the documentation. Calibration steps must be taken as needed based on the environment and ambient lighting for the most accurate readings. Maximum detection distance of the color sensor is approximately 7cm and it is recommended that during active mode the device is placed at a slight angle to avoid white light reflecting from the LED.    Connect via  I2C  port.   Color Sensor Python Library Information     List of available blocks:      Set Mode  Get Color Number  Get RGB",
            "title": "Color Sensor (45-2018)"
        },
        {
            "location": "/Blk_Color_Sensor/#set-mode",
            "text": "Set the reading mode and frequency. Values are saved within the sensor memory, therefore this block only needs to be called when the mode needs to be changed.   Mode:  Active  (Default)  Passive    Frequency:  60 Hz  (Default)  50 Hz     Block:   Code Produced:   Setup:   colour = Fusion.color(f)   Code:   colour.colorSetup(colour.ACTIVE, colour.SIXTY_HZ)",
            "title": "Set Mode"
        },
        {
            "location": "/Blk_Color_Sensor/#get-color-number",
            "text": "Returns a value representing a color based on the color chart below.   Block:   Code Produced:   Setup:   colour = Fusion.color(f)   Code:   colour.getColorNumber()    Example:    Setup:   my_color = None\ncolour = Fusion.color(f)   Code:   my_color = colour.getColorNumber()",
            "title": "Get Color Number"
        },
        {
            "location": "/Blk_Color_Sensor/#get-rgb",
            "text": "Returns the  Red ,  Green  or  Blue  reading from the current object in front of the sensor.   Can read the  Red ,  Green  or  Blue  value.  The returned ranges from  0  to  255 .   Block:   Code Produced:   Setup:   colour = Fusion.color(f)   Code:   colour.getRGBIndex()[0]    Example:    Setup:   my_red = None\nmy_green = None\nmy_blue = None\ncolour = Fusion.color(f)   Code:   my_red = colour.getRGBIndex()[0]\nmy_green = colour.getRGBIndex()[1]\nmy_blue = colour.getRGBIndex()[2]",
            "title": "Get RGB"
        },
        {
            "location": "/Blk_Color_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Color Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Color_Beacon/",
            "text": "Color Beacon (45-2019)\n\n\n\n\n\n\nThe Color Beacon is used to display one of seven colors or any set custom color based on RGB values.\n\nThe beacon can also indicate \nRed\n/\nBlue\n team colors with the use of a magnet. There is no code or setup needed to operate as a team indicator. There is a Hall Effect sensor located on the left side of the sensors (wire pointed toward you). By holding a magnet over the top of the sensor it will blink green. After the green blink the beacon will be set to \nRed\n, \nBlue\n or \nOff\n. This can be done at any time and will overwrite any custom color or color number. When the beacon is \nRed\n or \nBlue\n from the Hall Effect sensor, it will be locked in that mode until turned \nOff\n using a magnet or disconnecting the sensor.\n\n\n\n\nConnect via \nI2C\n port.\n\n\n\n\nColor Beacon Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nSet Color\n\n\nSet Custom Color\n\n\n\n\n\n\nSet Color\n\n\n\n\nSet the color of the Color Beacon to one of the preset colors.\n\n\n\n\n\n\n\n\nNumber\n\n\nColor\n\n\n\n\n\n\n\n\n\n\n0\n\n\nOff\n\n\n\n\n\n\n1\n\n\nRed\n\n\n\n\n\n\n2\n\n\nGreen\n\n\n\n\n\n\n3\n\n\nYellow\n\n\n\n\n\n\n4\n\n\nBlue\n\n\n\n\n\n\n5\n\n\nPurple\n\n\n\n\n\n\n6\n\n\nTeal\n\n\n\n\n\n\n7\n\n\nWhite\n\n\n\n\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nbeacon = Fusion.colorBeacon(f)\n\n\n\n\n\nCode:\n\n\n\n\nbeacon.setColor(1)\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nImports:\n\n\n\n\nimport time\n\n\n\n\n\nSetup:\n\n\n\n\nbeacon = Fusion.colorBeacon(f)\n\n\n\n\n\nCode:\n\n\n\n\nbeacon.setColor(1)\ntime.sleep(1)\nbeacon.setColor(4)\ntime.sleep(1)\nbeacon.setColor(3)\ntime.sleep(1)\nbeacon.setColor(0)\n\n\n\n\n\n\n\n\n\nSet Custom Color\n\n\n\n\nSet a custom color using Red, Green and Blue (RGB) values.\n\n\n\n\nRGB value ranges from \n0\n - \n255\n.\n\n\nSome online sources may represent the color in hexidecimal (\n0x00\n - \n0xFF\n). Use a hexidecimal to decimal converter to get the appropriate value to enter. You can also use built-in Windows calculator, just change to programmer mode.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nbeacon = Fusion.colorBeacon(f)\n\n\n\n\n\nCode:\n\n\n\n\nbeacon.setCustomColor(100,0,255)\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nbeacon = Fusion.colorBeacon(f)\ncolour = Fusion.color(f)\n\n\n\n\n\nCode:\n\n\n\n\nbeacon.setCustomColor(colour.getRGBIndex()[0],colour.getRGBIndex()[1],colour.getRGBIndex()[2])\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Color Beacon",
            "title": "Color Beacon (45-2019)"
        },
        {
            "location": "/Blk_Color_Beacon/#color-beacon-45-2019",
            "text": "The Color Beacon is used to display one of seven colors or any set custom color based on RGB values. \nThe beacon can also indicate  Red / Blue  team colors with the use of a magnet. There is no code or setup needed to operate as a team indicator. There is a Hall Effect sensor located on the left side of the sensors (wire pointed toward you). By holding a magnet over the top of the sensor it will blink green. After the green blink the beacon will be set to  Red ,  Blue  or  Off . This can be done at any time and will overwrite any custom color or color number. When the beacon is  Red  or  Blue  from the Hall Effect sensor, it will be locked in that mode until turned  Off  using a magnet or disconnecting the sensor.   Connect via  I2C  port.   Color Beacon Python Library Information  List of available blocks:      Set Color  Set Custom Color",
            "title": "Color Beacon (45-2019)"
        },
        {
            "location": "/Blk_Color_Beacon/#set-color",
            "text": "Set the color of the Color Beacon to one of the preset colors.     Number  Color      0  Off    1  Red    2  Green    3  Yellow    4  Blue    5  Purple    6  Teal    7  White     Block:   Code Produced:   Setup:   beacon = Fusion.colorBeacon(f)   Code:   beacon.setColor(1)    Example:    Imports:   import time   Setup:   beacon = Fusion.colorBeacon(f)   Code:   beacon.setColor(1)\ntime.sleep(1)\nbeacon.setColor(4)\ntime.sleep(1)\nbeacon.setColor(3)\ntime.sleep(1)\nbeacon.setColor(0)",
            "title": "Set Color"
        },
        {
            "location": "/Blk_Color_Beacon/#set-custom-color",
            "text": "Set a custom color using Red, Green and Blue (RGB) values.   RGB value ranges from  0  -  255 .  Some online sources may represent the color in hexidecimal ( 0x00  -  0xFF ). Use a hexidecimal to decimal converter to get the appropriate value to enter. You can also use built-in Windows calculator, just change to programmer mode.   Block:   Code Produced:   Setup:   beacon = Fusion.colorBeacon(f)   Code:   beacon.setCustomColor(100,0,255)    Example:    Setup:   beacon = Fusion.colorBeacon(f)\ncolour = Fusion.color(f)   Code:   beacon.setCustomColor(colour.getRGBIndex()[0],colour.getRGBIndex()[1],colour.getRGBIndex()[2])",
            "title": "Set Custom Color"
        },
        {
            "location": "/Blk_Color_Beacon/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Color Beacon",
            "title": "If any problems arise"
        },
        {
            "location": "/Blk_Magnetic_Sensor/",
            "text": "Magnetic Sensor (45-2020)\n\n\n\n\n\n\nThe Magnetic Sensor detects a magnetic field and returns the strength based on the distance between the sensor element and the magnet. The default returned by the sensor when no magnetic field is present is approximately 340. When the returned value is increasing, the sensor is detecting the \"North Pole\" of the magnet. If the value returned is decreasing, then the sensor is detecting the \"South Pole\" of the magnet.\n\n\n\n\nConnect via analog port \nA0\n - \nA7\n.\n\n\n\n\nMagnetic Sensor Python Library Information\n\n\nList of available blocks:\n  \n\n\n\n\nRead\n\n\n\n\n\n\nRead\n\n\n\n\nMeasures the intensity of a magnetic field.\n\n\n\n\nThe returned reading ranges from \n0\n - \n1023\n.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nSetup:\n\n\n\n\nmagnetic_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\nCode:\n\n\n\n\nmagnetic_A0.read()\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\nSetup:\n\n\n\n\nmy_magnet = None\nmagnetic_A3 = Fusion.analog(f, f.A3)\n\n\n\n\n\nCode:\n\n\n\n\nmy_magnet = magnetic_A3.read()\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Blockly Magnetic Sensor",
            "title": "Magnetic Sensor (45-2020)"
        },
        {
            "location": "/Blk_Magnetic_Sensor/#magnetic-sensor-45-2020",
            "text": "The Magnetic Sensor detects a magnetic field and returns the strength based on the distance between the sensor element and the magnet. The default returned by the sensor when no magnetic field is present is approximately 340. When the returned value is increasing, the sensor is detecting the \"North Pole\" of the magnet. If the value returned is decreasing, then the sensor is detecting the \"South Pole\" of the magnet.   Connect via analog port  A0  -  A7 .   Magnetic Sensor Python Library Information  List of available blocks:      Read",
            "title": "Magnetic Sensor (45-2020)"
        },
        {
            "location": "/Blk_Magnetic_Sensor/#read",
            "text": "Measures the intensity of a magnetic field.   The returned reading ranges from  0  -  1023 .   Block:   Code Produced:   Setup:   magnetic_A0 = Fusion.analog(f, f.A0)   Code:   magnetic_A0.read()    Example:    Setup:   my_magnet = None\nmagnetic_A3 = Fusion.analog(f, f.A3)   Code:   my_magnet = magnetic_A3.read()",
            "title": "Read"
        },
        {
            "location": "/Blk_Magnetic_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Blockly Magnetic Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/time/",
            "text": "Time\n\n\n\n\nThe Time toolbox contains blocks for delaying or sleeping the program.\n\n\nWait in Seconds\n\n\n\n\nWait \nX\n number of seconds before continuing to the next line of code.\n\n\n\n\nX\n is a positive number.\n\n\n\n\nBlock:\n\n\n\n\nCode Produced:\n\n\n\n\nImport:\n\n\n\n\nimport time\n\n\n\n\n\nCode:\n\n\n\n\ntime.sleep(1)\n\n\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Blockly Time",
            "title": "Time"
        },
        {
            "location": "/time/#time",
            "text": "The Time toolbox contains blocks for delaying or sleeping the program.",
            "title": "Time"
        },
        {
            "location": "/time/#wait-in-seconds",
            "text": "Wait  X  number of seconds before continuing to the next line of code.   X  is a positive number.   Block:   Code Produced:   Import:   import time   Code:   time.sleep(1)",
            "title": "Wait in Seconds"
        },
        {
            "location": "/time/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Blockly Time",
            "title": "If any problems arise"
        },
        {
            "location": "/Default_Logic/",
            "text": "Logic Conditionals and Comparisons\n\n\n\n\n\n\nConditional statements are central to computer programming.  They make it possible to express statements like:\n\n\n\n\nIf there is a path to the left, turn left.\n\n\nIf score = 100, print \"Well done!\".\n\n\n\n\nSee \nadditional information about conditional statements\n.\n\n\nIf blocks\n\n\n\n\nThe simplest conditional statement is an \nif\n block, as shown:\n\n\n\n\nWhen run, this will compare the value of the variable \nx\n to 100.  If it is larger, \"What a big number!\" will be printed.  Otherwise, nothing happens.\n\n\n\n\nIf-Else blocks\n\n\n\n\nIt is also possible to specify that something should happen if the condition is \nnot\n true, as shown in this example:\n\n\n\n\nAs with the previous block, \"What a big number!\" will be printed if \nx\n > 100; otherwise, \"That's not very big.\" will be printed.\n\n\nAn \nif\n block may have zero or one \nelse\n sections but not more than one.\n\n\n\n\nIf-Else-If blocks\n\n\n\n\nIt is also possible to test multiple conditions with a single \nif\n block by adding \nelse if\n clauses:\n\n\n\n\nThe block first checks if \nx\n > 100, printing \"What a big number!\" if it is.  If it is not, it goes on to check if \nx\n = 42.  If so, it prints \"That's my lucky number.\"  Otherwise, nothing happens.\n\n\nAn \nif\n block may have any number of \nelse if\n sections.  Conditions are evaluated top to bottom until one is satisfied, or until no more conditions are left.\n\n\n\n\n\nIf-Else-If-Else blocks\n\n\n\n\nAs shown here, \nif\n blocks may have both \nelse if\n and \nelse\n sections:\n\n\n\n\nThe \nelse\n section guarantees that some action is performed, even if none of the prior conditions are true.\n\n\nAn \nelse\n section may occur after any number of \nelse if\n sections, including zero.\n\n\n\n\nBlock Modification\n\n\n\n\nOnly the plain \nif\n block appears in the toolbox:\n\n\n\n\nTo add \nelse if\n and \nelse\n clauses, the user needs to click on the gear icon, which opens a new window:\n\n\n\n\nThe user can then drag \nelse if\n and \nelse\n clauses into the \nif\n block, as well as reordering and removing them.  When finished, the user should click on the minus sign, which closes the window, as shown here:\n\n\n\n\nNote that the shapes of the blocks allows any number of \nelse if\n subblocks to be added but only up to one \nelse\n block.\n\n\n\n\nBoolean\n\n\n\n\nBoolean algebra\n is a mathematical system that has two values:\n\n\n\n\ntrue\n\n\nfalse\n\n\n\n\nBoolean values (also called \nconditions\n) are used in these control block, which contain examples:\n\n\n\n\nconditional blocks\n\n\nrepeat blocks\n\n\n\n\nOne of the many examples from those pages is:\n\n\n\n\nIf the value of the variable \nx\n is greater than 100, the condition is \ntrue\n, and the text \"What a big number!\" is printed.  If the value of \nx\n is not greater than 100, the condition is \nfalse\n, and \"That's not very big.\" is printed.\n\n\nBoolean values can also be stored in variables and passed to procedures, the same as number, text, and list values.\n\n\nIf a block expects a Boolean value as an input, it usually interprets an absent input as \nfalse\n.  An example is provided below.  Non-Boolean values cannot be directly plugged in where Boolean values are expected, although it is possible (but inadvisable) to store a non-Boolean value in a variable, then plug that into the input.  Neither of these practices are recommended, and their behaviour could change in future versions of Blockly.\n\n\n\n\nValues\n\n\n\n\nA single block, with a dropdown specifying either \ntrue\n or \nfalse\n, can be used to get a boolean value:\n\n\n\n\n\n\nComparisons\n\n\n\n\nThere are six comparison operators.  Each takes two inputs (normally numbers) and returns true or false depending on how the inputs compare with each other.\n\n\n\n\nThe six operators are: equals, not equals, less than, less than or equal, greater than, greater than or equal.\n\n\n\n\nLogical Operations\n\n\n\n\nThe \nand\n block will return \ntrue\n only if both of its two inputs are also true.\n\n\n\n\nThe \nor\n block will return \ntrue\n if either of its two inputs are true.\n\n\n\n\n\n\n\n\nNot\n\n\n\n\nThe \nnot\n block converts its Boolean input into its opposite.  For example, the result of:\n\n\n\n\nis false.\n\n\nAs mentioned above, if no input is provided, a value of \ntrue\n is assumed, so the following block produces the value \nfalse\n:\n\n\n\n\nLeaving an input empty is not recommended, however.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Blockly Logic",
            "title": "Logic"
        },
        {
            "location": "/Default_Logic/#logic-conditionals-and-comparisons",
            "text": "Conditional statements are central to computer programming.  They make it possible to express statements like:   If there is a path to the left, turn left.  If score = 100, print \"Well done!\".   See  additional information about conditional statements .",
            "title": "Logic Conditionals and Comparisons"
        },
        {
            "location": "/Default_Logic/#if-blocks",
            "text": "The simplest conditional statement is an  if  block, as shown:   When run, this will compare the value of the variable  x  to 100.  If it is larger, \"What a big number!\" will be printed.  Otherwise, nothing happens.",
            "title": "If blocks"
        },
        {
            "location": "/Default_Logic/#if-else-blocks",
            "text": "It is also possible to specify that something should happen if the condition is  not  true, as shown in this example:   As with the previous block, \"What a big number!\" will be printed if  x  > 100; otherwise, \"That's not very big.\" will be printed.  An  if  block may have zero or one  else  sections but not more than one.",
            "title": "If-Else blocks"
        },
        {
            "location": "/Default_Logic/#if-else-if-blocks",
            "text": "It is also possible to test multiple conditions with a single  if  block by adding  else if  clauses:   The block first checks if  x  > 100, printing \"What a big number!\" if it is.  If it is not, it goes on to check if  x  = 42.  If so, it prints \"That's my lucky number.\"  Otherwise, nothing happens.  An  if  block may have any number of  else if  sections.  Conditions are evaluated top to bottom until one is satisfied, or until no more conditions are left.",
            "title": "If-Else-If blocks"
        },
        {
            "location": "/Default_Logic/#if-else-if-else-blocks",
            "text": "As shown here,  if  blocks may have both  else if  and  else  sections:   The  else  section guarantees that some action is performed, even if none of the prior conditions are true.  An  else  section may occur after any number of  else if  sections, including zero.",
            "title": "If-Else-If-Else blocks"
        },
        {
            "location": "/Default_Logic/#block-modification",
            "text": "Only the plain  if  block appears in the toolbox:   To add  else if  and  else  clauses, the user needs to click on the gear icon, which opens a new window:   The user can then drag  else if  and  else  clauses into the  if  block, as well as reordering and removing them.  When finished, the user should click on the minus sign, which closes the window, as shown here:   Note that the shapes of the blocks allows any number of  else if  subblocks to be added but only up to one  else  block.",
            "title": "Block Modification"
        },
        {
            "location": "/Default_Logic/#boolean",
            "text": "Boolean algebra  is a mathematical system that has two values:   true  false   Boolean values (also called  conditions ) are used in these control block, which contain examples:   conditional blocks  repeat blocks   One of the many examples from those pages is:   If the value of the variable  x  is greater than 100, the condition is  true , and the text \"What a big number!\" is printed.  If the value of  x  is not greater than 100, the condition is  false , and \"That's not very big.\" is printed.  Boolean values can also be stored in variables and passed to procedures, the same as number, text, and list values.  If a block expects a Boolean value as an input, it usually interprets an absent input as  false .  An example is provided below.  Non-Boolean values cannot be directly plugged in where Boolean values are expected, although it is possible (but inadvisable) to store a non-Boolean value in a variable, then plug that into the input.  Neither of these practices are recommended, and their behaviour could change in future versions of Blockly.",
            "title": "Boolean"
        },
        {
            "location": "/Default_Logic/#values",
            "text": "A single block, with a dropdown specifying either  true  or  false , can be used to get a boolean value:",
            "title": "Values"
        },
        {
            "location": "/Default_Logic/#comparisons",
            "text": "There are six comparison operators.  Each takes two inputs (normally numbers) and returns true or false depending on how the inputs compare with each other.   The six operators are: equals, not equals, less than, less than or equal, greater than, greater than or equal.",
            "title": "Comparisons"
        },
        {
            "location": "/Default_Logic/#logical-operations",
            "text": "The  and  block will return  true  only if both of its two inputs are also true.   The  or  block will return  true  if either of its two inputs are true.",
            "title": "Logical Operations"
        },
        {
            "location": "/Default_Logic/#not",
            "text": "The  not  block converts its Boolean input into its opposite.  For example, the result of:   is false.  As mentioned above, if no input is provided, a value of  true  is assumed, so the following block produces the value  false :   Leaving an input empty is not recommended, however.",
            "title": "Not"
        },
        {
            "location": "/Default_Logic/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Blockly Logic",
            "title": "If any problems arise"
        },
        {
            "location": "/Default_Loops/",
            "text": "Blocks for Loop Creation\n\n\n\n\n\n\nThe \nControl\n category holds blocks that control whether other blocks placed in their \nbody\n are run.  (For example, in the below \"repeat\" block, the body contains the \"print\" block and its input.)  There are two types of control blocks: \nIf-Else\n (described on their own page) and these, which control how many times the body is run and, in some cases, the value of a variable used within the body.  These structures are called \nloops\n since the body is repeated (possibly) multiple times, reminiscent of a rope containing loops.  Each pass through the loop is called an \niteration\n.\n\n\nRepeat\n\n\nvThe simplest \"repeat\" block runs the code in its body the specified number of times.  For example, the following block will print \"Hello!\" ten times.\n\n\n\n\n\n\n\n\nRepeat While\n\n\n\n\nImagine a game in which a player rolls a die and adds up all of the values rolled as long as the total is less than 30.  The following blocks implement that game:\n\n\n\n\nA variable named \ntotal\n gets an initial value of 0.\n\n\nThe loop begins with a check that \ntotal\n is less than 30.  If so, the blocks in the body are run.\n\n\nA random number in the range 1 to 6 is generated (simulating a die roll) and stored in a variable named \nroll\n.\n\n\nThe number rolled is printed.\n\n\nThe variable \ntotal\n gets increased by \nroll\n.\n\n\nThe end of the loop having been reached, control goes back to step 2.\n\n\n\n\n\n\nWhen the loop completes, any subsequent blocks (not shown) would be run.  In our example, the loop would end after some number of random numbers in the range 1 to 6 had been printed, and the variable \ntotal\n would hold the sum of these numbers, which would be guaranteed to be at least 30.\n\n\nFor more information, see \nwhile loop\n.\n\n\n\n\nRepeat Until\n\n\n\n\n\"Repeat while\" loops repeat their bodies \nwhile\n some condition is true.  Repeat-until loops are similar except that they repeat their bodies \nuntil\n some condition is true.  The following blocks are equivalent to the previous example because the loop contains until \ntotal\n is greater than or equal to 30.\n\n\n\n\n\n\nCount With\n\n\n\n\nThe \ncount with\n block (called a \nfor loop\n in most programming languages) advances a variable from the first value to the second value by the increment amount (third value), running the body once for each value.  For example, the following program prints the numbers 1, 3, and 5.\n\n\n\n\nAs shown by the two following loops, each of which prints the numbers 5, 3, and 1, the first input may be larger than the second.  The behavior is the same whether the increment amount (third value) is positive or negative.\n\n\n\n\n\n\nFor Each\n\n\n\n\nThe \nfor each\n block (see \nForeach\n) is similar, except instead of giving the loop variable values in a numeric sequence, it uses the values from a list in turn.  The following program prints each element of the list: \"alpha\", \"beta\", \"gamma\".\n\n\n\n\n\n\n\n\nLoop Termination Blocks\n\n\n\n\n\n\nMost loops run until the terminating condition (in the case of  \nrepeat\n blocks) is met or until all values have been taken by the loop variable (in the case of \ncount with\n and \nfor each\n loops).  Two rarely needed but occasionally useful blocks provide additional means for controlling loop behavior.  Although the below examples are for \nfor each\n loops, they can be used with any type of loop.\n\n\nContinue with next iteration\n\n\n\n\nThe \ncontinue with next iteration\n (called \ncontinue\n in most programming languages) causes the remaining code in the body to be skipped and for the next iteration (pass) of the loop to begin.\n\n\nThe following program prints \"alpha\" on the first iteration of the loop.  On the second iteration, the \ncontinue with next iteration\n block is run, skipping the printing of \"beta\".  On the final iteration, \"gamma\" is printed.\n\n\n\n\n\n\nBreak out of loop\n\n\n\n\nThe \nbreak out of loop\n block provides \nan early exit from a loop\n.  The following program prints \"alpha\" on the first iteration and \"breaks out\" of the loop on the second iteration when the loop variable is equal to \"beta\".  The third item in the list is never reached.\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Blockly Loops",
            "title": "Loops"
        },
        {
            "location": "/Default_Loops/#blocks-for-loop-creation",
            "text": "The  Control  category holds blocks that control whether other blocks placed in their  body  are run.  (For example, in the below \"repeat\" block, the body contains the \"print\" block and its input.)  There are two types of control blocks:  If-Else  (described on their own page) and these, which control how many times the body is run and, in some cases, the value of a variable used within the body.  These structures are called  loops  since the body is repeated (possibly) multiple times, reminiscent of a rope containing loops.  Each pass through the loop is called an  iteration .",
            "title": "Blocks for Loop Creation"
        },
        {
            "location": "/Default_Loops/#repeat",
            "text": "vThe simplest \"repeat\" block runs the code in its body the specified number of times.  For example, the following block will print \"Hello!\" ten times.",
            "title": "Repeat"
        },
        {
            "location": "/Default_Loops/#repeat-while",
            "text": "Imagine a game in which a player rolls a die and adds up all of the values rolled as long as the total is less than 30.  The following blocks implement that game:   A variable named  total  gets an initial value of 0.  The loop begins with a check that  total  is less than 30.  If so, the blocks in the body are run.  A random number in the range 1 to 6 is generated (simulating a die roll) and stored in a variable named  roll .  The number rolled is printed.  The variable  total  gets increased by  roll .  The end of the loop having been reached, control goes back to step 2.    When the loop completes, any subsequent blocks (not shown) would be run.  In our example, the loop would end after some number of random numbers in the range 1 to 6 had been printed, and the variable  total  would hold the sum of these numbers, which would be guaranteed to be at least 30.  For more information, see  while loop .",
            "title": "Repeat While"
        },
        {
            "location": "/Default_Loops/#repeat-until",
            "text": "\"Repeat while\" loops repeat their bodies  while  some condition is true.  Repeat-until loops are similar except that they repeat their bodies  until  some condition is true.  The following blocks are equivalent to the previous example because the loop contains until  total  is greater than or equal to 30.",
            "title": "Repeat Until"
        },
        {
            "location": "/Default_Loops/#count-with",
            "text": "The  count with  block (called a  for loop  in most programming languages) advances a variable from the first value to the second value by the increment amount (third value), running the body once for each value.  For example, the following program prints the numbers 1, 3, and 5.   As shown by the two following loops, each of which prints the numbers 5, 3, and 1, the first input may be larger than the second.  The behavior is the same whether the increment amount (third value) is positive or negative.",
            "title": "Count With"
        },
        {
            "location": "/Default_Loops/#for-each",
            "text": "The  for each  block (see  Foreach ) is similar, except instead of giving the loop variable values in a numeric sequence, it uses the values from a list in turn.  The following program prints each element of the list: \"alpha\", \"beta\", \"gamma\".",
            "title": "For Each"
        },
        {
            "location": "/Default_Loops/#loop-termination-blocks",
            "text": "Most loops run until the terminating condition (in the case of   repeat  blocks) is met or until all values have been taken by the loop variable (in the case of  count with  and  for each  loops).  Two rarely needed but occasionally useful blocks provide additional means for controlling loop behavior.  Although the below examples are for  for each  loops, they can be used with any type of loop.",
            "title": "Loop Termination Blocks"
        },
        {
            "location": "/Default_Loops/#continue-with-next-iteration",
            "text": "The  continue with next iteration  (called  continue  in most programming languages) causes the remaining code in the body to be skipped and for the next iteration (pass) of the loop to begin.  The following program prints \"alpha\" on the first iteration of the loop.  On the second iteration, the  continue with next iteration  block is run, skipping the printing of \"beta\".  On the final iteration, \"gamma\" is printed.",
            "title": "Continue with next iteration"
        },
        {
            "location": "/Default_Loops/#break-out-of-loop",
            "text": "The  break out of loop  block provides  an early exit from a loop .  The following program prints \"alpha\" on the first iteration and \"breaks out\" of the loop on the second iteration when the loop variable is equal to \"beta\".  The third item in the list is never reached.",
            "title": "Break out of loop"
        },
        {
            "location": "/Default_Loops/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Blockly Loops",
            "title": "If any problems arise"
        },
        {
            "location": "/Text/",
            "text": "Text Toolbox\n\n\n\n\n\n\nThe Text toolbox comes with blocks to print text to the console or make determinations based on the contents of the text.\n\n\nText Creation\n\n\n\n\nThe following block creates the piece of text \"hello\" and stores it in the variable named greeting.\n\n\n\n\nThe create text with block combines (concatenates) the value of the greeting variable and the new text \"world\" to create the text \"helloworld\". Note that there is no space between them, since none was in either original text.\n\n\n\n\nTo increase the number of text inputs, click on the gear icon, which changes the view to:\n\n\n\n\nAdditional inputs are added by dragging an \"item\" block from the gray toolbox on the left into the \"join\" block.\n\n\n\n\nText Modification\n\n\n\n\nThe to...append text block adds the given text to the specified variable. In this case, it changes the value of the variable greeting from \"hello\" to \"hello, there!\"\n\n\n\n\n\n\nText Length\n\n\n\n\nThe length of blocks count the number of letters, numbers, etc., in each text. The length of \"We're #1!\" is 9, and the length of the empty text is 0.\n\n\n  \n\n\n\n\n\n\nChecking for Empty Text\n\n\n\n\nThe is empty block checks whether the given text is empty (has length 0). The result is true in the first case and false in the second.\n\n\n\n\n\n\n\n\nFinding Text\n\n\n\n\nThese blocks can be used to check whether a piece of text is in another piece of text and, if so, where it appears. For example, this asks for the first occurrence of \"e\" in \"hello\". The result is 2.\n\n\n\n\nThis asks for the last occurrence of \"e\" in \"hello\", which, is also 2.\n\n\n\n\nWhether first or last is selected, this block will give the result 0, since \"hello\" does not contain \"z\".\n\n\n\n\n\n\nExtracting Text\n\n\n\n\nExtracting a single character\n\n\n\n\nThis gets \"b\", the second letter in \"abcde\":\n\n\n\n\nThis gets \"d\", the second to last letter in \"abcde\":\n\n\n\n\nThis gets \"a\", the first letter in \"abcde\":\n\n\n\n\nThis gets \"e\", the last letter in \"abcde\":\n\n\n\n\nThis gets any of the 5 letters in \"abcde\" with equal probability:\n\n\n\n\nNone of these modify the text on which the extraction is performed.\n\n\n\n\nExtracting a region of text\n\n\n\n\nThe \nin text...get substring\n block allows a region of text to be extracted, starting with either:\n\n\n\n\nletter  # \n\n\nletter # from end  \n\n\nthe first letter\n\n\n\n\nand ending with:\n\n\n\n\nletter #  \n\n\nletter # from end  \n\n\nthe last letter\n\n\n\n\nIn the following example, \"abc\" is extracted.\n\n\n\n\n\n\n\n\nAdjusting Text Case\n\n\n\n\nThis block creates a version of the input text that is either:\n\n\n\n\nUPPER CASE (all letters upper-case) \n\n\nlower case\n\n\nTitle Case (first letters upper-case, other letters lower-case)\n\n\n\n\nThe result of the following block is \"HELLO\".\n\n\n\n\nNon-alphabetic characters are not affected. Note that this block on text in languages without case, such as Chinese.\n\n\n\n\nTrimming (removing) Spaces\n\n\n\n\nThe following block removes space characters from:\n\n\n\n\nthe beginning of the text\n\n\nthe end of the text\n\n\nboth sides of the text\n\n\n\n\nThe result of the following block is \"hi   there\". (Spaces in the middle of the text are not affected.)\n\n\n\n\n\n\nPrinting Text\n\n\n\n\nThe print block causes the input value to be displayed in the Program Output window at the bottom of the screen.\n\n\n\n\nIf the code is exported it will be printed to the console (screen). In no case is it sent to the printer, as the name might suggest.\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Blockly Text",
            "title": "Text"
        },
        {
            "location": "/Text/#text-toolbox",
            "text": "The Text toolbox comes with blocks to print text to the console or make determinations based on the contents of the text.",
            "title": "Text Toolbox"
        },
        {
            "location": "/Text/#text-creation",
            "text": "The following block creates the piece of text \"hello\" and stores it in the variable named greeting.   The create text with block combines (concatenates) the value of the greeting variable and the new text \"world\" to create the text \"helloworld\". Note that there is no space between them, since none was in either original text.   To increase the number of text inputs, click on the gear icon, which changes the view to:   Additional inputs are added by dragging an \"item\" block from the gray toolbox on the left into the \"join\" block.",
            "title": "Text Creation"
        },
        {
            "location": "/Text/#text-modification",
            "text": "The to...append text block adds the given text to the specified variable. In this case, it changes the value of the variable greeting from \"hello\" to \"hello, there!\"",
            "title": "Text Modification"
        },
        {
            "location": "/Text/#text-length",
            "text": "The length of blocks count the number of letters, numbers, etc., in each text. The length of \"We're #1!\" is 9, and the length of the empty text is 0.",
            "title": "Text Length"
        },
        {
            "location": "/Text/#checking-for-empty-text",
            "text": "The is empty block checks whether the given text is empty (has length 0). The result is true in the first case and false in the second.",
            "title": "Checking for Empty Text"
        },
        {
            "location": "/Text/#finding-text",
            "text": "These blocks can be used to check whether a piece of text is in another piece of text and, if so, where it appears. For example, this asks for the first occurrence of \"e\" in \"hello\". The result is 2.   This asks for the last occurrence of \"e\" in \"hello\", which, is also 2.   Whether first or last is selected, this block will give the result 0, since \"hello\" does not contain \"z\".",
            "title": "Finding Text"
        },
        {
            "location": "/Text/#extracting-text",
            "text": "Extracting a single character   This gets \"b\", the second letter in \"abcde\":   This gets \"d\", the second to last letter in \"abcde\":   This gets \"a\", the first letter in \"abcde\":   This gets \"e\", the last letter in \"abcde\":   This gets any of the 5 letters in \"abcde\" with equal probability:   None of these modify the text on which the extraction is performed.   Extracting a region of text   The  in text...get substring  block allows a region of text to be extracted, starting with either:   letter  #   letter # from end    the first letter   and ending with:   letter #    letter # from end    the last letter   In the following example, \"abc\" is extracted.",
            "title": "Extracting Text"
        },
        {
            "location": "/Text/#adjusting-text-case",
            "text": "This block creates a version of the input text that is either:   UPPER CASE (all letters upper-case)   lower case  Title Case (first letters upper-case, other letters lower-case)   The result of the following block is \"HELLO\".   Non-alphabetic characters are not affected. Note that this block on text in languages without case, such as Chinese.",
            "title": "Adjusting Text Case"
        },
        {
            "location": "/Text/#trimming-removing-spaces",
            "text": "The following block removes space characters from:   the beginning of the text  the end of the text  both sides of the text   The result of the following block is \"hi   there\". (Spaces in the middle of the text are not affected.)",
            "title": "Trimming (removing) Spaces"
        },
        {
            "location": "/Text/#printing-text",
            "text": "The print block causes the input value to be displayed in the Program Output window at the bottom of the screen.   If the code is exported it will be printed to the console (screen). In no case is it sent to the printer, as the name might suggest.",
            "title": "Printing Text"
        },
        {
            "location": "/Text/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Blockly Text",
            "title": "If any problems arise"
        },
        {
            "location": "/Default_Variables/",
            "text": "Variables\n\n\n\n\n\n\nWe use the term \nvariable\n the same as it is used in mathematics and in other programming languages: a named value that can be changed (varies).  \n\n\nVariables can be created in several different ways.\n\n\n\n\nEvery \ncount with\n and \nfor each\n block uses a variable and defines its values.  These values can only be used within the block.  A traditional computer science term for these are loop variables.\n\n\nUser-defined functions (also known as \"procedures\") can define inputs, which creates variables that can be used only within the function.  These are traditionally called \"parameters\" or \"arguments\".\n\n\nUsers may create variables at any time through the \"set\" block.  These are traditionally called \"global variables\".\nBlockly does not support local variables.\n\n\n\n\nDefault Names\n\n\n\n\nWhile users can choose any name for a variable, core Blockly provides a default name, \"item\", as shown in the below picture.  Some applications provide other default values, such as \"value\", also shown below.\n\n\n\n\nDropdown Menu\n\n\n\n\nClicking on a variable's dropdown symbol (triangle) gives the following menu:\n\n\n\n\nThe menu provides the following options.\n\n\n\n\nThe names of all variables defined in the program.\n\n\n\"Rename variable...\", which changes the name of this variable wherever it appears in the program.  Selecting this opens a small window that prompts the user for the new name with the text: \"Rename all %1 variables to:\", where %1 is replaced by the old name (here \"item\").\n\n\n\"New variable...\", which enables the user to enter a new name for the variable, without replacing or changing variables with the old name (here \"item\").  Selecting this opens a small window that prompts the user for the new name with the text \"New variable name:\".\n\n\n\n\n\n\nSet Variable\n\n\n\n\nThe \nset\n block assigns a value to a variable, creating the variable if it doesn't already exist.  For example, this sets the value of the variable named \"age\" to 12.\n\n\n\n\n\n\nGet Variable\n\n\n\n\nThe \nget\n block provides the value stored in a variable, without changing it.\n\n\n\n\nIt is possible, but a bad idea, to write a program in which a \nget\n appears without a corresponding \nset\n.\n\n\n\n\nExample\n\n\n\n\nConsider the following example code:\n\n\n\n\nThe first row of blocks creates a variable named \"age\" and sets its initial value to the number 12.  The second row of blocks gets the value 12, adds 1 to it, and stores the sum (13) into the variable.  The final row displays the message: \"Happy birthday!  You are now 13\"\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Blockly Variables",
            "title": "Variables"
        },
        {
            "location": "/Default_Variables/#variables",
            "text": "We use the term  variable  the same as it is used in mathematics and in other programming languages: a named value that can be changed (varies).    Variables can be created in several different ways.   Every  count with  and  for each  block uses a variable and defines its values.  These values can only be used within the block.  A traditional computer science term for these are loop variables.  User-defined functions (also known as \"procedures\") can define inputs, which creates variables that can be used only within the function.  These are traditionally called \"parameters\" or \"arguments\".  Users may create variables at any time through the \"set\" block.  These are traditionally called \"global variables\".\nBlockly does not support local variables.",
            "title": "Variables"
        },
        {
            "location": "/Default_Variables/#default-names",
            "text": "While users can choose any name for a variable, core Blockly provides a default name, \"item\", as shown in the below picture.  Some applications provide other default values, such as \"value\", also shown below.",
            "title": "Default Names"
        },
        {
            "location": "/Default_Variables/#dropdown-menu",
            "text": "Clicking on a variable's dropdown symbol (triangle) gives the following menu:   The menu provides the following options.   The names of all variables defined in the program.  \"Rename variable...\", which changes the name of this variable wherever it appears in the program.  Selecting this opens a small window that prompts the user for the new name with the text: \"Rename all %1 variables to:\", where %1 is replaced by the old name (here \"item\").  \"New variable...\", which enables the user to enter a new name for the variable, without replacing or changing variables with the old name (here \"item\").  Selecting this opens a small window that prompts the user for the new name with the text \"New variable name:\".",
            "title": "Dropdown Menu"
        },
        {
            "location": "/Default_Variables/#set-variable",
            "text": "The  set  block assigns a value to a variable, creating the variable if it doesn't already exist.  For example, this sets the value of the variable named \"age\" to 12.",
            "title": "Set Variable"
        },
        {
            "location": "/Default_Variables/#get-variable",
            "text": "The  get  block provides the value stored in a variable, without changing it.   It is possible, but a bad idea, to write a program in which a  get  appears without a corresponding  set .",
            "title": "Get Variable"
        },
        {
            "location": "/Default_Variables/#example",
            "text": "Consider the following example code:   The first row of blocks creates a variable named \"age\" and sets its initial value to the number 12.  The second row of blocks gets the value 12, adds 1 to it, and stores the sum (13) into the variable.  The final row displays the message: \"Happy birthday!  You are now 13\"",
            "title": "Example"
        },
        {
            "location": "/Default_Variables/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Blockly Variables",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Constants/",
            "text": "Constants\n\n\n\n\n\n\nLED Attributes\n\n\n\n\nYELLOW\n = 0x00\n\n\nBLUE\n = 0x01\n\n\n\n\nDigital Attributes\n\n\n\n\nINPUT\n = 0x00\n\n\nOUTPUT\n = 0x01\n\n\n\n\nDigital Ports\n\n\n\n\nD0\n = 0x0001\n\n\nD1\n = 0x0002\n\n\nD2\n = 0x0004\n\n\nD3\n = 0x0008\n\n\nD4\n = 0x0010\n\n\nD5\n = 0x0020\n\n\nD6\n = 0x0040\n\n\nD7\n = 0x0080 \n\n\n\n\nAnalog Ports\n\n\n\n\nA0\n = 0x0101\n\n\nA1\n = 0x0102\n\n\nA2\n = 0x0104\n\n\nA3\n = 0x0108\n\n\nA4\n = 0x0110\n\n\nA5\n = 0x0120\n\n\nA6\n = 0x0140\n\n\nA7\n = 0x0180 \n\n\n\n\nI2C Attributes\n\n\n\n\ni2cError\n = None\n\n\n\n\nMotor Attributes\n\n\n\n\nFLOAT\n = 0x00\n\n\nBRAKE\n = 0x01\n\n\n\n\nMotor Ports\n\n\n\n\nM0\n = 0x01\n\n\nM1\n = 0x02\n\n\n\n\nServo Attributes\n\n\n\n\nENABLE\n = 0x01\n\n\nDISABLE\n = 0x00\n\n\n\n\nServo Ports\n\n\n\n\nS0\n = 0x01\n\n\nS1\n = 0x02\n\n\nS2\n = 0x04\n\n\nS3\n = 0x08\n\n\n\n\nSound Generator\n\n\n\n\nLOW\n = 0x00\n\n\nMED\n = 0x01\n\n\nHIGH\n = 0x02\n\n\nMAX\n = 0x03\n\n\n\n\nColor Sensor\n\n\n\n\nACTIVE\n = 0x00\n\n\nPASSIVE\n = 0x01\n\n\nFIFTY_HZ\n = 0x35\n\n\nSIXTY_HZ\n = 0x36",
            "title": "Constants"
        },
        {
            "location": "/Py_Constants/#constants",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/Py_Constants/#led-attributes",
            "text": "YELLOW  = 0x00  BLUE  = 0x01",
            "title": "LED Attributes"
        },
        {
            "location": "/Py_Constants/#digital-attributes",
            "text": "INPUT  = 0x00  OUTPUT  = 0x01",
            "title": "Digital Attributes"
        },
        {
            "location": "/Py_Constants/#digital-ports",
            "text": "D0  = 0x0001  D1  = 0x0002  D2  = 0x0004  D3  = 0x0008  D4  = 0x0010  D5  = 0x0020  D6  = 0x0040  D7  = 0x0080",
            "title": "Digital Ports"
        },
        {
            "location": "/Py_Constants/#analog-ports",
            "text": "A0  = 0x0101  A1  = 0x0102  A2  = 0x0104  A3  = 0x0108  A4  = 0x0110  A5  = 0x0120  A6  = 0x0140  A7  = 0x0180",
            "title": "Analog Ports"
        },
        {
            "location": "/Py_Constants/#i2c-attributes",
            "text": "i2cError  = None",
            "title": "I2C Attributes"
        },
        {
            "location": "/Py_Constants/#motor-attributes",
            "text": "FLOAT  = 0x00  BRAKE  = 0x01",
            "title": "Motor Attributes"
        },
        {
            "location": "/Py_Constants/#motor-ports",
            "text": "M0  = 0x01  M1  = 0x02",
            "title": "Motor Ports"
        },
        {
            "location": "/Py_Constants/#servo-attributes",
            "text": "ENABLE  = 0x01  DISABLE  = 0x00",
            "title": "Servo Attributes"
        },
        {
            "location": "/Py_Constants/#servo-ports",
            "text": "S0  = 0x01  S1  = 0x02  S2  = 0x04  S3  = 0x08",
            "title": "Servo Ports"
        },
        {
            "location": "/Py_Constants/#sound-generator",
            "text": "LOW  = 0x00  MED  = 0x01  HIGH  = 0x02  MAX  = 0x03",
            "title": "Sound Generator"
        },
        {
            "location": "/Py_Constants/#color-sensor",
            "text": "ACTIVE  = 0x00  PASSIVE  = 0x01  FIFTY_HZ  = 0x35  SIXTY_HZ  = 0x36",
            "title": "Color Sensor"
        },
        {
            "location": "/Py_Driver/",
            "text": "Fusion Driver\n\n\n\n\n\n\nThe Fusion Driver Class contains code for base controller functionality, LED control, motor controller, servo control and generic analog/digital control functions. \n\n\nList of available functions:\n  \n\n\n\n\nFusion.driver()\n  \n\n\nreadBattRaw()\n\n\nreadBatt()\n\n\nsetLED(\nled\n, \nvalue\n)\n\n\nanalogRead(\nport\n)\n\n\ndigitalRead(\nport\n)\n\n\ndigitalState(\nport\n, \nstate\n)\n\n\ndigitalWrite(\nport\n, \nstate\n)\n\n\ni2cRead(\naddr\n, \nreg\n, \nlen\n)\n\n\ni2cWrite(\naddr\n, \nreg\n, \nbuf[]\n)\n\n\n\n\nFusion.driver()\n\n\n\n\nDefinition\n\n\n\n\nThe following class is used to provide base functionality of the Fusion control board and provide drivers to interface with the various array of sensors, servos and motors.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nFusion Driver Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\n\n\n\n\n\n\n\nreadBattRaw()\n\n\n\n\nDefinition\n\n\n\n\nRead the raw value of the battery voltage from the on-board ADC converter.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nRaw Voltage\n : int (0 - 1023)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nprint f.readBattRaw()\n\n\n\n\n\n\n\nreadBatt()\n\n\n\n\nDefinition\n\n\n\n\nRead the scaled value of the battery voltage from the on-board ADC converter.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nVoltage\n : float (volts)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nprint f.readBatt()\n\n\n\n\n\n\n\nsetLED(\nled\n, \nvalue\n)\n\n\n\n\nDefinition\n\n\n\n\nSet the selected on-board LED or \nON\n (1) or \nOFF\n (0).\n\n\n\n\nSet LED Visual Programming Block\n\n\n\n\n\n\nParameters\n\n\n\n\nled\n : BLUE or YELLOW\n\n\nvalue\n : int (1 or 0)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.setLED(f.YELLOW, 1)\n\n\n\n\n\n\n\nanalogRead( \nport\n )\n\n\n\n\nDefinition\n\n\n\n\nUsed to read analog devices connected to ports \nA0\n - \nA7\n.\n\n\n\n\nParameters\n\n\n\n\nport\n : A0 - A7\n\n\n\n\nReturns\n\n\n\n\nValue\n : int (0 - 1023)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nprint f.analogRead(f.A0)\n\n\n\n\n\n\n\ndigitalRead(\nport\n)\n\n\n\n\nDefinition\n\n\n\n\nUsed to read digital devices connected to ports \nD0\n - \nD7\n.\n\n\n\n\nParameters\n\n\n\n\nport\n : D0 - D7\n\n\n\n\nReturns\n\n\n\n\nValue\n : int (0 - 1)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nprint f.digitalRead(f.D0)\n\n\n\n\n\n\n\ndigitalState(\nport\n, \nstate\n)\n\n\n\n\nDefinition\n\n\n\n\nSets the state of the selected digital port \nD0\n - \nD7\n as input or output.\n\n\n\n\nParameters\n\n\n\n\nport\n : D0 - D7\n\n\nstate\n : INPUT or OUTPUT\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.digitalState(f.D0, f.OUTPUT)\n\n\n\n\n\n\n\ndigitalWrite(\nport\n, \nstate\n)\n\n\n\n\nDefinition\n\n\n\n\nSets the value of the selected digital port \nD0\n - \nD7\n when in output mode.\n\n\n\n\nParameters\n\n\n\n\nport\n : D0 - D7\n\n\nstate\n : int (1 or 0)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.digitalState(f.D0, f.OUTPUT)\nf.digitalWrite(f.D0, 1)\n\n\n\n\n\n\n\ni2cRead(\naddr\n, \nreg\n, \nlen\n)\n\n\n\n\nDefinition\n\n\n\n\nRead up to 32 bytes from a device on the I2C buffer.\n\n\n\n\nParameters\n\n\n\n\naddr\n : Device I2C Address\n\n\nreg\n : First register to read from\n\n\nlen\n : Number of registers to read\n\n\n\n\nReturns\n\n\n\n\nbuf[reg1, reg2, ...]\n\n\ni2c_error\n : A global value can be read or cleared at any time, displays errors detected during the last I2C transaction. \n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nprint f.i2cRead(0x20, 0x00, 3)\n\n\n\n\n\n\n\ni2cWrite(\naddr\n, \nreg\n, \nbuf[ ]\n )\n\n\n\n\nDefinition\n\n\n\n\nWrite a buffer of up to 32 bytes to a device on the I2C buffer. The length is determined based on the length of the buffer being written.\n\n\n\n\nParameters\n\n\n\n\naddr\n : Device I2C Address\n\n\nreg\n : First register to read from\n\n\nbuf[]\n : Buffer of up to 32 bytes\n\n\n\n\nReturns\n\n\n\n\ni2c_error\n : A global value can be read or cleared at any time, displays errors detected during the last I2C transaction. \n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nbuf = [1, 2]\nf.i2cWrite(0x20, 0x00, buf)\nf.i2cWrite(0x20, 0x02, [3, 4])\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Driver",
            "title": "Fusion Driver"
        },
        {
            "location": "/Py_Driver/#fusion-driver",
            "text": "The Fusion Driver Class contains code for base controller functionality, LED control, motor controller, servo control and generic analog/digital control functions.   List of available functions:      Fusion.driver()     readBattRaw()  readBatt()  setLED( led ,  value )  analogRead( port )  digitalRead( port )  digitalState( port ,  state )  digitalWrite( port ,  state )  i2cRead( addr ,  reg ,  len )  i2cWrite( addr ,  reg ,  buf[] )",
            "title": "Fusion Driver"
        },
        {
            "location": "/Py_Driver/#fusiondriver",
            "text": "Definition   The following class is used to provide base functionality of the Fusion control board and provide drivers to interface with the various array of sensors, servos and motors.   Parameters   None   Returns   Fusion Driver Object   Example   import Fusion\nf = Fusion.driver()",
            "title": "Fusion.driver()"
        },
        {
            "location": "/Py_Driver/#readbattraw",
            "text": "Definition   Read the raw value of the battery voltage from the on-board ADC converter.   Parameters   None   Returns   Raw Voltage  : int (0 - 1023)   Example   import Fusion\nf = Fusion.driver()\nprint f.readBattRaw()",
            "title": "readBattRaw()"
        },
        {
            "location": "/Py_Driver/#readbatt",
            "text": "Definition   Read the scaled value of the battery voltage from the on-board ADC converter.   Parameters   None   Returns   Voltage  : float (volts)   Example   import Fusion\nf = Fusion.driver()\nprint f.readBatt()",
            "title": "readBatt()"
        },
        {
            "location": "/Py_Driver/#setledled-value",
            "text": "Definition   Set the selected on-board LED or  ON  (1) or  OFF  (0).   Set LED Visual Programming Block    Parameters   led  : BLUE or YELLOW  value  : int (1 or 0)   Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.setLED(f.YELLOW, 1)",
            "title": "setLED(led, value)"
        },
        {
            "location": "/Py_Driver/#analogread-port",
            "text": "Definition   Used to read analog devices connected to ports  A0  -  A7 .   Parameters   port  : A0 - A7   Returns   Value  : int (0 - 1023)   Example   import Fusion\nf = Fusion.driver()\nprint f.analogRead(f.A0)",
            "title": "analogRead( port )"
        },
        {
            "location": "/Py_Driver/#digitalreadport",
            "text": "Definition   Used to read digital devices connected to ports  D0  -  D7 .   Parameters   port  : D0 - D7   Returns   Value  : int (0 - 1)   Example   import Fusion\nf = Fusion.driver()\nprint f.digitalRead(f.D0)",
            "title": "digitalRead(port)"
        },
        {
            "location": "/Py_Driver/#digitalstateport-state",
            "text": "Definition   Sets the state of the selected digital port  D0  -  D7  as input or output.   Parameters   port  : D0 - D7  state  : INPUT or OUTPUT   Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.digitalState(f.D0, f.OUTPUT)",
            "title": "digitalState(port, state)"
        },
        {
            "location": "/Py_Driver/#digitalwriteport-state",
            "text": "Definition   Sets the value of the selected digital port  D0  -  D7  when in output mode.   Parameters   port  : D0 - D7  state  : int (1 or 0)   Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.digitalState(f.D0, f.OUTPUT)\nf.digitalWrite(f.D0, 1)",
            "title": "digitalWrite(port, state)"
        },
        {
            "location": "/Py_Driver/#i2creadaddr-reg-len",
            "text": "Definition   Read up to 32 bytes from a device on the I2C buffer.   Parameters   addr  : Device I2C Address  reg  : First register to read from  len  : Number of registers to read   Returns   buf[reg1, reg2, ...]  i2c_error  : A global value can be read or cleared at any time, displays errors detected during the last I2C transaction.    Example   import Fusion\nf = Fusion.driver()\nprint f.i2cRead(0x20, 0x00, 3)",
            "title": "i2cRead(addr, reg, len)"
        },
        {
            "location": "/Py_Driver/#i2cwriteaddr-reg-buf",
            "text": "Definition   Write a buffer of up to 32 bytes to a device on the I2C buffer. The length is determined based on the length of the buffer being written.   Parameters   addr  : Device I2C Address  reg  : First register to read from  buf[]  : Buffer of up to 32 bytes   Returns   i2c_error  : A global value can be read or cleared at any time, displays errors detected during the last I2C transaction.    Example   import Fusion\nf = Fusion.driver()\nbuf = [1, 2]\nf.i2cWrite(0x20, 0x00, buf)\nf.i2cWrite(0x20, 0x02, [3, 4])",
            "title": "i2cWrite(addr, reg, buf[ ] )"
        },
        {
            "location": "/Py_Driver/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Driver",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Motors/",
            "text": "Fusion Motors\n\n\n\n\n\n\nUsing the \nFusion Driver Class\n, this section outlines the available functions for the motor ports. \n\n\nMotor Visual Programming Blocks\n  \n\n\nList of available functions:\n  \n\n\n\n\nmotorMode(\nmotor\n, \nmode\n)\n\n\nmotorSpeed(\nmotor\n, \nspeed\n)\n\n\n\n\nmotorMode(\nmotor\n, \nmode\n)\n\n\n\n\nDefinition\n\n\n\n\nSet the stop mode of the motor on the selected port. \n\n\n\n\nDefault value is \nFLOAT\n.\n\n\nFLOAT\n : Motors spin freely when a value of \n0\n is applied.\n\n\nBRAKE\n : Motors are held in once place when a value of \n0\n is applied.\n\n\n\n\n\n\nParameters\n\n\n\n\nmotor\n : M0 or M1\n\n\nmode\n : FLOAT or BRAKE\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.motorMode(f.M0, f.FLOAT)\n\n\n\nor\n\n\nimport Fusion\nf = Fusion.driver()\nf.motorMode(f.M0+f.M1, f.BRAKE)\n\n\n\n\n\n\n\nmotorSpeed(\nmotor\n, \nspeed\n)\n\n\n\n\nDefinition\n\n\n\n\nSet the speed of the motor on the selected port.\n\n\n\n\nParameters\n\n\n\n\nmotor\n : M0 or M1\n\n\nspeed\n : int (\u00b1100)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.motorSpeed(f.M0, 100)\nf.motorSpeed(f.M1, -100)\n\n\n\nor\n\n\nimport Fusion\nf = Fusion.driver()\nf.motorSpeed(f.M0+f.M1, 100)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Motors",
            "title": "Motors"
        },
        {
            "location": "/Py_Motors/#fusion-motors",
            "text": "Using the  Fusion Driver Class , this section outlines the available functions for the motor ports.   Motor Visual Programming Blocks     List of available functions:      motorMode( motor ,  mode )  motorSpeed( motor ,  speed )",
            "title": "Fusion Motors"
        },
        {
            "location": "/Py_Motors/#motormodemotor-mode",
            "text": "Definition   Set the stop mode of the motor on the selected port.    Default value is  FLOAT .  FLOAT  : Motors spin freely when a value of  0  is applied.  BRAKE  : Motors are held in once place when a value of  0  is applied.    Parameters   motor  : M0 or M1  mode  : FLOAT or BRAKE   Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.motorMode(f.M0, f.FLOAT)  or  import Fusion\nf = Fusion.driver()\nf.motorMode(f.M0+f.M1, f.BRAKE)",
            "title": "motorMode(motor, mode)"
        },
        {
            "location": "/Py_Motors/#motorspeedmotor-speed",
            "text": "Definition   Set the speed of the motor on the selected port.   Parameters   motor  : M0 or M1  speed  : int (\u00b1100)   Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.motorSpeed(f.M0, 100)\nf.motorSpeed(f.M1, -100)  or  import Fusion\nf = Fusion.driver()\nf.motorSpeed(f.M0+f.M1, 100)",
            "title": "motorSpeed(motor, speed)"
        },
        {
            "location": "/Py_Motors/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Motors",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Servos/",
            "text": "Fusion Servos\n\n\n\n\n\n\nUsing the \nFusion Driver Class\n, this section outlines the Fusion servos and their functions. \n\n\nServo Visual Programming Blocks\n\n\nList of available functions:\n  \n\n\n\n\nservoEnable(\nservo\n, \nstate\n, \nextended\n)\n\n\nservoTarget(\nservo\n, \ntarget\n)\n\n\n\n\nservoEnable(\nservo\n, \nstate\n, \nextended\n)\n\n\n\n\nDefinition\n\n\n\n\nEnable or disable the Pulse Width Modulation (PWM) of the selected port. \n\n\n\n\nParameters\n\n\n\n\nservo\n : S0 - S3\n\n\nstate\n : int (0 or 1)\n\n\nextended\n : bool (True / Flase)  \n\n\n\n\nExtends the servo range by modifying the limits of the PWM signal.  \n\n\nFalse\n = 750\u00b5s - 2250\u00b5s (\nDefault\n)  \n\n\nTrue\n = 500\u00b5s - 2500\u00b5s\n\n\nBe careful as Modern Robotics is not responsible for damaged servos due to exceeding mechanical limits.\n\n\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.servoEnable(f.S0, 1)\nf.servoEnable(f.S1, 1, True)\nf.servoEnable(f.S2+f.S3, 1)\n\n\n\n\n\n\n\nservoTarget(\nservo\n, \ntarget\n)\n\n\n\n\nDefinition\n\n\n\n\nSets the target position of the servo on the selected port.\n\n\n\n\nParameters\n\n\n\n\nservo\n : S0 - S3\n\n\ntarget\n : int (0 - 255) (\nDefault\n 128 when enabled) \n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nf.servoTarget(f.S0, 10)\nf.servoTarget(f.S1, 245)\nf.servoTarget(f.S2+f.S3, 128)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Servos",
            "title": "Servos"
        },
        {
            "location": "/Py_Servos/#fusion-servos",
            "text": "Using the  Fusion Driver Class , this section outlines the Fusion servos and their functions.   Servo Visual Programming Blocks  List of available functions:      servoEnable( servo ,  state ,  extended )  servoTarget( servo ,  target )",
            "title": "Fusion Servos"
        },
        {
            "location": "/Py_Servos/#servoenableservo-state-extended",
            "text": "Definition   Enable or disable the Pulse Width Modulation (PWM) of the selected port.    Parameters   servo  : S0 - S3  state  : int (0 or 1)  extended  : bool (True / Flase)     Extends the servo range by modifying the limits of the PWM signal.    False  = 750\u00b5s - 2250\u00b5s ( Default )    True  = 500\u00b5s - 2500\u00b5s  Be careful as Modern Robotics is not responsible for damaged servos due to exceeding mechanical limits.    Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.servoEnable(f.S0, 1)\nf.servoEnable(f.S1, 1, True)\nf.servoEnable(f.S2+f.S3, 1)",
            "title": "servoEnable(servo, state, extended)"
        },
        {
            "location": "/Py_Servos/#servotargetservo-target",
            "text": "Definition   Sets the target position of the servo on the selected port.   Parameters   servo  : S0 - S3  target  : int (0 - 255) ( Default  128 when enabled)    Returns   None   Example   import Fusion\nf = Fusion.driver()\nf.servoTarget(f.S0, 10)\nf.servoTarget(f.S1, 245)\nf.servoTarget(f.S2+f.S3, 128)",
            "title": "servoTarget(servo, target)"
        },
        {
            "location": "/Py_Servos/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Servos",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Compass/",
            "text": "Compass (45-2003)\n\n\n\n\n\n\nThe Compass uses a magnetometer and an accelerometer to calculate heading data based on Earth\u2019s magnetic field. The compass can return the heading data, accelerometer data and magnetometer data to the user. Anything that generates a magnetic field must be moved away from the sensor like power cables, motor or magnetic material. This must happen because during calibration the sensor will add an offset to account for other magnetic sources in the area.\n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x24\n\n\nSensor ID Code\n : 0x63\n\n\nDimensions\n : 32mm x 32mm x 12mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nCompass Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.compass(\ndriver\n, \naddr\n)\n\n\nhardIronCalibration()\n\n\ngetHeading()\n\n\nnullAccelerometer(\naxis\n)\n\n\ngetAccelerometer()\n\n\ntiltUp()\n\n\ntiltDown()\n\n\ngetMagnetometer()\n\n\nscaleAccelerometer())\n\n\n\n\n\n\nFusion.compass(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics Compass and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nCompass Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp1 = Fusion.compass(f)\ncmp2 = Fusion.compass(f, 0x40)\n\n\n\n\n\n\n\nhardIronCalibration()\n\n\n\n\nDefinition\n\n\n\n\nHard Iron Calibration (HIC) is a method of checking for magnets or an object generating a magnetic field around the sensor and generating an offset to account for the magnetic field. During HIC the sensor must be rotated 360\u00b0 in 5 seconds while keeping a constant pace. Try to start and stop the sensor pointing due North. \n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.hardIronCalibration()\n\n\n\n\n\n\n\ngetHeading()\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the heading that ranges between 0\u00b0 and 359\u00b0. The heading is calculated from the accelerometer readings, the magnetometer readings, and the data collected during calibration.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nHeading(Degrees)\n : int (0 - 359)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\nprint cmp.getHeading()\n\n\n\n\n\n\n\nnullAccelerometer(\naxis\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function will calibrate the \nX\n, \nY\n and \nZ\n values by zeroing them. The \nX\n and \nY\n calibration must be done with the sensor laying flat on the horizon. The \nZ\n must be calibrated with the sensor held vertical. Allow a minimum of 3 seconds for calibration.\n\n\nPosition for \nX\n and \nY\n axis.\n\n\n\n\nPosition for \nZ\n axis.\n\n\n\n\n\n\nParameters\n\n\n\n\naxis\n : char ( 'X' , 'Y' , 'Z')\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.nullAccelerometer('X')\ncmp.nullAccelerometer('Y')\ncmp.nullAccelerometer('Z')\n\n\n\n\n\n\n\ngetAccelerometer()\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the accelerometer values for the \nX\n, \nY\n and \nZ\n axis.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nAccelerometer\n : int [ \nX\n , \nY\n , \nZ\n ] (-32,767 - 32,768)\n\n\n\n\nExample\n\n\n\n\nThe following example returns an array of size \n3\n and stores it into the variables \nX\n, \nY\n, and \nZ\n.\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\n(X, Y, Z) = cmp.getAccelerometer()\nprint X\n\n\n\nTo collect a single value instead of the array, reference the index. This will print the \nX\n value.\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\nprint cmp.getAccelerometer()[0]\n\n\n\n\n\n\n\ntiltUp()\n\n\n\n\nDefinition\n\n\n\n\nThis function calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 above the horizon during calibration.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.tiltUp()\n\n\n\n\n\n\n\ntiltDown()\n\n\n\n\nDefinition\n\n\n\n\nThis function calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 below the horizon during calibration.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.tiltDown()\n\n\n\n\n\n\n\ngetMagnetometer()\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the values of the magnetometer on the \nX\n, \nY\n and \nZ\n axis.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nMagnetometer\n : int [ \nX\n , \nY\n , \nZ\n ] (0 - 1023)\n\n\n\n\nExample\n\n\n\n\nThe following example returns an array of size \n3\n and stores it into the variables \nX\n, \nY\n, \nZ\n.\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\n(X, Y, Z) = cmp.getMagnetometer()\nprint X\n\n\n\nTo collect a single value instead of the array, reference the index. This will print the \nX\n value.\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\nprint cmp.getMagnetometer()[0]\n\n\n\n\n\n\n\nscaleAccelerometer()\n\n\n\n\nDefinition\n\n\n\n\nThis function is called if the user wants to change the sensitivity of the accelerometer reading. First the sensor must be set vertical (Same position as \nZ\n calibration) and hold it there for the duration of the calibration. Once the sensor is in position the program may be ran. Once the program is completed, the scaling value will be updated within the Compass.\n\n\nPostion of sensor during scaling.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.scaleAccelerometer()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Compass",
            "title": "Compass (45-2003)'"
        },
        {
            "location": "/Py_Compass/#compass-45-2003",
            "text": "The Compass uses a magnetometer and an accelerometer to calculate heading data based on Earth\u2019s magnetic field. The compass can return the heading data, accelerometer data and magnetometer data to the user. Anything that generates a magnetic field must be moved away from the sensor like power cables, motor or magnetic material. This must happen because during calibration the sensor will add an offset to account for other magnetic sources in the area.   Sensor Type  : Four Wire I2C  Default I2C Address  : 0x24  Sensor ID Code  : 0x63  Dimensions  : 32mm x 32mm x 12mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  Compass Visual Programming Blocks   List of available functions:      Fusion.compass( driver ,  addr )  hardIronCalibration()  getHeading()  nullAccelerometer( axis )  getAccelerometer()  tiltUp()  tiltDown()  getMagnetometer()  scaleAccelerometer())",
            "title": "Compass (45-2003)"
        },
        {
            "location": "/Py_Compass/#fusioncompassdriver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics Compass and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   Compass Object   Example   import Fusion\nf = Fusion.driver()\ncmp1 = Fusion.compass(f)\ncmp2 = Fusion.compass(f, 0x40)",
            "title": "Fusion.compass(driver, addr)"
        },
        {
            "location": "/Py_Compass/#hardironcalibration",
            "text": "Definition   Hard Iron Calibration (HIC) is a method of checking for magnets or an object generating a magnetic field around the sensor and generating an offset to account for the magnetic field. During HIC the sensor must be rotated 360\u00b0 in 5 seconds while keeping a constant pace. Try to start and stop the sensor pointing due North.    Parameters   None   Returns   None   Example   import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.hardIronCalibration()",
            "title": "hardIronCalibration()"
        },
        {
            "location": "/Py_Compass/#getheading",
            "text": "Definition   This function returns the heading that ranges between 0\u00b0 and 359\u00b0. The heading is calculated from the accelerometer readings, the magnetometer readings, and the data collected during calibration.   Parameters   None   Returns   Heading(Degrees)  : int (0 - 359)   Example   import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\nprint cmp.getHeading()",
            "title": "getHeading()"
        },
        {
            "location": "/Py_Compass/#nullaccelerometeraxis",
            "text": "Definition   This function will calibrate the  X ,  Y  and  Z  values by zeroing them. The  X  and  Y  calibration must be done with the sensor laying flat on the horizon. The  Z  must be calibrated with the sensor held vertical. Allow a minimum of 3 seconds for calibration.  Position for  X  and  Y  axis.   Position for  Z  axis.    Parameters   axis  : char ( 'X' , 'Y' , 'Z')   Returns   None   Example   import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.nullAccelerometer('X')\ncmp.nullAccelerometer('Y')\ncmp.nullAccelerometer('Z')",
            "title": "nullAccelerometer(axis)"
        },
        {
            "location": "/Py_Compass/#getaccelerometer",
            "text": "Definition   This function returns the accelerometer values for the  X ,  Y  and  Z  axis.   Parameters   None   Returns   Accelerometer  : int [  X  ,  Y  ,  Z  ] (-32,767 - 32,768)   Example   The following example returns an array of size  3  and stores it into the variables  X ,  Y , and  Z .  import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\n(X, Y, Z) = cmp.getAccelerometer()\nprint X  To collect a single value instead of the array, reference the index. This will print the  X  value.  import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\nprint cmp.getAccelerometer()[0]",
            "title": "getAccelerometer()"
        },
        {
            "location": "/Py_Compass/#tiltup",
            "text": "Definition   This function calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 above the horizon during calibration.    Parameters   None   Returns   None   Example   import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.tiltUp()",
            "title": "tiltUp()"
        },
        {
            "location": "/Py_Compass/#tiltdown",
            "text": "Definition   This function calculates an offset to compensate for the magnetic field not being perfectly horizontal. The sensor must be held 20\u00b0 below the horizon during calibration.    Parameters   None   Returns   None   Example   import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.tiltDown()",
            "title": "tiltDown()"
        },
        {
            "location": "/Py_Compass/#getmagnetometer",
            "text": "Definition   This function returns the values of the magnetometer on the  X ,  Y  and  Z  axis.   Parameters   None   Returns   Magnetometer  : int [  X  ,  Y  ,  Z  ] (0 - 1023)   Example   The following example returns an array of size  3  and stores it into the variables  X ,  Y ,  Z .  import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\n(X, Y, Z) = cmp.getMagnetometer()\nprint X  To collect a single value instead of the array, reference the index. This will print the  X  value.  import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\nprint cmp.getMagnetometer()[0]",
            "title": "getMagnetometer()"
        },
        {
            "location": "/Py_Compass/#scaleaccelerometer",
            "text": "Definition   This function is called if the user wants to change the sensitivity of the accelerometer reading. First the sensor must be set vertical (Same position as  Z  calibration) and hold it there for the duration of the calibration. Once the sensor is in position the program may be ran. Once the program is completed, the scaling value will be updated within the Compass.  Postion of sensor during scaling.    Parameters   None   Returns   None   Example   import Fusion\nf = Fusion.driver()\ncmp = Fusion.compass(f)\ncmp.scaleAccelerometer()",
            "title": "scaleAccelerometer()"
        },
        {
            "location": "/Py_Compass/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Compass",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Rate_Gyro/",
            "text": "Rate Gyro (45-2004)\n\n\n\n\n\n\nThe Rate Gyro is used to detect the rate of rotation. When the Rate Gyro is completely still, the returned reading is 1.4V which produces a reading of 280\u00b0 \u00b12\u00b0. With the sensor idle at 280\u00b0 a Counter Clockwise (CCW) rotation will increase the value of the reading and then return to 280\u00b0 once movement is stopped. A Clockwise (CW) rotation of the gyro will cause a decrease in the return value and return to 280\u00b0 once the sensor is no longer moving. The readings are accurate to the degree.\n\n\n\n\nSensor Type\n : Three Wire Analog\n\n\nDimensions\n : 32mm x 32mm x 12mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Analog 0V - 5V\n\n\nRate Gyro Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\nread()\n\n\n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\n\n\nDefinition\n\n\n\n\nThe following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\nport\n : Analog port the sensor is connected to A0 - A7\n\n\n\n\nReturns\n\n\n\n\nAnalog Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nrate_gyro_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\n\n\nread()\n\n\n\n\nDefinition\n\n\n\n\nReturns the rate of rotation of the sensor. When the sensor stops moving the value will go back to 280.\n\n\n\n\nValue of 280 indicates no rotation detected in either direction.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nRate of Rotation\n : int (0 - 1023)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nrate_gyro_A0 = Fusion.analog(f, f.A0)\nprint rate_gyro_A0.read()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Rate Gyro",
            "title": "Rate Gyro (45-2004)'"
        },
        {
            "location": "/Py_Rate_Gyro/#rate-gyro-45-2004",
            "text": "The Rate Gyro is used to detect the rate of rotation. When the Rate Gyro is completely still, the returned reading is 1.4V which produces a reading of 280\u00b0 \u00b12\u00b0. With the sensor idle at 280\u00b0 a Counter Clockwise (CCW) rotation will increase the value of the reading and then return to 280\u00b0 once movement is stopped. A Clockwise (CW) rotation of the gyro will cause a decrease in the return value and return to 280\u00b0 once the sensor is no longer moving. The readings are accurate to the degree.   Sensor Type  : Three Wire Analog  Dimensions  : 32mm x 32mm x 12mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Analog 0V - 5V  Rate Gyro Visual Programming Blocks   List of available functions:      Fusion.analog( driver ,  port )  read()",
            "title": "Rate Gyro (45-2004)"
        },
        {
            "location": "/Py_Rate_Gyro/#fusionanalogdriver-port",
            "text": "Definition   The following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  port  : Analog port the sensor is connected to A0 - A7   Returns   Analog Object   Example   import Fusion\nf = Fusion.driver()\nrate_gyro_A0 = Fusion.analog(f, f.A0)",
            "title": "Fusion.analog(driver, port)"
        },
        {
            "location": "/Py_Rate_Gyro/#read",
            "text": "Definition   Returns the rate of rotation of the sensor. When the sensor stops moving the value will go back to 280.   Value of 280 indicates no rotation detected in either direction.    Parameters   None   Returns   Rate of Rotation  : int (0 - 1023)   Example   import Fusion\nf = Fusion.driver()\nrate_gyro_A0 = Fusion.analog(f, f.A0)\nprint rate_gyro_A0.read()",
            "title": "read()"
        },
        {
            "location": "/Py_Rate_Gyro/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Rate Gyro",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Integrating_Gyro/",
            "text": "Integrating Gyro (45-2005)\n\n\n\n\n\n\nThe Integrating Gyro uses a 3-axis chip to obtain \nX\n, \nY\n and \nZ\n coordinates as well as an integration of the z-axis to provide heading data. The integrated \nZ\n value is an integration of the z-axis over time and this value is used internally in heading calculations. The LED will blink at 1Hz during normal operation and will remain on during null operation (calibration). Once the null location is set, the sensor will maintain that reference until the sensor is recalibrated or zeroed.\n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x20\n\n\nSensor ID Code\n : 0x47\n\n\nDimensions\n : 32mm x 32mm x 12mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nIntegrating Gyro Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.intGyro(\ndriver\n, \naddr\n)\n\n\nsetNull()\n\n\nsetZero()\n\n\ngetDegrees()\n\n\ngetAbsolute()\n\n\ngetAxis(\naxis\n)\n\n\nsetScale(\nscale\n)\n\n\n\n\n\n\nFusion.intGyro(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics Integrating Gyro and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nIntegrating Gyro Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro1 = Fusion.intGyro(f)\nint_gyro2 = Fusion.intGyro(f, 0x40)\n\n\n\n\n\n\n\nsetNull()\n\n\n\n\nDefinition\n\n\n\n\nSetting the gyro to null will enable the user to calibrate their gyro. The gyro must be kept perfectly still and flat during the null operation. During the null operation, the LED will be on and remain on until calibration is complete. It is recommended that this function be called before starting the main program loop. This function writes to the EEPROM every time it is called. To set the gyro to 0 without writing to the EEPROM, use the \nsetZero()\n function. \n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nint_gyro.setNull()\n\n\n\n\n\n\n\nsetZero()\n\n\n\n\nDefinition\n\n\n\n\nSets the current heading to 0. Does not calibrate the gyro.  This is very useful for resetting the returned heading reading without needing to remain still for calibration.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nint_gyro.setZero()\n\n\n\n\n\n\n\ngetDegrees()\n\n\n\n\nDefinition\n\n\n\n\nReturns the value of the distance rotated from the null location in degrees. The readings are based on the Cartesian coordinate system of 0\u00b0 - 359\u00b0.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nDegrees\n : int (0 - 359)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nprint int_gyro.getDegrees()\n\n\n\n\n\n\n\ngetAbsolute()\n\n\n\n\nDefinition\n\n\n\n\nReturns the value of the total distance rotated from the null location in degrees. Rotating in a Clockwise fashion will produce increasing negative numbers and rotating in a Counter Clockwise direction will produce increasing positive numbers.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nAbsolute\n : int (-32,767 - 32,768)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nprint int_gyro.getAbsolute()\n\n\n\n\n\n\n\ngetAxis(\naxis\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the rate of rotation for a particular axis in degrees.\n\n\n\n\nParameters\n\n\n\n\naxis\n : char ( '\nX\n' , '\nY\n' , '\nZ\n')\n\n\n\n\nReturns\n\n\n\n\nAxis Rotation\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nprint int_gyro.getAxis('X')\n\n\n\n\n\n\n\nsetScale(\nscale\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function allows for scaling on the z-axis. The z-axis scaling coefficient is a 16-bit value meant to scale the heading reading so that more precise measurements can be made.\n\nThe formula for calculating the z-axis scaling coefficient (\nscale\n):\n\n\n\n\nTherefore if an Integrating Gyro rotates 360\u00b0 but the returned heading values read 380\u00b0, (20\u00b0 if reading in degree mode) which is 20\u00b0 over what was expected, then the formula above can be used to scale the reading.  \n\n\nscale\n = Angle Rotated / Heading Value\n\n\nscale\n = 360 / 380\n\n\nscale\n = .947\n\n\nThen the setScale(\nscale\n) function can be called with the \nscale\n that was found during calculations.\n\n\nint_gyro.setScale(.947)\n\n\nOnce the value is set using this function, it will be saved in EEPROM. Therefore it only needs to be called once to be set and the only way to change the value it to call the function again.\n\n\n\n\nParameters\n\n\n\n\nscale\n : float\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nint_gyro.setScale(.947)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Integrating Gyro",
            "title": "Integrating Gyro (45-2005)"
        },
        {
            "location": "/Py_Integrating_Gyro/#integrating-gyro-45-2005",
            "text": "The Integrating Gyro uses a 3-axis chip to obtain  X ,  Y  and  Z  coordinates as well as an integration of the z-axis to provide heading data. The integrated  Z  value is an integration of the z-axis over time and this value is used internally in heading calculations. The LED will blink at 1Hz during normal operation and will remain on during null operation (calibration). Once the null location is set, the sensor will maintain that reference until the sensor is recalibrated or zeroed.   Sensor Type  : Four Wire I2C  Default I2C Address  : 0x20  Sensor ID Code  : 0x47  Dimensions  : 32mm x 32mm x 12mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  Integrating Gyro Visual Programming Blocks   List of available functions:      Fusion.intGyro( driver ,  addr )  setNull()  setZero()  getDegrees()  getAbsolute()  getAxis( axis )  setScale( scale )",
            "title": "Integrating Gyro (45-2005)"
        },
        {
            "location": "/Py_Integrating_Gyro/#fusionintgyrodriver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics Integrating Gyro and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   Integrating Gyro Object   Example   import Fusion\nf = Fusion.driver()\nint_gyro1 = Fusion.intGyro(f)\nint_gyro2 = Fusion.intGyro(f, 0x40)",
            "title": "Fusion.intGyro(driver, addr)"
        },
        {
            "location": "/Py_Integrating_Gyro/#setnull",
            "text": "Definition   Setting the gyro to null will enable the user to calibrate their gyro. The gyro must be kept perfectly still and flat during the null operation. During the null operation, the LED will be on and remain on until calibration is complete. It is recommended that this function be called before starting the main program loop. This function writes to the EEPROM every time it is called. To set the gyro to 0 without writing to the EEPROM, use the  setZero()  function.    Parameters   None   Returns   None   Example   import Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nint_gyro.setNull()",
            "title": "setNull()"
        },
        {
            "location": "/Py_Integrating_Gyro/#setzero",
            "text": "Definition   Sets the current heading to 0. Does not calibrate the gyro.  This is very useful for resetting the returned heading reading without needing to remain still for calibration.   Parameters   None   Returns   None   Example   import Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nint_gyro.setZero()",
            "title": "setZero()"
        },
        {
            "location": "/Py_Integrating_Gyro/#getdegrees",
            "text": "Definition   Returns the value of the distance rotated from the null location in degrees. The readings are based on the Cartesian coordinate system of 0\u00b0 - 359\u00b0.   Parameters   None   Returns   Degrees  : int (0 - 359)   Example   import Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nprint int_gyro.getDegrees()",
            "title": "getDegrees()"
        },
        {
            "location": "/Py_Integrating_Gyro/#getabsolute",
            "text": "Definition   Returns the value of the total distance rotated from the null location in degrees. Rotating in a Clockwise fashion will produce increasing negative numbers and rotating in a Counter Clockwise direction will produce increasing positive numbers.   Parameters   None   Returns   Absolute  : int (-32,767 - 32,768)   Example   import Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nprint int_gyro.getAbsolute()",
            "title": "getAbsolute()"
        },
        {
            "location": "/Py_Integrating_Gyro/#getaxisaxis",
            "text": "Definition   This function returns the rate of rotation for a particular axis in degrees.   Parameters   axis  : char ( ' X ' , ' Y ' , ' Z ')   Returns   Axis Rotation   Example   import Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nprint int_gyro.getAxis('X')",
            "title": "getAxis(axis)"
        },
        {
            "location": "/Py_Integrating_Gyro/#setscalescale",
            "text": "Definition   This function allows for scaling on the z-axis. The z-axis scaling coefficient is a 16-bit value meant to scale the heading reading so that more precise measurements can be made. \nThe formula for calculating the z-axis scaling coefficient ( scale ):   Therefore if an Integrating Gyro rotates 360\u00b0 but the returned heading values read 380\u00b0, (20\u00b0 if reading in degree mode) which is 20\u00b0 over what was expected, then the formula above can be used to scale the reading.    scale  = Angle Rotated / Heading Value  scale  = 360 / 380  scale  = .947  Then the setScale( scale ) function can be called with the  scale  that was found during calculations.  int_gyro.setScale(.947)  Once the value is set using this function, it will be saved in EEPROM. Therefore it only needs to be called once to be set and the only way to change the value it to call the function again.   Parameters   scale  : float   Returns   None   Example   import Fusion\nf = Fusion.driver()\nint_gyro = Fusion.intGyro(f)\nint_gyro.setScale(.947)",
            "title": "setScale(scale)"
        },
        {
            "location": "/Py_Integrating_Gyro/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Integrating Gyro",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Optical_Distance_Sensor/",
            "text": "Optical Distance Sensor (45-2006)\n\n\n\n\n\n\nThe Optical Distance Sensor (ODS) is an analog sensor that uses electro optical proximity detection to calculate distance from an object based on the intensity of the light. This sensor can calculate distances between 1cm to 15cm. Lighter colored objects will return a more accurate and consistent reading, the material also plays a part on the returned value. Try different colors and material to see what works best for you. The ODS can be used for object detection, line detection and the difference between light and dark.\n\n\n\n\nSensor Type\n : Three Wire Analog\n\n\nDimensions\n : 32mm x 32mm x 12mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Analog 0V - 5V\n\n\nOptical Distance Sensor Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\nread()\n\n\n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\n\n\nDefinition\n\n\n\n\nThe following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\nport\n : Analog port the sensor is connected to A0 - A7\n\n\n\n\nReturns\n\n\n\n\nAnalog Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nods_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\n\n\nread()\n\n\n\n\nDefinition\n\n\n\n\nThe optical element works by emitting pulsed visible light from on LED and receiving pulsed visible light to the photodiode. The optical value can detect objects within 15cm. As an object approaches the optical element the returned value will increase at an exponential rate.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nProximity\n : int (0 - 1023)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nods_A0 = Fusion.analog(f, f.A0)\nprint ods_A0.read()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Optical Distance Sensor",
            "title": "Optical Distance Sensor (45-2006)"
        },
        {
            "location": "/Py_Optical_Distance_Sensor/#optical-distance-sensor-45-2006",
            "text": "The Optical Distance Sensor (ODS) is an analog sensor that uses electro optical proximity detection to calculate distance from an object based on the intensity of the light. This sensor can calculate distances between 1cm to 15cm. Lighter colored objects will return a more accurate and consistent reading, the material also plays a part on the returned value. Try different colors and material to see what works best for you. The ODS can be used for object detection, line detection and the difference between light and dark.   Sensor Type  : Three Wire Analog  Dimensions  : 32mm x 32mm x 12mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Analog 0V - 5V  Optical Distance Sensor Visual Programming Blocks   List of available functions:      Fusion.analog( driver ,  port )  read()",
            "title": "Optical Distance Sensor (45-2006)"
        },
        {
            "location": "/Py_Optical_Distance_Sensor/#fusionanalogdriver-port",
            "text": "Definition   The following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  port  : Analog port the sensor is connected to A0 - A7   Returns   Analog Object   Example   import Fusion\nf = Fusion.driver()\nods_A0 = Fusion.analog(f, f.A0)",
            "title": "Fusion.analog(driver, port)"
        },
        {
            "location": "/Py_Optical_Distance_Sensor/#read",
            "text": "Definition   The optical element works by emitting pulsed visible light from on LED and receiving pulsed visible light to the photodiode. The optical value can detect objects within 15cm. As an object approaches the optical element the returned value will increase at an exponential rate.   Parameters   None   Returns   Proximity  : int (0 - 1023)   Example   import Fusion\nf = Fusion.driver()\nods_A0 = Fusion.analog(f, f.A0)\nprint ods_A0.read()",
            "title": "read()"
        },
        {
            "location": "/Py_Optical_Distance_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Optical Distance Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Touch_Sensor/",
            "text": "Touch Sensor (45-2007)\n\n\n\n\n\n\nThe Touch Sensor can be used for an array of different tasks including object detection, a counter, a standard push button and many more. The sensor can be attached to either an analog or digital port and contains a built-in LED which indicates when the sensor is activated. When the button is pressed, the value returned is 1. When the button is not pressed, the value returned is 0.\n\n\n\n\nSensor Type\n : Three Wire Digital\n\n\nDimensions\n : 36mm x 32mm x 15mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nTouch Sensor Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.digital(\ndriver\n, \nport\n)\n\n\nread()\n\n\n\n\n\n\nFusion.digital(\ndriver\n, \nport\n)\n\n\n\n\nDefinition\n\n\n\n\nThe following class provides a wrapper for the digital function to tie sensor names directly to the port and read all in one simple motion. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\nport\n : Digital port the sensor is connected to D0 - D7\n\n\n\n\nReturns\n\n\n\n\nDigital Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ntouch_D7 = Fusion.digital(f, f.D7)\n\n\n\n\n\n\n\nread()\n\n\n\n\nDefinition\n\n\n\n\nReturns the current digital value of the sensor.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nPressed\n : int (0 - 1)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ntouch_D7 = Fusion.digital(f, f.D7)\nprint touch_D7.read()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Touch Sensor",
            "title": "Touch Sensor (45-2007)"
        },
        {
            "location": "/Py_Touch_Sensor/#touch-sensor-45-2007",
            "text": "The Touch Sensor can be used for an array of different tasks including object detection, a counter, a standard push button and many more. The sensor can be attached to either an analog or digital port and contains a built-in LED which indicates when the sensor is activated. When the button is pressed, the value returned is 1. When the button is not pressed, the value returned is 0.   Sensor Type  : Three Wire Digital  Dimensions  : 36mm x 32mm x 15mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  Touch Sensor Visual Programming Blocks   List of available functions:      Fusion.digital( driver ,  port )  read()",
            "title": "Touch Sensor (45-2007)"
        },
        {
            "location": "/Py_Touch_Sensor/#fusiondigitaldriver-port",
            "text": "Definition   The following class provides a wrapper for the digital function to tie sensor names directly to the port and read all in one simple motion.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  port  : Digital port the sensor is connected to D0 - D7   Returns   Digital Object   Example   import Fusion\nf = Fusion.driver()\ntouch_D7 = Fusion.digital(f, f.D7)",
            "title": "Fusion.digital(driver, port)"
        },
        {
            "location": "/Py_Touch_Sensor/#read",
            "text": "Definition   Returns the current digital value of the sensor.   Parameters   None   Returns   Pressed  : int (0 - 1)   Example   import Fusion\nf = Fusion.driver()\ntouch_D7 = Fusion.digital(f, f.D7)\nprint touch_D7.read()",
            "title": "read()"
        },
        {
            "location": "/Py_Touch_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Touch Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Range_Sensor/",
            "text": "Range Sensor (45-2008)\n\n\n\n\n\n\nThe Range Sensor combines ultrasonic and optical measuring elements to obtain a reading between 1cm and 255cm. The ultrasonic accurately measures distance to a target up to 255cm away, but it losses accuracy if the object is closer than 5cm. This is where the optical sensor comes into play as it can measure from 1cm out to about 7cm. The target shape and surface material will influence the detectable range.\n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x28\n\n\nSensor ID Code\n : 0x55\n\n\nDimensions\n : 56mm x 32mm x 17mm\n\n\nMounting Holes\n : 48mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nRange Sensor Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.range(\ndriver\n, \naddr\n)\n\n\nultrasonic()\n\n\noptical()\n\n\n\n\n\n\nFusion.range(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics Range Sensor and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nRange Sensor Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nr1 = Fusion.range(f)\nr2 = Fusion.range(f, 0x40)\n\n\n\n\n\n\n\nultrasonic()\n\n\n\n\nDefinition\n\n\n\n\nThe ultrasonic element works by one of the transducers emitting a sound wave and the other receiving the sound wave. This reading is accurate between 5cm and approximately 255cm. The return is linear.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nDistance(cm)\n : int (0 - 255)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nr = Fusion.range(f)\nprint r.ultrasonic()\n\n\n\n\n\n\n\noptical()\n\n\n\n\nDefinition\n\n\n\n\nThe optical element works by emitting infrared light from on LED and receiving infrared light to the other LED. The optical value can detect objects within 15cm. As an object approaches the optical element the returned value will increase at an exponential rate\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nProximity\n : int (0 - 255)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nr = Fusion.range(f)\nprint r.optical()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Range Sensor",
            "title": "Range Sensor (45-2008)"
        },
        {
            "location": "/Py_Range_Sensor/#range-sensor-45-2008",
            "text": "The Range Sensor combines ultrasonic and optical measuring elements to obtain a reading between 1cm and 255cm. The ultrasonic accurately measures distance to a target up to 255cm away, but it losses accuracy if the object is closer than 5cm. This is where the optical sensor comes into play as it can measure from 1cm out to about 7cm. The target shape and surface material will influence the detectable range.   Sensor Type  : Four Wire I2C  Default I2C Address  : 0x28  Sensor ID Code  : 0x55  Dimensions  : 56mm x 32mm x 17mm  Mounting Holes  : 48mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  Range Sensor Visual Programming Blocks   List of available functions:      Fusion.range( driver ,  addr )  ultrasonic()  optical()",
            "title": "Range Sensor (45-2008)"
        },
        {
            "location": "/Py_Range_Sensor/#fusionrangedriver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics Range Sensor and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   Range Sensor Object   Example   import Fusion\nf = Fusion.driver()\nr1 = Fusion.range(f)\nr2 = Fusion.range(f, 0x40)",
            "title": "Fusion.range(driver, addr)"
        },
        {
            "location": "/Py_Range_Sensor/#ultrasonic",
            "text": "Definition   The ultrasonic element works by one of the transducers emitting a sound wave and the other receiving the sound wave. This reading is accurate between 5cm and approximately 255cm. The return is linear.   Parameters   None   Returns   Distance(cm)  : int (0 - 255)   Example   import Fusion\nf = Fusion.driver()\nr = Fusion.range(f)\nprint r.ultrasonic()",
            "title": "ultrasonic()"
        },
        {
            "location": "/Py_Range_Sensor/#optical",
            "text": "Definition   The optical element works by emitting infrared light from on LED and receiving infrared light to the other LED. The optical value can detect objects within 15cm. As an object approaches the optical element the returned value will increase at an exponential rate   Parameters   None   Returns   Proximity  : int (0 - 255)   Example   import Fusion\nf = Fusion.driver()\nr = Fusion.range(f)\nprint r.optical()",
            "title": "optical()"
        },
        {
            "location": "/Py_Range_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Range Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_IR_Locator_360/",
            "text": "IR Locator 360\u00b0 (45-2009)\n\n\n\n\n\n\nThe IR Locator 360\u00b0 utilizes an array of 4 photodiodes to detect the direction and distance from a 1200Hz or 600Hz pulsed infrared source with a  5\u00b0resolution. Both the 600Hz and 1200Hz frequencies can be read at the same time allowing up to two directional sources to be used. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used. \n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x1C\n\n\nSensor ID Code\n : 0x4C\n\n\nDimensions\n : 56mm x 32mm x 31mm\n\n\nMounting Holes\n : 48mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nIR Locator 360\u00b0 Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.locator360(\ndriver\n, \naddr\n)\n\n\ngetHeading(\nfrequency\n)\n\n\ngetIntensity(\nfrequency\n)\n\n\n\n\n\n\nFusion.locator360(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics IR Locator 360\u00b0 and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nIR Locator 360\u00b0 Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nloc1 = Fusion.range(f)\nloc2 = Fusion.range(f, 0x40)\n\n\n\n\n\n\n\ngetHeading(\nfrequency\n)\n\n\n\n\nDefinition\n\n\n\n\nThe heading value is returned in degrees and ranges from 0 to 71 at a resolution of 5\u00b0. If an object were to circle the sensor in a clockwise direction, the value of degrees will increase from 0. If the object were to circle in a counter-clockwise direction, the value of the heading will decrease from 71. Frequencies of 600Hz and 1200Hz can be read from this sensor.\n\n\n\n\nParameters\n\n\n\n\nfrequency\n : 600Hz or 1200Hz\n\n\n\n\nReturns\n\n\n\n\nHeading\n : int (0 - 71)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nloc = Fusion.locator360(f)\nprint loc.getHeading(1200)\nprint (loc.getHeading(1200) * 5)\n\n\n\n\n\n\n\ngetIntensity(\nfrequency\n)\n\n\n\n\nDefinition\n\n\n\n\nThe intensity value represents the distance of the infrared source. When no infrared source is detected the value of the intensity level approaches 0. As an infrared source get closer to the sensor the value of the intensity increases.\n\n\n\n\nParameters\n\n\n\n\nfrequency\n : 600Hz or 1200Hz\n\n\n\n\nReturns\n\n\n\n\nIntensity\n : int (0 - 255)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nloc = Fusion.locator360(f)\nprint loc.getIntensity(600)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python IR Locator 360",
            "title": "IR Locator 360\u00b0 (45-2009)"
        },
        {
            "location": "/Py_IR_Locator_360/#ir-locator-360-45-2009",
            "text": "The IR Locator 360\u00b0 utilizes an array of 4 photodiodes to detect the direction and distance from a 1200Hz or 600Hz pulsed infrared source with a  5\u00b0resolution. Both the 600Hz and 1200Hz frequencies can be read at the same time allowing up to two directional sources to be used. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used.    Sensor Type  : Four Wire I2C  Default I2C Address  : 0x1C  Sensor ID Code  : 0x4C  Dimensions  : 56mm x 32mm x 31mm  Mounting Holes  : 48mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  IR Locator 360\u00b0 Visual Programming Blocks   List of available functions:      Fusion.locator360( driver ,  addr )  getHeading( frequency )  getIntensity( frequency )",
            "title": "IR Locator 360\u00b0 (45-2009)"
        },
        {
            "location": "/Py_IR_Locator_360/#fusionlocator360driver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics IR Locator 360\u00b0 and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   IR Locator 360\u00b0 Object   Example   import Fusion\nf = Fusion.driver()\nloc1 = Fusion.range(f)\nloc2 = Fusion.range(f, 0x40)",
            "title": "Fusion.locator360(driver, addr)"
        },
        {
            "location": "/Py_IR_Locator_360/#getheadingfrequency",
            "text": "Definition   The heading value is returned in degrees and ranges from 0 to 71 at a resolution of 5\u00b0. If an object were to circle the sensor in a clockwise direction, the value of degrees will increase from 0. If the object were to circle in a counter-clockwise direction, the value of the heading will decrease from 71. Frequencies of 600Hz and 1200Hz can be read from this sensor.   Parameters   frequency  : 600Hz or 1200Hz   Returns   Heading  : int (0 - 71)   Example   import Fusion\nf = Fusion.driver()\nloc = Fusion.locator360(f)\nprint loc.getHeading(1200)\nprint (loc.getHeading(1200) * 5)",
            "title": "getHeading(frequency)"
        },
        {
            "location": "/Py_IR_Locator_360/#getintensityfrequency",
            "text": "Definition   The intensity value represents the distance of the infrared source. When no infrared source is detected the value of the intensity level approaches 0. As an infrared source get closer to the sensor the value of the intensity increases.   Parameters   frequency  : 600Hz or 1200Hz   Returns   Intensity  : int (0 - 255)   Example   import Fusion\nf = Fusion.driver()\nloc = Fusion.locator360(f)\nprint loc.getIntensity(600)",
            "title": "getIntensity(frequency)"
        },
        {
            "location": "/Py_IR_Locator_360/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python IR Locator 360",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Light_Sensor/",
            "text": "Light Sensor (45-2015)\n\n\n\n\n\n\nThe Light Sensor detects the ambient light level using a phototransistor. The value returned is a quasi-logarithmic analog value. This means that the Light Sensor can detect slight changes in light and dark environments. A value of 0 indicates no light and a value of 1023 indicates the sensor is flooded with light.\n\n\n\n\nSensor Type\n : Three Wire Analog\n\n\nDimensions\n : 32mm x 32mm x 12mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Analog 0V - 5V\n\n\nLight Sensor Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\nread()\n\n\n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\n\n\nDefinition\n\n\n\n\nThe following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\nport\n : Analog port the sensor is connected to A0 - A7\n\n\n\n\nReturns\n\n\n\n\nAnalog Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nlight_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\n\n\nread()\n\n\n\n\nDefinition\n\n\n\n\nReturns the current analog value read on the sensor.\n\n\n\n\nIdle value changes depending on the amount of ambient light in the environment.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nAmbient Light\n : int (0 - 1023)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nlight_A0 = Fusion.analog(f, f.A0)\nprint light_A0.read()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Light Sensor",
            "title": "Light Sensor (45-2015)"
        },
        {
            "location": "/Py_Light_Sensor/#light-sensor-45-2015",
            "text": "The Light Sensor detects the ambient light level using a phototransistor. The value returned is a quasi-logarithmic analog value. This means that the Light Sensor can detect slight changes in light and dark environments. A value of 0 indicates no light and a value of 1023 indicates the sensor is flooded with light.   Sensor Type  : Three Wire Analog  Dimensions  : 32mm x 32mm x 12mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Analog 0V - 5V  Light Sensor Visual Programming Blocks   List of available functions:      Fusion.analog( driver ,  port )  read()",
            "title": "Light Sensor (45-2015)"
        },
        {
            "location": "/Py_Light_Sensor/#fusionanalogdriver-port",
            "text": "Definition   The following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  port  : Analog port the sensor is connected to A0 - A7   Returns   Analog Object   Example   import Fusion\nf = Fusion.driver()\nlight_A0 = Fusion.analog(f, f.A0)",
            "title": "Fusion.analog(driver, port)"
        },
        {
            "location": "/Py_Light_Sensor/#read",
            "text": "Definition   Returns the current analog value read on the sensor.   Idle value changes depending on the amount of ambient light in the environment.    Parameters   None   Returns   Ambient Light  : int (0 - 1023)   Example   import Fusion\nf = Fusion.driver()\nlight_A0 = Fusion.analog(f, f.A0)\nprint light_A0.read()",
            "title": "read()"
        },
        {
            "location": "/Py_Light_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Light Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Sound_Generator/",
            "text": "Sound Generator (45-2016)\n\n\n\n\n\n\nThe Sound Generator can generate a sound based on volume, pitch and duration. This sensor also can overwrite settings during a tone to change the pitch, volume, or extend the duration of the tone.\n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x34\n\n\nSensor ID Code\n : 0x53\n\n\nDimensions\n : 32mm x 32mm x 19mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nSound Generator Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.sound(\ndriver\n, \naddr\n)\n\n\nsetVolume(\nvolume\n)\n\n\nsetPitch(\npitch\n)\n\n\nsetDuration(\nduration\n)\n\n\ngetDuration()\n\n\nsetSound(\nvolume\n, \npitch\n, \nduration\n)\n\n\nsetSoundBlocking(\nvolume\n, \npitch\n, \nduration\n, \npause\n)\n\n\n\n\n\n\nFusion.sound(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics Sound Generator and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nSound Generator Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns1 = Fusion.sound(f)\ns2 = Fusion.sound(f, 0x40)\n\n\n\n\n\n\n\nsetVolume(\nvolume\n)\n\n\n\n\nDefinition\n\n\n\n\nControls the amplitude of the output signal from 0 (\nLOW\n) to 3 (\nMAX\n).\n\n\n\n\nConstants\n\n\n\n\n\n\nParameters\n\n\n\n\nvolume\n : int (0 - 3) (\nLOW\n, \nMED\n, \nHIGH\n, \nMAX\n)  \n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setVolume(s.HIGH)\n\n\n\n\n\n\n\nsetPitch(\npitch\n)\n\n\n\n\nDefinition\n\n\n\n\nThe Pitch controls the frequency of the output in increments of 1Hz. The frequencies range from 1Hz to 5kHz. The speaker resonates at about 2kHz, so the speaker will sound much louder at this frequency.\n\n\n\n\nParameters\n\n\n\n\npitch(Hz)\n : int (0 - 5000)  \n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setPitch(2500)\n\n\n\n\n\n\n\nsetDuration(\nduration\n)\n\n\n\n\nDefinition\n\n\n\n\nThe duration controls the length of the tone in increments of 10ms ranging from 10ms \u2013 2.55s. The duration of the tone begins a countdown and will stop when the counter reaches 0. The duration may be updated at anytime to extend the length of a tone past 2.55s.\n\n\n\n\nParameters\n\n\n\n\nduration(ms)\n : int (0 - 2550)  \n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setDuration(1500)\n\n\n\n\n\n\n\ngetDuration()\n\n\n\n\nDefinition\n\n\n\n\nGet the remaining time of the tone being played. This is useful to updated the tone generated just before the current tone is complete so that there is not a gap of sound.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nduration(ms)\n : int (0 - 2550)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setSound(s.MAX, 2500, 2000)\n\nwhile s.getDuration(): pass\ns.setSound(s.MED, 1500, 1000)\n\n\n\n\n\n\n\nsetSound(\nvolume\n, \npitch\n, \nduration\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function allows the user to set the volume, pitch and duration all in a single call. This tone can be interrupted or change before the duration reaches 0.\n\n\n\n\nConstants\n\n\n\n\n\n\nParameters\n\n\n\n\nvolume\n : int (0 - 3) (\nLOW\n, \nMED\n, \nHIGH\n, \nMAX\n)\n\n\npitch (Hz)\n : int (1 - 5000) \nRecommended not to exceed 5,000Hz\n\n\nduration (ms)\n : int (0 - 2550)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setSound(s.MAX, 2500, 1500)\n\n\n\n\n\n\n\nsetSoundBlocking(\nvolume\n, \npitch\n, \nduration\n, \npause\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function allows the user to set the volume, pitch and duration all in a single call with a blocking function feature. What makes this function different from \nsetSound()\n is that this function blocks other actions while a sound is being played, therefore no other code in the program can run. The parameter \npause\n is the time after the tone until the next line of code is executed.\n\n\n\n\nConstants\n\n\n\n\n\n\nParameters\n\n\n\n\nvolume\n : int (0 - 3) (\nLOW\n, \nMED\n, \nHIGH\n, \nMAX\n)\n\n\npitch (Hz)\n : int (1 - 5000) \nRecommended not to exceed 5,000Hz\n\n\nduration (ms)\n : int (0 - 65535)\n\n\npause (ms)\n : int (0 - 65535)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setSoundBlocking(s.MAX, 2500, 4500, 1000)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Sound Generator",
            "title": "Sound Generator (45-2016)"
        },
        {
            "location": "/Py_Sound_Generator/#sound-generator-45-2016",
            "text": "The Sound Generator can generate a sound based on volume, pitch and duration. This sensor also can overwrite settings during a tone to change the pitch, volume, or extend the duration of the tone.   Sensor Type  : Four Wire I2C  Default I2C Address  : 0x34  Sensor ID Code  : 0x53  Dimensions  : 32mm x 32mm x 19mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  Sound Generator Visual Programming Blocks   List of available functions:      Fusion.sound( driver ,  addr )  setVolume( volume )  setPitch( pitch )  setDuration( duration )  getDuration()  setSound( volume ,  pitch ,  duration )  setSoundBlocking( volume ,  pitch ,  duration ,  pause )",
            "title": "Sound Generator (45-2016)"
        },
        {
            "location": "/Py_Sound_Generator/#fusionsounddriver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics Sound Generator and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   Sound Generator Object   Example   import Fusion\nf = Fusion.driver()\ns1 = Fusion.sound(f)\ns2 = Fusion.sound(f, 0x40)",
            "title": "Fusion.sound(driver, addr)"
        },
        {
            "location": "/Py_Sound_Generator/#setvolumevolume",
            "text": "Definition   Controls the amplitude of the output signal from 0 ( LOW ) to 3 ( MAX ).   Constants    Parameters   volume  : int (0 - 3) ( LOW ,  MED ,  HIGH ,  MAX )     Returns   None   Example   import Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setVolume(s.HIGH)",
            "title": "setVolume(volume)"
        },
        {
            "location": "/Py_Sound_Generator/#setpitchpitch",
            "text": "Definition   The Pitch controls the frequency of the output in increments of 1Hz. The frequencies range from 1Hz to 5kHz. The speaker resonates at about 2kHz, so the speaker will sound much louder at this frequency.   Parameters   pitch(Hz)  : int (0 - 5000)     Returns   None   Example   import Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setPitch(2500)",
            "title": "setPitch(pitch)"
        },
        {
            "location": "/Py_Sound_Generator/#setdurationduration",
            "text": "Definition   The duration controls the length of the tone in increments of 10ms ranging from 10ms \u2013 2.55s. The duration of the tone begins a countdown and will stop when the counter reaches 0. The duration may be updated at anytime to extend the length of a tone past 2.55s.   Parameters   duration(ms)  : int (0 - 2550)     Returns   None   Example   import Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setDuration(1500)",
            "title": "setDuration(duration)"
        },
        {
            "location": "/Py_Sound_Generator/#getduration",
            "text": "Definition   Get the remaining time of the tone being played. This is useful to updated the tone generated just before the current tone is complete so that there is not a gap of sound.   Parameters   None   Returns   duration(ms)  : int (0 - 2550)   Example   import Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setSound(s.MAX, 2500, 2000)\n\nwhile s.getDuration(): pass\ns.setSound(s.MED, 1500, 1000)",
            "title": "getDuration()"
        },
        {
            "location": "/Py_Sound_Generator/#setsoundvolume-pitch-duration",
            "text": "Definition   This function allows the user to set the volume, pitch and duration all in a single call. This tone can be interrupted or change before the duration reaches 0.   Constants    Parameters   volume  : int (0 - 3) ( LOW ,  MED ,  HIGH ,  MAX )  pitch (Hz)  : int (1 - 5000)  Recommended not to exceed 5,000Hz  duration (ms)  : int (0 - 2550)   Returns   None   Example   import Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setSound(s.MAX, 2500, 1500)",
            "title": "setSound(volume, pitch, duration)"
        },
        {
            "location": "/Py_Sound_Generator/#setsoundblockingvolume-pitch-duration-pause",
            "text": "Definition   This function allows the user to set the volume, pitch and duration all in a single call with a blocking function feature. What makes this function different from  setSound()  is that this function blocks other actions while a sound is being played, therefore no other code in the program can run. The parameter  pause  is the time after the tone until the next line of code is executed.   Constants    Parameters   volume  : int (0 - 3) ( LOW ,  MED ,  HIGH ,  MAX )  pitch (Hz)  : int (1 - 5000)  Recommended not to exceed 5,000Hz  duration (ms)  : int (0 - 65535)  pause (ms)  : int (0 - 65535)   Returns   None   Example   import Fusion\nf = Fusion.driver()\ns = Fusion.sound(f)\ns.setSoundBlocking(s.MAX, 2500, 4500, 1000)",
            "title": "setSoundBlocking(volume, pitch, duration, pause)"
        },
        {
            "location": "/Py_Sound_Generator/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Sound Generator",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_IR_Seeker_V3/",
            "text": "IR Seeker V3 (45-2017)\n\n\n\n\n\n\nThe IR Seeker V3 consists of 2 photodiodes to locate the direction and intensity of an IR source relative to the front of the sensor. The sensor can detect pulsed infrared light at 600Hz and 1200Hz with a 150\u00b0 field of view. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used. Overall detection range is based on the intensity of the IR source being used.\n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x38\n\n\nSensor ID Code\n : 0x49\n\n\nDimensions\n : 32mm x 32mm x 19mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nIR Seeker V3 Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.seekerV3(\ndriver\n, \naddr\n)\n\n\ngetHeading(\nfrequency\n)\n\n\ngetIntensity(\nfrequency\n)\n\n\ngetLeftRaw(\nfrequency\n)\n\n\ngetRightRaw(\nfrequency\n)\n\n\n\n\n\n\nFusion.seekerV3(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics IR Seeker V3 and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nIR Seeker V3 Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nseek1 = Fusion.seekerV3(f)\nseek2 = Fusion.seekerV3(f, 0x40)\n\n\n\n\n\n\n\ngetHeading(\nfrequency\n)\n\n\n\n\nDefinition\n\n\n\n\nThe heading value gives an indication of the source direction. If the value is negative, then the source is to the left of center. If the value is positive, then the source is to the right of center. The magnitude of the values gives an indication of how far off the axis the source is. If the value is 0, then the source is close to the center of the field of view.\n\n\n\n\nParameters\n\n\n\n\nfrequency\n : 600Hz or 1200Hz\n\n\n\n\nReturns\n\n\n\n\nHeading\n : int (0 - 359)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getHeading(1200)\n\n\n\n\n\n\n\ngetIntensity(\nfrequency\n)\n\n\n\n\nDefinition\n\n\n\n\nThe intensity value represents the magnitude of the receive signal. If this value is set to 0, then there is not enough infrared signal available to estimate the heading value. The value of the intensity will increase as an infrared source approaches the sensor.\n\n\n\n\nParameters\n\n\n\n\nfrequency\n : 600Hz or 1200Hz\n\n\n\n\nReturns\n\n\n\n\nIntensity\n : int (0 - 255)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getIntensity(600)\n\n\n\n\n\n\n\ngetLeftRaw(\nfrequency\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the infrared value read by the left photodiode. The value is dependent on both the position of the infrared source and the intensity of the source.\n\n\n\n\nParameters\n\n\n\n\nfrequency\n : 600Hz or 1200Hz\n\n\n\n\nReturns\n\n\n\n\nDirection\n : int (0 - 65535)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getLeftRaw(1200)\n\n\n\n\n\n\n\ngetRightRaw(\nfrequency\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the infrared value read by the right photodiode. The value is dependent on both the position of the infrared source and the intensity of the source.\n\n\n\n\nParameters\n\n\n\n\nfrequency\n : 600Hz or 1200Hz\n\n\n\n\nReturns\n\n\n\n\nDirection\n : int (0 - 65535)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getRightRaw(1200)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python IR Seeker V3",
            "title": "IR Seeker V3 (45-2017)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#ir-seeker-v3-45-2017",
            "text": "The IR Seeker V3 consists of 2 photodiodes to locate the direction and intensity of an IR source relative to the front of the sensor. The sensor can detect pulsed infrared light at 600Hz and 1200Hz with a 150\u00b0 field of view. This device is compatible with all legacy IR sources such as the HiTechnic IR Ball, Beacon, and Beacon V2. Overall detection range is based on the intensity of the IR source being used. Overall detection range is based on the intensity of the IR source being used.   Sensor Type  : Four Wire I2C  Default I2C Address  : 0x38  Sensor ID Code  : 0x49  Dimensions  : 32mm x 32mm x 19mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  IR Seeker V3 Visual Programming Blocks   List of available functions:      Fusion.seekerV3( driver ,  addr )  getHeading( frequency )  getIntensity( frequency )  getLeftRaw( frequency )  getRightRaw( frequency )",
            "title": "IR Seeker V3 (45-2017)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#fusionseekerv3driver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics IR Seeker V3 and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   IR Seeker V3 Object   Example   import Fusion\nf = Fusion.driver()\nseek1 = Fusion.seekerV3(f)\nseek2 = Fusion.seekerV3(f, 0x40)",
            "title": "Fusion.seekerV3(driver, addr)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#getheadingfrequency",
            "text": "Definition   The heading value gives an indication of the source direction. If the value is negative, then the source is to the left of center. If the value is positive, then the source is to the right of center. The magnitude of the values gives an indication of how far off the axis the source is. If the value is 0, then the source is close to the center of the field of view.   Parameters   frequency  : 600Hz or 1200Hz   Returns   Heading  : int (0 - 359)   Example   import Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getHeading(1200)",
            "title": "getHeading(frequency)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#getintensityfrequency",
            "text": "Definition   The intensity value represents the magnitude of the receive signal. If this value is set to 0, then there is not enough infrared signal available to estimate the heading value. The value of the intensity will increase as an infrared source approaches the sensor.   Parameters   frequency  : 600Hz or 1200Hz   Returns   Intensity  : int (0 - 255)   Example   import Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getIntensity(600)",
            "title": "getIntensity(frequency)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#getleftrawfrequency",
            "text": "Definition   This function returns the infrared value read by the left photodiode. The value is dependent on both the position of the infrared source and the intensity of the source.   Parameters   frequency  : 600Hz or 1200Hz   Returns   Direction  : int (0 - 65535)   Example   import Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getLeftRaw(1200)",
            "title": "getLeftRaw(frequency)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#getrightrawfrequency",
            "text": "Definition   This function returns the infrared value read by the right photodiode. The value is dependent on both the position of the infrared source and the intensity of the source.   Parameters   frequency  : 600Hz or 1200Hz   Returns   Direction  : int (0 - 65535)   Example   import Fusion\nf = Fusion.driver()\nseek = Fusion.seekerV3(f)\nprint seek.getRightRaw(1200)",
            "title": "getRightRaw(frequency)"
        },
        {
            "location": "/Py_IR_Seeker_V3/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python IR Seeker V3",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Color_Sensor/",
            "text": "Color Sensor (45-2018)\n\n\n\n\n\n\nThe Color Sensor is used to detect the color of an object or a visible light source. Along with raw and adjusted RGB values, the device can also return a color number corresponding to a the colors listed below in the documentation. Calibration steps must be taken as needed based on the environment and ambient lighting for the most accurate readings. Maximum detection distance of the color sensor is approximately 7cm and it is recommended that during active mode the device is placed at a slight angle to avoid white light reflecting from the LED. \n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x3C\n\n\nSensor ID Code\n : 0x67\n\n\nDimensions\n : 32mm x 32mm x 11mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nColor Sensor Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.color(\ndriver\n, \naddr\n)\n\n\ncolorSetup(\nmode\n, \nrate\n)\n\n\ngetColorNumber()\n\n\ngetRGBIndex()\n\n\ngetColorValue())\n\n\ngetColorIndex())\n\n\ngetColorReading()\n\n\ngetColorNormalized()\n\n\nblackBalance()\n\n\nwhiteBalance()\n\n\n\n\n\n\nFusion.color(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics Color Sensor and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nColor Sensor Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncolor1 = Fusion.color(f)\ncolor2 = Fusion.color(f, 0x40)\n\n\n\n\n\n\n\ncolorSetup(\nmode\n, \nrate\n)\n\n\n\n\nDefinition\n\n\n\n\nThis function sets the mode and rate at which the readings are taken. The mode can be either \nActive\n or \nPassive\n.\n\nIn \nActive\n mode, the white LED on the sensor is used to illuminate the surface that it is trying to detect. \nActive\n mode works best when the sensor is looking at an object at a slight angle so that the white light is not picked up by the sensor thus distorting the readings.\n\nIn \nPassive\n mode, the sensor takes readings without the use of the white LED. \nPassive\n mode works best for detecting colored light much like that produced by the \nColor Beacon\n. The rate sets the operational frequency of the sensor that can be either 50Hz or 60Hz. The purpose of this is to eliminate any flickering from ambient light.\n\n\n\n\nConstants\n\n\n\n\n\n\nParameters\n\n\n\n\nmode\n : ACTIVE or PASSIVE \n\n\nrate\n : FIFTY_HZ or SIXTY_HZ\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\ncolor.colorSetup(color.ACTIVE, color.FIFTY_HZ)\n\n\n\n\n\n\n\ngetColorNumber()\n\n\n\n\nDefinition\n\n\n\n\nThis function returns the color number that was read by the sensor. The color number corresponds to the color line below. Some materials or the angle of incidence may affect the results. Test the sensor in your environment thoroughly before applying it to a design.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nColor Number\n : int (0 - 16)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorNumber()\n\n\n\n\n\n\n\ngetRGBIndex()\n\n\n\n\nDefinition\n\n\n\n\nThis function gets the analog values of the three primary color channels with an intensity correction whereby 0xFF is the strongest signal.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nRGB Index\n : int [red, green, blue]\n\n\n\n\nExample\n\n\n\n\nThe following example returns an array of size \n3\n and stores it into the variables \nred\n, \ngreen\n and \nblue\n.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue) = color.getRGBIndex()\nprint red\n\n\n\nTo collect a single value instead of the array, reference the index. This will print the \nred\n value.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getRGBIndex()[0]\n\n\n\n\n\n\n\ngetColorValue()\n\n\n\n\nDefinition\n\n\n\n\nThe color values are returned separately as red, green, blue and white. The color value is a measure of the current detection levels for each primary color.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nColor Value\n : int [red, green, blue, white]\n\n\n\n\nExample\n\n\n\n\nThe following example returns an array of size \n3\n and stores it into the variables \nred\n, \ngreen\n, \nblue\n and \nwhite\n.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue, white) = color.getColorValue()\nprint red\n\n\n\nTo collect a single value instead of the array, reference the index. This will print the \nred\n value.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorValue()[0]\n\n\n\n\n\n\n\ngetColorIndex()\n\n\n\n\nDefinition\n\n\n\n\nThe color index number is a single 6 bit number. Bits (5:4) encode the red signal level, bits (3:2) encode the green signal level and bits (1:0) encode the blue signal levels.\n\n\n\n\n\n\n\n\nD7\n\n\nD6\n\n\nD5\n\n\nD4\n\n\nD3\n\n\nD2\n\n\nD1\n\n\nD0\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\nRed 1\n\n\nRed 0\n\n\nGreen 1\n\n\nGreen 0\n\n\nBlue 1\n\n\nBlue 0\n\n\n\n\n\n\n\n\n\n\nRed\n = 0x30\n\n\nGreen\n = 0x0C\n\n\nBlue\n = 0x03\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nColor Index\n : int (0 - 63)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorIndex()\n\n\n\n\n\n\n\ngetColorReading()\n\n\n\n\nDefinition\n\n\n\n\nThis function gets the analog value of the color channels in a 16-bit format. Therefore there is much more detail in the reading as compared to the index reading.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nColor Reading\n : int (0 - 65535)\n\n\n\n\nExample\n\n\n\n\nThe following example returns an array of size \n3\n and stores it into the variables \nred\n, \ngreen\n, \nblue\n and \nwhite\n.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue, white) = color.getColorReading()\nprint red\n\n\n\nTo collect a single value instead of the array, reference the index. This will print the \nred\n value.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorReading()[0]\n\n\n\n\n\n\n\ngetColorNormalized()\n\n\n\n\nDefinition\n\n\n\n\nThis function gets the analog value of the color channel adjusted by the calibration values.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nColor Normalized\n : int [red, green, blue, white]\n\n\n\n\nExample\n\n\n\n\nThe following example returns an array of size \n3\n and stores it into the variables \nred\n, \ngreen\n, \nblue\n and \nwhite\n.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue, white) = color.getColorNormalized()\nprint red\n\n\n\nTo collect a single value instead of the array, reference the index. This will print the \nred\n value.\n\n\nimport Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorNormalized()[0]\n\n\n\n\n\n\n\nblackBalance()\n\n\n\n\nDefinition\n\n\n\n\nThis function gathers data and calculates an average value for each of the three color channels. To calibrate the black balance, point the sensor so that there is no object within 5 feet (1.5m) forward of the sensor. Calibration takes approximately 1.5 seconds. This function must be called before the \nwhiteBalance()\n function because the white balance calculations are dependent on the black balance values.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\ncolor = Fusion.color(f)\ncolor.blackBalance()\ntime.sleep(2)\n\n\n\n\n\n\n\nwhiteBalance()\n\n\n\n\nDefinition\n\n\n\n\nThis function gathers data and calculates and average value for each of the three color channels. Then the values are adjusted based on the readings from the \nblackBalance()\n function. When calibrating, hold the sensor no more than 2 inches (5cm) away from a white target. The target must be very white, using a white board or 3 layers of high quality copy paper. Calibration takes approximately 1.5 seconds.\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\ncolor = Fusion.color(f)\ncolor.blackBalance()\ntime.sleep(2)\ncolor.whiteBalance()\ntime.sleep(2)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Color Sensor",
            "title": "Color Sensor (45-2018)"
        },
        {
            "location": "/Py_Color_Sensor/#color-sensor-45-2018",
            "text": "The Color Sensor is used to detect the color of an object or a visible light source. Along with raw and adjusted RGB values, the device can also return a color number corresponding to a the colors listed below in the documentation. Calibration steps must be taken as needed based on the environment and ambient lighting for the most accurate readings. Maximum detection distance of the color sensor is approximately 7cm and it is recommended that during active mode the device is placed at a slight angle to avoid white light reflecting from the LED.    Sensor Type  : Four Wire I2C  Default I2C Address  : 0x3C  Sensor ID Code  : 0x67  Dimensions  : 32mm x 32mm x 11mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  Color Sensor Visual Programming Blocks   List of available functions:      Fusion.color( driver ,  addr )  colorSetup( mode ,  rate )  getColorNumber()  getRGBIndex()  getColorValue())  getColorIndex())  getColorReading()  getColorNormalized()  blackBalance()  whiteBalance()",
            "title": "Color Sensor (45-2018)"
        },
        {
            "location": "/Py_Color_Sensor/#fusioncolordriver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics Color Sensor and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   Color Sensor Object   Example   import Fusion\nf = Fusion.driver()\ncolor1 = Fusion.color(f)\ncolor2 = Fusion.color(f, 0x40)",
            "title": "Fusion.color(driver, addr)"
        },
        {
            "location": "/Py_Color_Sensor/#colorsetupmode-rate",
            "text": "Definition   This function sets the mode and rate at which the readings are taken. The mode can be either  Active  or  Passive . \nIn  Active  mode, the white LED on the sensor is used to illuminate the surface that it is trying to detect.  Active  mode works best when the sensor is looking at an object at a slight angle so that the white light is not picked up by the sensor thus distorting the readings. \nIn  Passive  mode, the sensor takes readings without the use of the white LED.  Passive  mode works best for detecting colored light much like that produced by the  Color Beacon . The rate sets the operational frequency of the sensor that can be either 50Hz or 60Hz. The purpose of this is to eliminate any flickering from ambient light.   Constants    Parameters   mode  : ACTIVE or PASSIVE   rate  : FIFTY_HZ or SIXTY_HZ   Returns   None   Example   import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\ncolor.colorSetup(color.ACTIVE, color.FIFTY_HZ)",
            "title": "colorSetup(mode, rate)"
        },
        {
            "location": "/Py_Color_Sensor/#getcolornumber",
            "text": "Definition   This function returns the color number that was read by the sensor. The color number corresponds to the color line below. Some materials or the angle of incidence may affect the results. Test the sensor in your environment thoroughly before applying it to a design.    Parameters   None   Returns   Color Number  : int (0 - 16)   Example   import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorNumber()",
            "title": "getColorNumber()"
        },
        {
            "location": "/Py_Color_Sensor/#getrgbindex",
            "text": "Definition   This function gets the analog values of the three primary color channels with an intensity correction whereby 0xFF is the strongest signal.   Parameters   None   Returns   RGB Index  : int [red, green, blue]   Example   The following example returns an array of size  3  and stores it into the variables  red ,  green  and  blue .  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue) = color.getRGBIndex()\nprint red  To collect a single value instead of the array, reference the index. This will print the  red  value.  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getRGBIndex()[0]",
            "title": "getRGBIndex()"
        },
        {
            "location": "/Py_Color_Sensor/#getcolorvalue",
            "text": "Definition   The color values are returned separately as red, green, blue and white. The color value is a measure of the current detection levels for each primary color.   Parameters   None   Returns   Color Value  : int [red, green, blue, white]   Example   The following example returns an array of size  3  and stores it into the variables  red ,  green ,  blue  and  white .  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue, white) = color.getColorValue()\nprint red  To collect a single value instead of the array, reference the index. This will print the  red  value.  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorValue()[0]",
            "title": "getColorValue()"
        },
        {
            "location": "/Py_Color_Sensor/#getcolorindex",
            "text": "Definition   The color index number is a single 6 bit number. Bits (5:4) encode the red signal level, bits (3:2) encode the green signal level and bits (1:0) encode the blue signal levels.     D7  D6  D5  D4  D3  D2  D1  D0      0  0  Red 1  Red 0  Green 1  Green 0  Blue 1  Blue 0      Red  = 0x30  Green  = 0x0C  Blue  = 0x03    Parameters   None   Returns   Color Index  : int (0 - 63)   Example   import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorIndex()",
            "title": "getColorIndex()"
        },
        {
            "location": "/Py_Color_Sensor/#getcolorreading",
            "text": "Definition   This function gets the analog value of the color channels in a 16-bit format. Therefore there is much more detail in the reading as compared to the index reading.   Parameters   None   Returns   Color Reading  : int (0 - 65535)   Example   The following example returns an array of size  3  and stores it into the variables  red ,  green ,  blue  and  white .  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue, white) = color.getColorReading()\nprint red  To collect a single value instead of the array, reference the index. This will print the  red  value.  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorReading()[0]",
            "title": "getColorReading()"
        },
        {
            "location": "/Py_Color_Sensor/#getcolornormalized",
            "text": "Definition   This function gets the analog value of the color channel adjusted by the calibration values.   Parameters   None   Returns   Color Normalized  : int [red, green, blue, white]   Example   The following example returns an array of size  3  and stores it into the variables  red ,  green ,  blue  and  white .  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\n(red, green, blue, white) = color.getColorNormalized()\nprint red  To collect a single value instead of the array, reference the index. This will print the  red  value.  import Fusion\nf = Fusion.driver()\ncolor = Fusion.color(f)\nprint color.getColorNormalized()[0]",
            "title": "getColorNormalized()"
        },
        {
            "location": "/Py_Color_Sensor/#blackbalance",
            "text": "Definition   This function gathers data and calculates an average value for each of the three color channels. To calibrate the black balance, point the sensor so that there is no object within 5 feet (1.5m) forward of the sensor. Calibration takes approximately 1.5 seconds. This function must be called before the  whiteBalance()  function because the white balance calculations are dependent on the black balance values.   Parameters   None   Returns   None   Example   import Fusion\nimport time\nf = Fusion.driver()\ncolor = Fusion.color(f)\ncolor.blackBalance()\ntime.sleep(2)",
            "title": "blackBalance()"
        },
        {
            "location": "/Py_Color_Sensor/#whitebalance",
            "text": "Definition   This function gathers data and calculates and average value for each of the three color channels. Then the values are adjusted based on the readings from the  blackBalance()  function. When calibrating, hold the sensor no more than 2 inches (5cm) away from a white target. The target must be very white, using a white board or 3 layers of high quality copy paper. Calibration takes approximately 1.5 seconds.   Parameters   None   Returns   None   Example   import Fusion\nimport time\nf = Fusion.driver()\ncolor = Fusion.color(f)\ncolor.blackBalance()\ntime.sleep(2)\ncolor.whiteBalance()\ntime.sleep(2)",
            "title": "whiteBalance()"
        },
        {
            "location": "/Py_Color_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Color Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Color_Beacon/",
            "text": "Color Beacon (45-2019)\n\n\n\n\n\n\nThe Color Beacon is used to display one of seven colors or any set custom color based on RGB values.\n\nThe beacon can also indicate \nRed\n/\nBlue\n team colors with the use of a magnet. There is no code or setup needed to operate as a team indicator. There is a Hall Effect sensor located on the left side of the sensors (wire pointed toward you). By holding a magnet over the top of the sensor it will blink green. After the green blink the beacon will be set to \nRed\n, \nBlue\n or \nOff\n. This can be done at any time and will overwrite any custom color or color number. When the beacon is \nRed\n or \nBlue\n from the Hall Effect sensor, it will be locked in that mode until turned \nOff\n using a magnet or disconnecting the sensor.\n\n\n\n\nSensor Type\n : Four Wire I2C\n\n\nDefault I2C Address\n : 0x4C\n\n\nSensor ID Code\n : 0x75\n\n\nDimensions\n : 56mm x 32mm x 17mm\n\n\nMounting Holes\n : 48mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Logic 0 - 0V, Logic 1 - 5V\n\n\nI2C Bus Speed\n : 100kHz max\n\n\nI2C Address Change Option\n : Yes (Even Number 0x10 - 0xEE)\n\n\nLED Brightness\n : 840 Red, 1680 Green, 420 Blue mcd (millicandela)\n\n\nColor Beacon Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.ColorBeacon(\ndriver\n, \naddr\n)\n\n\nsetColor(\ncolor\n)\n\n\nsetCustomColor(\nred\n, \ngreen\n, \nblue\n)\n\n\n\n\n\n\nFusion.colorBeacon(\ndriver\n, \naddr\n)\n\n\n\n\nDefinition\n\n\n\n\nThis class contains the necessary drivers for the Modern Robotics Color Beacon and must be called at the beginning of the program before using any other class functions. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\naddr\n : Enter an I2C address in hexidecimal if different from default \n\n\n\n\nReturns\n\n\n\n\nColor Beacon Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nbeacon1 = Fusion.colorBeacon(f)\nbeacon2 = Fusion.colorBeacon(f, 0x40)\n\n\n\n\n\n\n\nsetColor(\ncolor\n)\n\n\n\n\nDefinition\n\n\n\n\nSet the color of the LED using the number of the color.\n\n\n\n\n\n\n\n\nNumber\n\n\nColor\n\n\n\n\n\n\n\n\n\n\n0\n\n\nOff\n\n\n\n\n\n\n1\n\n\nRed\n\n\n\n\n\n\n2\n\n\nGreen\n\n\n\n\n\n\n3\n\n\nYellow\n\n\n\n\n\n\n4\n\n\nBlue\n\n\n\n\n\n\n5\n\n\nPurple\n\n\n\n\n\n\n6\n\n\nTeal\n\n\n\n\n\n\n7\n\n\nWhite\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\ncolor\n : int (0 - 7)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\nbeacon = Fusion.colorBeacon(f)\n\nbeacon.setColor(1)\ntime.sleep(1)\nbeacon.setColor(2)\ntime.sleep(1)\nbeacon.setColor(4)\ntime.sleep(1)\n\n\n\n\n\n\n\nsetCustomColor(\nred\n, \ngreen\n, \nblue\n)\n\n\n\n\nDefinition\n\n\n\n\nSet the color of the LED using a value 0-255 for \nRed\n, \nGreen\n and \nBlue\n.\n\n\n\n\nParameters\n\n\n\n\nred\n : int (0 - 255)\n\n\ngreen\n : int (0 - 255)\n\n\nblue\n : int (0 - 255)\n\n\n\n\nReturns\n\n\n\n\nNone\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nimport time\nf = Fusion.driver()\nbeacon = Fusion.colorBeacon(f)\n\nbeacon.setCustomColor(255, 0, 0)\ntime.sleep(1)\nbeacon.setCustomColor(0, 255, 0)\ntime.sleep(1)\nbeacon.setCustomColor(0, 0, 255)\ntime.sleep(1)\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Color Beacon",
            "title": "Color Beacon (45-2019)"
        },
        {
            "location": "/Py_Color_Beacon/#color-beacon-45-2019",
            "text": "The Color Beacon is used to display one of seven colors or any set custom color based on RGB values. \nThe beacon can also indicate  Red / Blue  team colors with the use of a magnet. There is no code or setup needed to operate as a team indicator. There is a Hall Effect sensor located on the left side of the sensors (wire pointed toward you). By holding a magnet over the top of the sensor it will blink green. After the green blink the beacon will be set to  Red ,  Blue  or  Off . This can be done at any time and will overwrite any custom color or color number. When the beacon is  Red  or  Blue  from the Hall Effect sensor, it will be locked in that mode until turned  Off  using a magnet or disconnecting the sensor.   Sensor Type  : Four Wire I2C  Default I2C Address  : 0x4C  Sensor ID Code  : 0x75  Dimensions  : 56mm x 32mm x 17mm  Mounting Holes  : 48mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Logic 0 - 0V, Logic 1 - 5V  I2C Bus Speed  : 100kHz max  I2C Address Change Option  : Yes (Even Number 0x10 - 0xEE)  LED Brightness  : 840 Red, 1680 Green, 420 Blue mcd (millicandela)  Color Beacon Visual Programming Blocks   List of available functions:      Fusion.ColorBeacon( driver ,  addr )  setColor( color )  setCustomColor( red ,  green ,  blue )",
            "title": "Color Beacon (45-2019)"
        },
        {
            "location": "/Py_Color_Beacon/#fusioncolorbeacondriver-addr",
            "text": "Definition   This class contains the necessary drivers for the Modern Robotics Color Beacon and must be called at the beginning of the program before using any other class functions.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  addr  : Enter an I2C address in hexidecimal if different from default    Returns   Color Beacon Object   Example   import Fusion\nf = Fusion.driver()\nbeacon1 = Fusion.colorBeacon(f)\nbeacon2 = Fusion.colorBeacon(f, 0x40)",
            "title": "Fusion.colorBeacon(driver, addr)"
        },
        {
            "location": "/Py_Color_Beacon/#setcolorcolor",
            "text": "Definition   Set the color of the LED using the number of the color.     Number  Color      0  Off    1  Red    2  Green    3  Yellow    4  Blue    5  Purple    6  Teal    7  White      Parameters   color  : int (0 - 7)   Returns   None   Example   import Fusion\nimport time\nf = Fusion.driver()\nbeacon = Fusion.colorBeacon(f)\n\nbeacon.setColor(1)\ntime.sleep(1)\nbeacon.setColor(2)\ntime.sleep(1)\nbeacon.setColor(4)\ntime.sleep(1)",
            "title": "setColor(color)"
        },
        {
            "location": "/Py_Color_Beacon/#setcustomcolorred-green-blue",
            "text": "Definition   Set the color of the LED using a value 0-255 for  Red ,  Green  and  Blue .   Parameters   red  : int (0 - 255)  green  : int (0 - 255)  blue  : int (0 - 255)   Returns   None   Example   import Fusion\nimport time\nf = Fusion.driver()\nbeacon = Fusion.colorBeacon(f)\n\nbeacon.setCustomColor(255, 0, 0)\ntime.sleep(1)\nbeacon.setCustomColor(0, 255, 0)\ntime.sleep(1)\nbeacon.setCustomColor(0, 0, 255)\ntime.sleep(1)",
            "title": "setCustomColor(red, green, blue)"
        },
        {
            "location": "/Py_Color_Beacon/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Color Beacon",
            "title": "If any problems arise"
        },
        {
            "location": "/Py_Magnetic_Sensor/",
            "text": "Magnetic Sensor (45-2020)\n\n\n\n\n\n\nThe Magnetic Sensor detects a magnetic field and returns the strength based on the distance between the sensor element and the magnet. The default returned by the sensor when no magnetic field is present is approximately 340. When the returned value is increasing, the sensor is detecting the \"North Pole\" of the magnet. If the value returned is decreasing, then the sensor is detecting the \"South Pole\" of the magnet.\n\n\n\n\nSensor Type\n : Three Wire Analog\n\n\nDimensions\n : 32mm x 32mm x 12mm\n\n\nMounting Holes\n : 24mm x 24mm\n\n\nPower\n : 5V DC, 22mA Max\n\n\nSignal Logic Levels\n : Analog 0V - 5V\n\n\nMagnetic Sensor Visual Programming Blocks\n\n\n\n\nList of available functions:\n  \n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\nread()\n\n\n\n\n\n\nFusion.analog(\ndriver\n, \nport\n)\n\n\n\n\nDefinition\n\n\n\n\nThe following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion. \n\n\n\n\nParameters\n\n\n\n\ndriver\n : Main driver object so the class can call driver functions (\nf\n)\n\n\nport\n : Analog port the sensor is connected to A0 - A7\n\n\n\n\nReturns\n\n\n\n\nAnalog Object\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nmag_A0 = Fusion.analog(f, f.A0)\n\n\n\n\n\n\n\nread()\n\n\n\n\nDefinition\n\n\n\n\nReturns the current magnetic intensity in the North or South direction.\n\n\n\n\nValue of 340 indicates no magnetic field detected.\n\n\n\n\n\n\nParameters\n\n\n\n\nNone\n\n\n\n\nReturns\n\n\n\n\nMagnetic Strength\n : int (0 - 1023) \u2248(0 - 700)\n\n\n\n\nExample\n\n\n\n\nimport Fusion\nf = Fusion.driver()\nmag_A0 = Fusion.analog(f, f.A0)\nprint mag_A0.read()\n\n\n\n\n\n\n\nIf any problems arise\n\n\n\n\nContact Modern Robotics, Inc. at \nsupport@modernroboticsinc.com\n with a detailed description of the steps you have taken and observations you have made.\n\n\nEmail Subject\n: Fusion Python Magnetic Sensor",
            "title": "Magnetic Sensor (45-2020)"
        },
        {
            "location": "/Py_Magnetic_Sensor/#magnetic-sensor-45-2020",
            "text": "The Magnetic Sensor detects a magnetic field and returns the strength based on the distance between the sensor element and the magnet. The default returned by the sensor when no magnetic field is present is approximately 340. When the returned value is increasing, the sensor is detecting the \"North Pole\" of the magnet. If the value returned is decreasing, then the sensor is detecting the \"South Pole\" of the magnet.   Sensor Type  : Three Wire Analog  Dimensions  : 32mm x 32mm x 12mm  Mounting Holes  : 24mm x 24mm  Power  : 5V DC, 22mA Max  Signal Logic Levels  : Analog 0V - 5V  Magnetic Sensor Visual Programming Blocks   List of available functions:      Fusion.analog( driver ,  port )  read()",
            "title": "Magnetic Sensor (45-2020)"
        },
        {
            "location": "/Py_Magnetic_Sensor/#fusionanalogdriver-port",
            "text": "Definition   The following class provides a wrapper for the analog function to tie sensor names directly to the port and read all in one simple motion.    Parameters   driver  : Main driver object so the class can call driver functions ( f )  port  : Analog port the sensor is connected to A0 - A7   Returns   Analog Object   Example   import Fusion\nf = Fusion.driver()\nmag_A0 = Fusion.analog(f, f.A0)",
            "title": "Fusion.analog(driver, port)"
        },
        {
            "location": "/Py_Magnetic_Sensor/#read",
            "text": "Definition   Returns the current magnetic intensity in the North or South direction.   Value of 340 indicates no magnetic field detected.    Parameters   None   Returns   Magnetic Strength  : int (0 - 1023) \u2248(0 - 700)   Example   import Fusion\nf = Fusion.driver()\nmag_A0 = Fusion.analog(f, f.A0)\nprint mag_A0.read()",
            "title": "read()"
        },
        {
            "location": "/Py_Magnetic_Sensor/#if-any-problems-arise",
            "text": "Contact Modern Robotics, Inc. at  support@modernroboticsinc.com  with a detailed description of the steps you have taken and observations you have made.  Email Subject : Fusion Python Magnetic Sensor",
            "title": "If any problems arise"
        },
        {
            "location": "/About/",
            "text": "About Modern Robotics, Inc.\n\n\n\n\n\n\nModern Robotics is your supplier for robotic controllers and building systems.\nFor more information visit \nwww.modernroboticsinc.com\n.\n\n\n\n\nContact Information\n\n\n\n\nTechnical Support\n\n\n\n\nsupport@modernroboticsinc.com\n\n\n\n\nSales\n\n\n\n\nsales@modernroboticsinc.com\n\n\n\n\nPhone\n\n\n\n\nUS and Canada Toll-Free: +1 (844) 240-2666\n\nLocal:                   +1 (786) 393-6886\n\nFax: +1 (315) 939-1250  \n\n\n\n\nSales Office\n\n\n\n\nModern Robotics, Inc\n\n13335 SW 124th Street, #115\n\nMiami, FL 33186\n\n\n\n\nEngineering Office\n\n\n\n\nModern Robotics, Inc\n\n901 Broad Street, #305\n\nUtica, NY 13501-1500\n\n\n\n\n\n\n\n\nThis document is published by Modern Robotics, Inc. No part of this document may be copied,\npublished in print or shared online or otherwise publicly released without the express written\nconsent of Modern Robotics, Inc.\n\n\nSpecifications subject to change without notice.",
            "title": "About Modern Robotics Inc"
        },
        {
            "location": "/About/#about-modern-robotics-inc",
            "text": "Modern Robotics is your supplier for robotic controllers and building systems.\nFor more information visit  www.modernroboticsinc.com .",
            "title": "About Modern Robotics, Inc."
        },
        {
            "location": "/About/#contact-information",
            "text": "Technical Support   support@modernroboticsinc.com   Sales   sales@modernroboticsinc.com   Phone   US and Canada Toll-Free: +1 (844) 240-2666 \nLocal:                   +1 (786) 393-6886 \nFax: +1 (315) 939-1250     Sales Office   Modern Robotics, Inc \n13335 SW 124th Street, #115 \nMiami, FL 33186   Engineering Office   Modern Robotics, Inc \n901 Broad Street, #305 \nUtica, NY 13501-1500     This document is published by Modern Robotics, Inc. No part of this document may be copied,\npublished in print or shared online or otherwise publicly released without the express written\nconsent of Modern Robotics, Inc.  Specifications subject to change without notice.",
            "title": "Contact Information"
        }
    ]
}