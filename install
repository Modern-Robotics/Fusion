#!/bin/bash -x


# Base image:
# Raspberry Pi OS (Legacy)
# A port of Debian Buster with security updates and desktop environment
# Released: 2023-05-03


################################################################################
# Preconfiguration: Raspi-Config
################################################################################


########################################
# Interfaces
########################################

# Enable SSH
# Enable VNC
# Enable SPI
# Enable I2C
# Enable Serial Port
# Enable Serial Console


########################################
# Localization
########################################

# Set Locale
# Set Timezone
# Set WiFi Country


########################################
# Verify Running On Buster
########################################

if grep -q "VERSION_ID=\"10\"" /etc/os-release; then
    echo "Starting update..."
else
    echo "Buster OS not detected"
	echo "Exiting..."
    exit 1
fi


################################################################################
# Step 0: Parameters
################################################################################


########################################
# Define Variables Default Values
########################################

branch=Recruit
version=HEAD
reset=0
testing=0


########################################
# Overide Variables Values If Supplied
########################################

while getopts b:v:rt flag
do
    case "${flag}" in
        b) branch=${OPTARG};;
        v) version=${OPTARG};;
        r) reset=1;;
        t) testing=1;;
    esac
done


################################################################################
# Step 1: Install Required Libraries
################################################################################


########################################
# 1.A APT Packages
########################################

# Declare list of package names and versions
declare -A apt_packages
apt_packages["git"]=1:2.20.1-2+deb10u8 							# 1:2.20.1-2+deb10u8
apt_packages["python-smbus"]=4.1-1								# 4.1-1
apt_packages["python-pip"]=18.1-5+rpt1							# 18.1-5+rpt1
apt_packages["python-pil"]=5.4.1-2+deb10u3						# 5.4.1-2+deb10u3
apt_packages["python-numpy"]=1:1.16.2-1							# 1:1.16.2-1
apt_packages["python-dev"]=2.7.16-1								# 2.7.16-1
apt_packages["wiringpi"]=2.50									# 2.50
apt_packages["libjpeg8-dev"]=8d1-2								# Not Installed
apt_packages["libv4l-dev"]=1.16.3-3								# Not Installed
apt_packages["libusb-dev"]=2:0.1.12-32							# Not Installed
apt_packages["libftdi-dev"]=0.20-4								# Not Installed
apt_packages["libftdi1"]=0.20-4									# Not Installed
apt_packages["libftdi1-dev"]=1.4-1+b2							# Not Installed
apt_packages["hostapd"]=2:2.7+git20190128+0c1e29f-6+deb10u3		# Not Installed
apt_packages["dnsmasq"]=2.80-1+rpt1+deb10u1						# Not Installed
apt_packages["mongodb"]=1:2.4.14-4								# Not Installed
apt_packages["nginx"]=1.14.2-2+deb10u5							# Not Installed

# Loop through package list, install specified version, and lock to prevent accidental upgrades
apt_update_needed=false
apt_update_performed=false
for key in ${!apt_packages[@]}; do
	if [[ $(apt-cache policy ${key} | awk '/Installed: /{ print $2 }') != ${apt_packages[${key}]} ]]; then
		apt_update_needed=true
		if [ $apt_update_needed == true ] && [ $apt_update_performed == false ]; then
			sudo apt update
			apt_update_performed=true
		fi
		sudo apt install ${key}=${apt_packages[${key}]} -y --allow-downgrades
	fi
done

# Clean orphaned dependencies and cache if update performed
if [ $apt_update_performed == true ]; then
	sudo apt autoremove -y
	sudo apt autoclean -y
fi


########################################
# 1.B Node.js
########################################

# Verify/Install NVM (Node Version Manager)
if [[ $(n -V) != "v9.0.1" ]]; then
	sudo curl -L https://raw.githubusercontent.com/tj/n/v9.0.1/bin/n -o /usr/local/bin/n
	sudo chmod 755 /usr/local/bin/n
fi

# Verify/Install Node.js
if [[ $(node -v) != "v18.16.1" ]]; then
	sudo n 18.16.1
fi


########################################
# 1.C: MyBot Software
########################################

# Check for testing flag
if [[ $testing -eq 1 ]]; then
	# Set proper directory ownership since files manually placed
	sudo chown -R root:root /usr/Fusion
else
	if [ ! -d "/usr/Fusion" ]; then
		# Clone software
		sudo git clone --depth 1 https://github.com/Modern-Robotics/Fusion.git /usr/Fusion --branch ${branch}
	else
		# Update software
		sudo git --git-dir /usr/Fusion/.git --work-tree=/usr/Fusion reset --hard HEAD
		sudo git --git-dir /usr/Fusion/.git --work-tree=/usr/Fusion pull
	fi
fi

# Install npm dependencies
sudo npm --prefix /usr/Fusion/FusionServer/Build install --omit=dev


########################################
# 1.D: PIP Packages
########################################

# An embedded python script used to retrieve a pip package's version
# Currently used because the traditional 'pip show (package)' command is too slow
find_pip_package_version="
import sys
import pkg_resources
try:
	dist = pkg_resources.get_distribution(sys.argv[1])
	print('{}'.format(dist.version))
except pkg_resources.DistributionNotFound:
	print('')
"

# Declare list of pip package names and versions
declare -A pip_packages
pip_packages["remi"]=1.1
pip_packages["pylibftdi"]=0.17.0
pip_packages["RPi.GPIO"]=0.7.0
pip_packages["spidev"]=3.5
pip_packages["diskcache"]=4.1.0
pip_packages["posix_ipc"]=1.0.5

# Loop through package list, install specified version
for package in ${!pip_packages[@]}; do
	installedVersion=$(python -c "$find_pip_package_version" ${package})
	if [[ $installedVersion != ${pip_packages[${package}]} ]]; then
		sudo pip install ${package}==${pip_packages[${package}]}
	fi
done

# Declare an array to store custom pip packages' versions'
declare -A custom_pip_packages

# Declare an array to store custom pip packages' paths
declare -A custom_pip_packages_paths

# Loop through all files in the lib directory searching for custom packages
for file in /usr/Fusion/lib/*; do

  # If the file ends with .tar.gz, add it to custom packages
  if [[ $file == *.tar.gz ]]; then

    # Extract the name and version
    fileName=$(basename "$file" .tar.gz)
    packageName=$(echo "$fileName" | grep -oP '^[^-]+')
    packageVersion=$(echo "$file" | grep -oP '(?<=-)\d+\.\d+\.\d+')

    custom_pip_packages[$packageName]="$packageVersion"
    custom_pip_packages_paths[$packageName]="$file"

  fi
done

# Loop through custom package list, install specified version
for package in ${!custom_pip_packages[@]}; do
    installedVersion=$(python -c "$find_pip_package_version" ${package})
    if [[ $installedVersion != ${custom_pip_packages[${package}]} ]]; then
        sudo pip install ${custom_pip_packages_paths[${package}]}
    fi
done


########################################
# 1.D: Pygame
########################################

# Modify pygame library to disable welcome messages
sudo sed -i "s|^print('pygame %s' % ver)|# &|" /usr/lib/python2.7/dist-packages/pygame/__init__.py
sudo sed -i "s|^print('Hello from the pygame community. https://www.pygame.org/contribute.html')|# &|" /usr/lib/python2.7/dist-packages/pygame/__init__.py


################################################################################
# Step 2: Configuration Files
################################################################################


########################################
# 2.A: DHCPCD
########################################

# Installs DHCPCD config
if ! cmp -s /etc/dhcpcd.conf /usr/Fusion/config/dhcpcd/dhcpcd.conf; then
	sudo mv /etc/dhcpcd.conf /etc/dhcpcd.conf.orig
	sudo cp /usr/Fusion/config/dhcpcd/dhcpcd.conf /etc/dhcpcd.conf
	sudo systemctl stop dhcpcd
	sudo systemctl disable dhcpcd
fi


########################################
# 2.B: DNSMASQ
########################################

# Installs DNSMSQ config
if ! cmp -s /etc/dnsmasq.conf /usr/Fusion/config/dnsmasq/dnsmasq.conf; then
	sudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.orig
	sudo cp /usr/Fusion/config/dnsmasq/dnsmasq.conf /etc/dnsmasq.conf
	sudo systemctl stop dnsmasq
	sudo systemctl disable dnsmasq
fi


########################################
# 2.C: HOSTAPD
########################################

# Installs HOSTAPD default config
if ! cmp -s /etc/default/hostapd /usr/Fusion/config/hostapd/hostapd; then
	sudo mv /etc/default/hostapd /etc/default/hostapd.orig
	sudo cp /usr/Fusion/config/hostapd/hostapd /etc/default/hostapd
fi

# Installs HOSTAPD config
if ! cmp -s /etc/hostapd/hostapd.conf /usr/Fusion/config/hostapd/hostapd.conf; then
	sudo mv /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.orig
	sudo cp /usr/Fusion/config/hostapd/hostapd.conf /etc/hostapd/hostapd.conf
	sudo systemctl unmask hostapd.service
	sudo systemctl stop hostapd
	sudo systemctl disable hostapd
fi


########################################
# 2.D: NGINX
########################################

# Unlinks the default nginx configuration
if [ -e "/etc/nginx/sites-enabled/default" ]; then
    sudo unlink /etc/nginx/sites-enabled/default
fi

# Installs a reverse proxy on nginx pointing to the mybot server
if ! cmp -s /etc/nginx/sites-available/mybot-interface /usr/Fusion/config/nginx/mybot-interface; then
	sudo cp /usr/Fusion/config/nginx/mybot-interface /etc/nginx/sites-available/mybot-interface
	sudo ln -sfn /etc/nginx/sites-available/mybot-interface /etc/nginx/sites-enabled/
	sudo systemctl reload nginx
fi


########################################
# 2.D: MyBot Hostnames
########################################

# Installs MyBot hostnames for domain resolution
if ! cmp -s /etc/hosts /usr/Fusion/config/hosts; then
	sudo cp /usr/Fusion/config/hosts /etc/hosts
fi


################################################################################
# Step 3: Custom Services
################################################################################


########################################
# 3.A: APSTA Service
########################################

# Installs bash script
if ! cmp -s /usr/local/bin/startDualNetworkMode /usr/Fusion/bin/startDualNetworkMode; then
	sudo cp /usr/Fusion/bin/startDualNetworkMode /usr/local/bin/startDualNetworkMode
	sudo chmod 755 /usr/local/bin/startDualNetworkMode
fi

# Installs bash script
if ! cmp -s /usr/local/bin/setup_networking /usr/Fusion/bin/setup_networking; then
	sudo cp /usr/Fusion/bin/setup_networking /usr/local/bin/setup_networking
	sudo chmod 755 /usr/local/bin/setup_networking
fi

# Installs unit file
if ! cmp -s /lib/systemd/system/apsta.service /usr/Fusion/config/apsta.service; then
	sudo cp /usr/Fusion/config/apsta.service /lib/systemd/system/apsta.service
	sudo chmod 644 /lib/systemd/system/apsta.service
	sudo systemctl daemon-reload
	sudo systemctl enable apsta.service
fi


########################################
# 3.B: Splashscreen Service
########################################

# Installs unit file
if ! cmp -s /lib/systemd/system/splashscreen.service /usr/Fusion/config/splashscreen.service; then
	sudo cp /usr/Fusion/config/splashscreen.service /lib/systemd/system/splashscreen.service
	sudo chmod 644 /lib/systemd/system/splashscreen.service
	sudo systemctl daemon-reload
	sudo systemctl enable splashscreen.service
fi


########################################
# 3.C: MyBot Service
########################################

# Installs unit file
if ! cmp -s /lib/systemd/system/mybot.service /usr/Fusion/config/mybot.service; then
	sudo cp /usr/Fusion/config/mybot.service /lib/systemd/system/mybot.service
	sudo chmod 644 /lib/systemd/system/mybot.service
	sudo systemctl daemon-reload
	sudo systemctl enable mybot.service
fi


########################################
# 3.D: Sync Serial Service
########################################

# Installs bash script
if ! cmp -s /usr/local/bin/syncSerial /usr/Fusion/bin/syncSerial; then
	sudo cp /usr/Fusion/bin/syncSerial /usr/local/bin/syncSerial
	sudo chmod 755 /usr/local/bin/syncSerial
fi

# Installs unit file
if ! cmp -s /lib/systemd/system/syncserial.service /usr/Fusion/config/syncserial.service; then
	sudo cp /usr/Fusion/config/syncserial.service /lib/systemd/system/syncserial.service
	sudo chmod 644 /lib/systemd/system/syncserial.service
	sudo systemctl daemon-reload
	sudo systemctl enable syncserial.service
fi


########################################
# 3.E: Power off Board Service
########################################

# Installs bash script
if ! cmp -s /usr/local/bin/transmit_to_board /usr/Fusion/bin/transmit_to_board; then
	sudo cp /usr/Fusion/bin/transmit_to_board /usr/local/bin/transmit_to_board
	sudo chmod 755 /usr/local/bin/transmit_to_board
fi

# Installs unit file
if ! cmp -s /lib/systemd/system/poweroffboard.service /usr/Fusion/config/poweroffboard.service; then
	sudo cp /usr/Fusion/config/poweroffboard.service /lib/systemd/system/poweroffboard.service
	sudo chmod 644 /lib/systemd/system/poweroffboard.service
	sudo systemctl daemon-reload
	sudo systemctl enable poweroffboard.service
	sudo systemctl start poweroffboard.service
fi


########################################
# 3.F: Restart Board Service
########################################

# Installs unit file
if ! cmp -s /lib/systemd/system/restartboard.service /usr/Fusion/config/restartboard.service; then
	sudo cp /usr/Fusion/config/restartboard.service /lib/systemd/system/restartboard.service
	sudo chmod 644 /lib/systemd/system/restartboard.service
	sudo systemctl daemon-reload
	sudo systemctl enable restartboard.service
	sudo systemctl start restartboard.service
fi


################################################################################
# Step 4: Poweroff
################################################################################


########################################
# 4.A: Reset any developer mods
########################################

# Check if the reset flag was set
if [[ $reset -eq 1 ]]; then

    # Modify the keyboard layout
	defaultLayout="us"
    sudo sed -i "s/^XKBLAYOUT=.*/XKBLAYOUT=$defaultLayout/" /etc/default/keyboard
    sudo sed -i 's/^XKBVARIANT=.*/XKBVARIANT=/' /etc/default/keyboard
    setxkbmap $defaultLayout  # Uncomment if using a graphical environment

    # Remove network configurations from wpa_supplicant.conf
    sudo sed -i '/network={/,/}/d' /etc/wpa_supplicant/wpa_supplicant.conf

	# Remove log except mongodb and nginx ones (since causes crash)
	for item in /var/log/*; do
		# If the item is NOT the mongodb or nginx directory
		if [[ "$item" != "/var/log/mongodb" ]] && [[ "$item" != "/var/log/nginx" ]]; then
			# Remove it
			sudo rm -rf "$item"
		fi
	done

	# Remove bash history
	cat /dev/null > ~/.bash_history && history -c
	poweroff

fi


########################################
# 4.B: Turn off device
########################################

reboot